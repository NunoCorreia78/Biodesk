
# Imports essenciais para startup
from pathlib import Path

# PyQt6 - APENAS o b√°sico para definir classes
from PyQt6.QtWidgets import QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QTabWidget, QLabel, QLineEdit, QTextEdit, QComboBox, QDateEdit, QPushButton, QScrollArea, QFrame, QApplication, QDialog, QListWidget, QListWidgetItem, QMessageBox
from PyQt6.QtCore import Qt, QDate
from PyQt6.QtGui import QShortcut, QKeySequence
from biodesk_dialogs import BiodeskMessageBox

# ‚úÖ SISTEMA NOVO: BiodeskStyles v2.0 - Estilos centralizados
try:
    from biodesk_styles import BiodeskStyles, DialogStyles, ButtonType
    BIODESK_STYLES_AVAILABLE = True
except ImportError as e:
    BIODESK_STYLES_AVAILABLE = False

# Imports essenciais para a classe principal
from db_manager import DBManager
from sistema_assinatura import abrir_dialogo_assinatura

# üîß SERVI√áOS MODULARES - Arquitetura refatorada
from ficha_paciente.services.pdf_service_simple import PDFService, get_pdf_service
from ficha_paciente.managers.consentimentos_manager import criar_consentimentos_manager
from ficha_paciente.services.email_service import EmailService
from ficha_paciente.services.template_service import TemplateService
from ficha_paciente.services.document_service import DocumentService

# LAZY IMPORTS para m√≥dulos especializados
_modulos_cache = {}

def importar_modulos_especializados():
    """Importa m√≥dulos especializados apenas quando necess√°rio"""
    if not _modulos_cache:
        try:
            from ficha_paciente.dados_pessoais import DadosPessoaisWidget
            from ficha_paciente.historico_clinico import HistoricoClinicoWidget  
            from ficha_paciente.templates_manager import TemplatesManagerWidget
            from ficha_paciente.comunicacao_manager import ComunicacaoManagerWidget
            from ficha_paciente.gestao_documentos import GestaoDocumentosWidget
            from ficha_paciente.declaracao_saude import DeclaracaoSaudeWidget
            from ficha_paciente.pesquisa_pacientes import PesquisaPacientesManager
            from ficha_paciente.centro_comunicacao_unificado import CentroComunicacaoUnificado
            
            _modulos_cache.update({
                'dados_pessoais': DadosPessoaisWidget,
                'historico_clinico': HistoricoClinicoWidget,
                'templates_manager': TemplatesManagerWidget,
                'comunicacao_manager': ComunicacaoManagerWidget,
                'gestao_documentos': GestaoDocumentosWidget,
                'declaracao_saude': DeclaracaoSaudeWidget,
                'pesquisa_pacientes': PesquisaPacientesManager,
                'centro_comunicacao_unificado': CentroComunicacaoUnificado
            })
        except ImportError:
            pass
        
    return (_modulos_cache.get('dados_pessoais'), _modulos_cache.get('historico_clinico'), 
            _modulos_cache.get('templates_manager'), _modulos_cache.get('comunicacao_manager'),
            _modulos_cache.get('gestao_documentos'), _modulos_cache.get('declaracao_saude'),
            None, _modulos_cache.get('pesquisa_pacientes'))

class FichaPaciente(QMainWindow):
    def __init__(self, paciente_data=None, parent=None):
        # Inicializa√ß√£o m√≠nima
        super().__init__(parent)
        
        # APENAS o essencial durante __init__
        # ‚úÖ USAR DADOS FORNECIDOS OU CRIAR FICHA VAZIA
        self.paciente_data = paciente_data or {}
        self.dirty = False
        
        # Usar singleton do DBManager
        self.db = DBManager.get_instance()
        
        # Flags de controle para lazy loading
        self._pdf_viewer_initialized = False
        self._webengine_available = None
        self._initialized = False
        
        # üöÄ CARREGAMENTO IMEDIATO: Carregar dados pessoais na inicializa√ß√£o
        self._tabs_loaded = {
            'dados_pessoais': False,  # Ser√° carregado imediatamente
            'historico': False,
            'irisdiagnose': False,
            'terapia_quantica': False,
            'centro_comunicacao': False
        }
        
        # Preven√ß√£o de carregamentos m√∫ltiplos simult√¢neos
        self._loading_locks = set()
        
        # Flag para indicar que est√° carregando dados iniciais
        self._carregando_dados = False
        
        # ANTI-FLICKERING: Remover chamada para _init_delayed
        # A UI ser√° constru√≠da diretamente no __init__ de forma otimizada
        
        # ‚úÖ CONSTRU√á√ÉO SIMPLES E DIRETA DA UI
        self._ultima_zona_hover = None
        
        # Configurar geometria adequada
        self.setMinimumSize(1200, 800)
        self.resize(1400, 900)
        
        # Configurar atualiza√ß√£o autom√°tica dos dados (otimizada)
        self.setup_data_refresh()
        
        # Sistema modular de assinaturas
        # Armazenar assinaturas capturadas por tipo de consentimento
        self.assinaturas_por_tipo = {}  # {'rgpd': {'paciente': bytes, 'terapeuta': bytes}, ...}
        self.assinatura_paciente_data = None
        self.assinatura_terapeuta_data = None
        
        # üîß INICIALIZAR SERVI√áOS MODULARES
        self._init_services()
        
        # Adicionar debounce para preven√ß√£o de cliques m√∫ltiplos
        self._ultimo_clique_data = 0
        
        # ‚ú® CONSTRUIR UI DIRETAMENTE - SEM COMPLICA√á√ïES
        self.init_ui()
        self.load_data()
        
        # üìä FINALIZAR INICIALIZA√á√ÉO COM MONITORAMENTO
        self._finalize_startup()
        
    def load_data(self):
        """Carrega dados do paciente de forma otimizada"""
        if not self.paciente_data:
            return
        
        # Marcar que est√° carregando dados para evitar dirty flags
        self._carregando_dados = True
        
        try:
            # Configurar t√≠tulo da janela
            nome = self.paciente_data.get('nome', 'Novo Paciente')
            self.setWindowTitle(f"üìã Ficha do Paciente - {nome}")
            
            # üîÑ CARREGAR DADOS NOS WIDGETS J√Å INICIALIZADOS
            self._atualizar_widgets_com_dados()
            
        except Exception as e:
            pass
        finally:
            # Limpar flag de carregamento
            self._carregando_dados = False

    def _init_services(self):
        """Inicializa servi√ßos modulares com lazy loading"""
        self._pdf_service = None
        self._email_service = None
        self._template_service = None
        self._document_service = None

    def _get_pdf_service(self):
        """Obt√©m inst√¢ncia do PDFService (lazy loading)"""
        if self._pdf_service is None:
            self._pdf_service = get_pdf_service()
        return self._pdf_service

    def _get_email_service(self):
        """Obt√©m inst√¢ncia do EmailService (lazy loading)"""
        if self._email_service is None:
            self._email_service = EmailService()
        return self._email_service

    def _get_template_service(self):
        """Obt√©m inst√¢ncia do TemplateService (lazy loading)"""
        if self._template_service is None:
            self._template_service = TemplateService()
        return self._template_service

    def _get_document_service(self):
        """Obt√©m inst√¢ncia do DocumentService (lazy loading)"""
        if self._document_service is None:
            self._document_service = DocumentService(self.paciente_data)
        return self._document_service
    
    def _atualizar_widgets_com_dados(self):
        """Atualiza widgets j√° inicializados com os novos dados do paciente"""
        try:
            # Atualizar dados pessoais se j√° carregado
            if hasattr(self, 'dados_pessoais_widget') and self.dados_pessoais_widget:
                if hasattr(self.dados_pessoais_widget, 'set_paciente_data'):
                    self.dados_pessoais_widget.set_paciente_data(self.paciente_data)
                elif hasattr(self.dados_pessoais_widget, 'carregar_dados_paciente'):
                    self.dados_pessoais_widget.carregar_dados_paciente(self.paciente_data)
            
            # Atualizar hist√≥rico cl√≠nico se j√° carregado
            if hasattr(self, 'historico_widget') and self.historico_widget:
                historico_texto = self.paciente_data.get('historico', '')
                self.historico_widget.set_historico_texto(historico_texto)
            
            # Atualizar outros widgets conforme necess√°rio
            if hasattr(self, 'declaracao_widget') and self.declaracao_widget:
                self.declaracao_widget.carregar_dados(self.paciente_data)
                
            if hasattr(self, 'gestao_documentos_widget') and self.gestao_documentos_widget:
                self.gestao_documentos_widget.atualizar_paciente(self.paciente_data)
                
            print("üîÑ Widgets atualizados com novos dados do paciente")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao atualizar widgets: {e}")
    
    def _finalize_startup(self):
        """Finaliza a inicializa√ß√£o com monitoramento de performance"""
        import time
        
        # Marcar inicializa√ß√£o como completa
        self._initialized = True
        
    # ====== CALLBACKS PARA M√ìDULOS ESPECIALIZADOS ======
    def on_template_selecionado(self, template_data):
        """Callback quando template √© selecionado no m√≥dulo especializado"""
        pass
    
    def on_followup_agendado(self, tipo_followup, dias):
        """Callback quando follow-up √© agendado no m√≥dulo de comunica√ß√£o"""
        pass
    
    def on_protocolo_adicionado(self, protocolo):
        """Callback quando protocolo √© adicionado no m√≥dulo de templates"""
        pass
    
    def on_template_gerado(self, template_data):
        """Callback quando template √© gerado no m√≥dulo de templates"""
        pass
    
    def data_atual(self):
        """M√âTODO REFATORADO - usa DateUtils"""
        from ficha_paciente.utils import DateUtils
        return DateUtils.data_atual()
    
    def selecionar_imagem_galeria(self, img):
        """Seleciona a imagem da galeria visual, atualiza canvas e aplica destaque visual"""
        if not img:
            return
        # Atualizar canvas com verifica√ß√£o de seguran√ßa
        if hasattr(self, 'iris_canvas') and self.iris_canvas is not None:
            caminho = img.get('caminho_imagem', '') or img.get('caminho', '')
            tipo = img.get('tipo', None)
            try:
                self.iris_canvas.set_image(caminho, tipo)
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar imagem na iris: {e}")
                # N√£o fazer crash - continuar execu√ß√£o
        # Guardar sele√ß√£o
        self.imagem_iris_selecionada = img
        # Atualizar destaque visual das miniaturas
        if hasattr(self, '_miniaturas_iris'):
            selecionado_id = img.get('id')
            for mid, frame in self._miniaturas_iris.items():
                if not frame:
                    continue
                if mid == selecionado_id:
                    frame.setProperty('selecionado', True)
                    frame.setStyleSheet(frame.property('style_base_selecionado'))
                else:
                    frame.setProperty('selecionado', False)
                    frame.setStyleSheet(frame.property('style_base_normal'))

    # Fun√ß√£o removida - usar apenas a vers√£o otimizada abaixo

    def setup_data_refresh(self):
        """Configura sistema de atualiza√ß√£o autom√°tica de dados (otimizada)"""
        try:
            # Sistema de refresh sob demanda (mais eficiente que timer autom√°tico)
            # Timer autom√°tico desabilitado para melhor performance
            self.refresh_timer = None
            # Sistema de atualiza√ß√£o sob demanda configurado
        except Exception as e:
            # Erro ao configurar atualiza√ß√£o
            pass

    def refresh_patient_data(self):
        """Atualiza dados do paciente se necess√°rio"""
        try:
            # Verificar se ainda temos refer√™ncia ao paciente
            if not self.paciente_data or not self.paciente_data.get('id'):
                return
                
            # Recarregar dados do BD se dispon√≠vel
            if hasattr(self, 'db') and self.db:
                paciente_id = self.paciente_data.get('id')
                dados_atualizados = self.db.obter_paciente(paciente_id)
                
                if dados_atualizados:
                    # Atualizar apenas se h√° mudan√ßas significativas
                    campos_importantes = ['nome', 'email', 'contacto', 'peso', 'altura']
                    mudou = False
                    
                    for campo in campos_importantes:
                        if dados_atualizados.get(campo) != self.paciente_data.get(campo):
                            mudou = True
                            break
                    
                    if mudou:
                        self.paciente_data = dados_atualizados
                        self.update_ui_with_new_data()
                        
        except Exception as e:
            pass

    def update_ui_with_new_data(self):
        """Atualiza interface com novos dados do paciente"""
        try:
            # Atualizar email na aba de comunica√ß√£o
            if hasattr(self, 'carregar_dados_paciente_email'):
                self.carregar_dados_paciente_email()
            
            # Atualizar dados na declara√ß√£o de sa√∫de
            if hasattr(self, 'declaracao_saude_widget') and self.declaracao_saude_widget:
                if hasattr(self.declaracao_saude_widget, 'set_paciente_data'):
                    self.declaracao_saude_widget.set_paciente_data(self.paciente_data)
            
            # Atualizar t√≠tulo da janela
            if self.paciente_data.get('nome'):
                self.setWindowTitle(f"üìã Ficha do Paciente - {self.paciente_data.get('nome')}")
            
        except Exception as e:
            pass
    
    def resetar_tabs_para_teste(self):
        """M√âTODO DE DESENVOLVIMENTO: Reseta flags para testar lazy loading"""
        if hasattr(self, '_development_mode') and self._development_mode:
            for key in self._tabs_loaded:
                if key not in ['dados_pessoais', 'dados_documentos']:
                    self._tabs_loaded[key] = False
            
            self._loading_locks.clear()
            print("üîÑ Flags de lazy loading resetados para teste")
            return True
        return False
        
    def aplicar_estilo_global_hover(self):
        """Aplica estilo de hover globalmente em todos os bot√µes"""
        # ‚ú® Hover global aplicado automaticamente pelo BiodeskStyleManager
        pass
        
    def _on_dados_tab_changed(self, index):
        """Carrega sub-tabs de dados & documentos sob demanda"""
        import time
        start_time = time.time()
        
        try:
            if index == 0 and not self._tabs_loaded.get('dados_pessoais', False):
                self.init_sub_dados_pessoais()
                self._tabs_loaded['dados_pessoais'] = True
                
            elif index == 1 and not self._tabs_loaded.get('declaracao_saude', False):
                self.init_sub_declaracao_saude_modular()
                self._tabs_loaded['declaracao_saude'] = True
                
        except Exception as e:
            pass  # Erro n√£o cr√≠tico

    def init_ui(self):
        """Inicializa√ß√£o da interface principal"""
        # ‚úÖ APLICAR ESTILO GLOBAL DE HOVER
        self.aplicar_estilo_global_hover()
        
        # Widget central
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(10)
        
        # ====== NOVA ESTRUTURA SIMPLIFICADA: 5 ABAS PRINCIPAIS ======
        self.tabs = QTabWidget()
        self.tab_dados_pessoais = QWidget()
        self.tab_historico = QWidget()
        self.tab_irisdiagnose = QWidget()
        self.tab_terapia_quantica = QWidget()
        self.tab_centro_comunicacao = QWidget()
        
        self.tabs.addTab(self.tab_dados_pessoais, 'üë§ DADOS PESSOAIS')
        self.tabs.addTab(self.tab_historico, 'üè• HIST√ìRICO')
        self.tabs.addTab(self.tab_irisdiagnose, 'üëÅÔ∏è IRISDIAGNOSE')
        self.tabs.addTab(self.tab_terapia_quantica, '‚öõÔ∏è TERAPIA QU√ÇNTICA')
        self.tabs.addTab(self.tab_centro_comunicacao, 'üìß CENTRO DE COMUNICA√á√ÉO')
        
        main_layout.addWidget(self.tabs)
        
        # Conectar sinal para lazy loading das outras abas
        self.tabs.currentChanged.connect(self._on_main_tab_changed)
        
        # üöÄ CARREGAMENTO IMEDIATO: Inicializar primeira aba imediatamente
        self.init_tab_dados_pessoais()
        self._tabs_loaded['dados_pessoais'] = True
        
        # üöÄ LAZY LOADING: Conectar sinal para carregar tabs principais sob demanda
        self.tabs.currentChanged.connect(self._on_main_tab_changed)
        
        # Atalho Ctrl+S
        shortcut = QShortcut(QKeySequence('Ctrl+S'), self)
        shortcut.activated.connect(self.guardar)
        
        # üöÄ LAZY LOADING: N√ÉO inicializar tabs principais - carregar o primeiro sob demanda
        # Carregar apenas o primeiro tab por padr√£o
        self._on_main_tab_changed(0)

    def _on_main_tab_changed(self, index):
        """Carrega tabs principais sob demanda com medi√ß√£o de performance"""
        import time
        start_time = time.time()
        
        # Preven√ß√£o de carregamentos m√∫ltiplos
        lock_key = f"main_tab_{index}"
        if lock_key in self._loading_locks:
            return
        
        try:
            self._loading_locks.add(lock_key)
            
            if index == 0 and not self._tabs_loaded.get('dados_pessoais', False):
                print("üîÑ Carregando tab DADOS PESSOAIS...")
                self.init_tab_dados_pessoais()
                self._tabs_loaded['dados_pessoais'] = True
                
            elif index == 1 and not self._tabs_loaded.get('historico', False):
                print("üîÑ [DEBUG LAZY] Carregando tab HIST√ìRICO...")
                self.init_tab_historico()
                self._tabs_loaded['historico'] = True
                
            elif index == 2 and not self._tabs_loaded.get('irisdiagnose', False):
                self.init_tab_irisdiagnose()
                self._tabs_loaded['irisdiagnose'] = True
                
            elif index == 3 and not self._tabs_loaded.get('terapia_quantica', False):
                self.init_tab_terapia_quantica()
                self._tabs_loaded['terapia_quantica'] = True
                
            elif index == 4 and not self._tabs_loaded.get('centro_comunicacao', False):
                self.init_tab_centro_comunicacao()
                self._tabs_loaded['centro_comunicacao'] = True
            
            load_time = time.time() - start_time
            if load_time > 0.1:  # S√≥ reportar se demorar mais de 100ms
                print(f"‚è±Ô∏è Tab principal carregado em {load_time:.2f}s")
                
        finally:
            self._loading_locks.discard(lock_key)

    def init_tab_dados_pessoais(self):
        """üë§ DADOS PESSOAIS - Aba dedicada aos dados do paciente"""
        layout = QVBoxLayout(self.tab_dados_pessoais)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)
        
        # Usar lazy loading para Dados Pessoais Widget
        _, _, _, _, _, _, _, _ = importar_modulos_especializados()
        DadosPessoaisWidget = _modulos_cache.get('dados_pessoais')
        
        if DadosPessoaisWidget:
            self.dados_pessoais_widget = DadosPessoaisWidget(self.paciente_data, self)
            layout.addWidget(self.dados_pessoais_widget)
        else:
            placeholder = QLabel("‚ö†Ô∏è M√≥dulo de dados pessoais n√£o dispon√≠vel")
            layout.addWidget(placeholder)

    def init_tab_historico(self):
        """üè• HIST√ìRICO - Hist√≥rico cl√≠nico com popups integrados"""
        layout = QVBoxLayout(self.tab_historico)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)
        
        # Cabe√ßalho com bot√µes de a√ß√£o
        header_frame = QFrame()
        header_layout = QHBoxLayout(header_frame)
        
        title_label = QLabel("üè• <b>Hist√≥rico Cl√≠nico</b>")
        title_label.setStyleSheet("font-size: 16px; color: #2c3e50; margin: 5px;")
        header_layout.addWidget(title_label)
        
        header_layout.addStretch()
        
        # Bot√µes de a√ß√£o r√°pida
        btn_declaracao = QPushButton("üìã Declara√ß√£o de Sa√∫de")
        btn_prescricao = QPushButton("üíä Nova Prescri√ß√£o")
        btn_protocolo = QPushButton("üìã Protocolos")
        
        if BIODESK_STYLES_AVAILABLE:
            BiodeskStyles.apply_to_existing_button(btn_declaracao, ButtonType.DEFAULT)
            BiodeskStyles.apply_to_existing_button(btn_prescricao, ButtonType.SAVE)
            BiodeskStyles.apply_to_existing_button(btn_protocolo, ButtonType.DEFAULT)
        
        btn_declaracao.clicked.connect(self.abrir_declaracao_popup)
        btn_prescricao.clicked.connect(self.abrir_prescricao_popup)
        btn_protocolo.clicked.connect(self.abrir_protocolo_popup)
        
        header_layout.addWidget(btn_declaracao)
        header_layout.addWidget(btn_prescricao)
        header_layout.addWidget(btn_protocolo)
        
        layout.addWidget(header_frame)
        
        # Hist√≥rico cl√≠nico principal
        _, HistoricoClinicoWidget, _, _, _, _, _, _ = importar_modulos_especializados()
        
        if HistoricoClinicoWidget:
            # Extrair texto do hist√≥rico dos dados do paciente
            historico_texto = self.paciente_data.get('historico', '')
            if isinstance(historico_texto, dict):
                # Se for dict, tentar extrair texto ou usar string vazia
                historico_texto = historico_texto.get('texto', '') or historico_texto.get('historico', '') or ''
            elif not isinstance(historico_texto, str):
                # Se n√£o for string nem dict, converter para string
                historico_texto = str(historico_texto) if historico_texto else ''
            
            print(f"üîç [DEBUG HIST√ìRICO] Criando widget com {len(historico_texto)} chars")
            self.historico_widget = HistoricoClinicoWidget(historico_texto, self)
            
            # ‚úÖ CONECTAR SINAIS AQUI TAMB√âM
            self.historico_widget.historico_alterado.connect(self.on_historico_alterado)
            self.historico_widget.guardar_solicitado.connect(self.guardar)
            print(f"üîç [DEBUG HIST√ìRICO] Sinais conectados")
            
            layout.addWidget(self.historico_widget)
            print(f"üîç [DEBUG HIST√ìRICO] Widget criado e adicionado ao layout")
        else:
            placeholder = QLabel("‚ö†Ô∏è M√≥dulo de hist√≥rico cl√≠nico n√£o dispon√≠vel")
            layout.addWidget(placeholder)
        
        print("‚úÖ Hist√≥rico cl√≠nico carregado com popups integrados")

    def init_tab_irisdiagnose(self):
        """üëÅÔ∏è IRISDIAGNOSE - An√°lise de √≠ris completa"""
        # Carregar m√≥dulo de √≠ris automaticamente
        self.carregar_modulo_iris_completo()
    
    def carregar_modulo_iris_completo(self):
        """Carrega m√≥dulo completo de an√°lise de √≠ris"""
        try:
            print("üîÑ Tentando importar m√≥dulo IrisIntegrationWidget...")
            # Importar m√≥dulo de √≠ris
            from ficha_paciente.iris_integration import IrisIntegrationWidget
            print("‚úÖ IrisIntegrationWidget importado com sucesso!")
            
            # Verificar se j√° existe layout
            layout = self.tab_irisdiagnose.layout()
            if layout:
                # Limpar layout existente
                while layout.count():
                    child = layout.takeAt(0)
                    if child.widget():
                        child.widget().deleteLater()
                print("üßπ Layout existente limpo")
            else:
                # Criar novo layout apenas se n√£o existir
                layout = QVBoxLayout(self.tab_irisdiagnose)
                layout.setContentsMargins(4, 4, 4, 4)
                layout.setSpacing(6)
                print("‚úÖ Novo layout criado")
            
            print("üîÑ Criando widget de √≠ris integrado...")
            # Criar widget de √≠ris integrado - PASSAR DADOS CORRETAMENTE
            self.iris_widget = IrisIntegrationWidget(self.paciente_data)
            print("‚úÖ Widget de √≠ris criado!")
            
            # Conectar sinais
            if hasattr(self.iris_widget, 'zona_clicada'):
                self.iris_widget.zona_clicada.connect(self.on_zona_iris_clicada)
                print("‚úÖ Sinal zona_clicada conectado!")
            
            # ‚úÖ CONECTAR SINAL DE EXPORTA√á√ÉO DE NOTAS PARA HIST√ìRICO
            if hasattr(self.iris_widget, 'notas_exportadas'):
                self.iris_widget.notas_exportadas.connect(self.on_notas_iris_exportadas)
                print("‚úÖ Sinal notas_exportadas conectado!")
            else:
                print("‚ö†Ô∏è Widget de √≠ris n√£o tem sinal notas_exportadas")
            
            layout.addWidget(self.iris_widget)
            print("‚úÖ Widget adicionado ao layout!")
            
            print("‚úÖ M√≥dulo de √≠ris completo carregado com sucesso!")
            
        except ImportError as e:
            print(f"‚ùå Erro ao importar m√≥dulo de √≠ris: {e}")
            self.criar_placeholder_iris_simples()
        except Exception as e:
            print(f"‚ùå Erro geral ao carregar √≠ris: {e}")
            import traceback
            print(traceback.format_exc())
            self.criar_placeholder_iris_simples()
    
    def criar_placeholder_iris_simples(self):
        """Cria placeholder simples quando m√≥dulo completo n√£o est√° dispon√≠vel"""
        layout = self.tab_irisdiagnose.layout()
        if not layout:
            layout = QVBoxLayout(self.tab_irisdiagnose)
            layout.setContentsMargins(10, 10, 10, 10)
            layout.setSpacing(10)
        
        # Cabe√ßalho
        header_frame = QFrame()
        header_layout = QHBoxLayout(header_frame)
        
        title_label = QLabel("üëÅÔ∏è <b>An√°lise de √çris</b>")
        title_label.setStyleSheet("font-size: 16px; color: #2c3e50; margin: 5px;")
        header_layout.addWidget(title_label)
        
        header_layout.addStretch()
        
        # Bot√£o para tentar carregar novamente
        btn_carregar_iris = QPushButton("üîÑ Tentar Carregar Novamente")
        if BIODESK_STYLES_AVAILABLE:
            BiodeskStyles.apply_to_existing_button(btn_carregar_iris, ButtonType.DEFAULT)
        
        btn_carregar_iris.clicked.connect(self.carregar_modulo_iris_completo)
        header_layout.addWidget(btn_carregar_iris)
        
        layout.addWidget(header_frame)
        
        # √Årea de placeholder
        placeholder = QLabel("üëÅÔ∏è <b>An√°lise de √çris</b><br><br>"
                            "‚ö†Ô∏è M√≥dulo completo n√£o dispon√≠vel<br>"
                            "üîÑ Clique em 'Tentar Carregar Novamente' para recarregar<br>"
                            "üí° Verifique se o arquivo iris_integration.py est√° presente")
        placeholder.setAlignment(Qt.AlignmentFlag.AlignCenter)
        placeholder.setStyleSheet("""
            font-size: 14px; 
            color: #666; 
            padding: 50px;
            background-color: #fff3cd;
            border: 2px dashed #ffc107;
            border-radius: 8px;
        """)
        layout.addWidget(placeholder)
    
    def on_zona_iris_clicada(self, zona):
        """Callback quando uma zona da √≠ris √© clicada"""
        print(f"üéØ Zona da √≠ris clicada: {zona}")
        # Aqui pode adicionar l√≥gica espec√≠fica para zonas da √≠ris
        print(f"‚úÖ Processamento da zona {zona} conclu√≠do")
        
        print("‚úÖ Irisdiagnose interface criada (carregamento sob demanda)")
    
    def init_tab_terapia_quantica(self):
        """‚öõÔ∏è TERAPIA QU√ÇNTICA - Sistema de medicina energ√©tica"""
        layout = QVBoxLayout(self.tab_terapia_quantica)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(15)
        
        try:
            # Importar e carregar sistema de Terapia Qu√¢ntica
            from terapia_quantica_window import TerapiaQuanticaWindow
            
            # Criar interface de Terapia Qu√¢ntica para este paciente
            self.terapia_quantica_widget = TerapiaQuanticaWindow(
                paciente_data=self.paciente_data,
                parent=self,
                modo_integrado=True  # Modo integrado na ficha do paciente
            )
            
            # Adicionar ao layout
            layout.addWidget(self.terapia_quantica_widget)
            
            print("‚úÖ Sistema de Terapia Qu√¢ntica carregado para paciente")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao carregar Terapia Qu√¢ntica: {e}")
            
            # Interface de fallback
            erro_label = QLabel("‚ö†Ô∏è Sistema de Terapia Qu√¢ntica temporariamente indispon√≠vel")
            erro_label.setStyleSheet("""
                QLabel {
                    color: #666;
                    font-size: 14px;
                    padding: 20px;
                    text-align: center;
                }
            """)
            layout.addWidget(erro_label)
            
            # Bot√£o para tentar recarregar
            botao_recarregar = QPushButton("üîÑ Tentar Novamente")
            botao_recarregar.clicked.connect(lambda: self.init_tab_terapia_quantica())
            botao_recarregar.setMaximumWidth(200)
            layout.addWidget(botao_recarregar, alignment=Qt.AlignmentFlag.AlignCenter)
    
    def init_tab_centro_comunicacao(self):
        """üìß CENTRO DE COMUNICA√á√ÉO - Email e documentos"""
        layout = QVBoxLayout(self.tab_centro_comunicacao)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(5)
        
        # Carregar Centro de Comunica√ß√£o Unificado
        _, _, _, _, _, _, _, _ = importar_modulos_especializados()
        CentroComunicacaoUnificado = _modulos_cache.get('centro_comunicacao_unificado')
        
        if CentroComunicacaoUnificado:
            self.centro_comunicacao_widget = CentroComunicacaoUnificado(self.paciente_data, self)
            layout.addWidget(self.centro_comunicacao_widget)
        else:
            placeholder = QLabel("üìß <b>Centro de Comunica√ß√£o</b><br><br>‚ö†Ô∏è M√≥dulo n√£o dispon√≠vel")
            placeholder.setAlignment(Qt.AlignmentFlag.AlignCenter)
            placeholder.setStyleSheet("font-size: 14px; color: #666; padding: 50px;")
            layout.addWidget(placeholder)
        
        print("‚úÖ Centro de Comunica√ß√£o carregado")
    
    # ====== POPUPS INTEGRADOS NO HIST√ìRICO ======
    def abrir_declaracao_popup(self):
        """Abrir declara√ß√£o de sa√∫de como popup"""
        try:
            _, _, _, _, _, DeclaracaoSaudeWidget, _, _ = importar_modulos_especializados()
            
            if DeclaracaoSaudeWidget:
                dialog = QDialog(self)
                dialog.setWindowTitle("üìã Declara√ß√£o de Sa√∫de")
                dialog.setModal(True)
                
                # Configurar para tela cheia
                from PyQt6.QtCore import Qt
                dialog.setWindowState(Qt.WindowState.WindowMaximized)
                dialog.resize(1920, 1080)  # Fallback para resolu√ß√£o comum
                
                layout = QVBoxLayout(dialog)
                declaracao_widget = DeclaracaoSaudeWidget(dialog)
                # Carregar dados do paciente na declara√ß√£o - CORRIGIDO
                if hasattr(declaracao_widget, 'set_paciente_data'):
                    declaracao_widget.set_paciente_data(self.paciente_data)
                    print(f"‚úÖ Dados do paciente carregados na declara√ß√£o de sa√∫de")
                elif hasattr(declaracao_widget, 'carregar_dados'):
                    declaracao_widget.carregar_dados(self.paciente_data)
                    print(f"‚úÖ Dados do paciente carregados (m√©todo alternativo)")
                layout.addWidget(declaracao_widget)
                
                # Bot√µes
                buttons_frame = QFrame()
                buttons_layout = QHBoxLayout(buttons_frame)
                
                btn_salvar = QPushButton("üíæ Salvar")
                btn_fechar = QPushButton("‚ùå Fechar")
                
                if BIODESK_STYLES_AVAILABLE:
                    BiodeskStyles.apply_to_existing_button(btn_salvar, ButtonType.SAVE)
                    BiodeskStyles.apply_to_existing_button(btn_fechar, ButtonType.DEFAULT)
                
                buttons_layout.addStretch()
                buttons_layout.addWidget(btn_salvar)
                buttons_layout.addWidget(btn_fechar)
                
                layout.addWidget(buttons_frame)
                
                btn_fechar.clicked.connect(dialog.reject)
                btn_salvar.clicked.connect(lambda: self.salvar_declaracao(declaracao_widget, dialog))
                
                dialog.exec()
            else:
                BiodeskMessageBox.warning(self, "Aviso", "M√≥dulo de declara√ß√£o de sa√∫de n√£o dispon√≠vel")
                
        except Exception as e:
            BiodeskMessageBox.critical(self, "Erro", f"Erro ao abrir declara√ß√£o: {str(e)}")
    
    def abrir_prescricao_popup(self):
        """Abrir prescri√ß√£o m√©dica como popup"""
        try:
            from prescricao_medica_widget import PrescricaoMedicaWidget
            
            dialog = QDialog(self)
            dialog.setWindowTitle("üíä Nova Prescri√ß√£o M√©dica")
            dialog.setModal(True)
            
            # Configurar para maximizar como as outras janelas
            from PyQt6.QtCore import Qt
            from PyQt6.QtGui import QScreen
            
            # Maximizar a janela para ocupar toda a tela dispon√≠vel (excluindo barra de tarefas)
            screen = QApplication.primaryScreen()
            screen_geometry = screen.availableGeometry()
            
            # Definir tamanho exato da √°rea dispon√≠vel da tela
            dialog.setGeometry(screen_geometry)
            
            # Garantir que a janela est√° no estado maximizado
            dialog.setWindowState(Qt.WindowState.WindowMaximized)
            
            # Layout otimizado
            layout = QVBoxLayout(dialog)
            layout.setContentsMargins(5, 5, 5, 5)  # Margens m√≠nimas
            layout.setSpacing(3)
            
            prescricao_widget = PrescricaoMedicaWidget(parent=dialog, paciente_data=self.paciente_data)
            layout.addWidget(prescricao_widget, 1)  # stretch factor para ocupar todo espa√ßo
            
            dialog.exec()
            
        except ImportError:
            BiodeskMessageBox.warning(self, "Aviso", "M√≥dulo de prescri√ß√£o m√©dica n√£o dispon√≠vel")
        except Exception as e:
            BiodeskMessageBox.critical(self, "Erro", f"Erro ao abrir prescri√ß√£o: {str(e)}")
    
    def abrir_protocolo_popup(self):
        """Abrir protocolos como popup"""
        try:
            from ficha_paciente.templates_manager import TemplatesManagerWidget
            
            dialog = QDialog(self)
            dialog.setWindowTitle("üìã Gest√£o de Protocolos")
            dialog.setModal(True)
            
            # Configurar para tela cheia
            from PyQt6.QtCore import Qt
            dialog.setWindowState(Qt.WindowState.WindowMaximized)
            dialog.resize(1920, 1080)  # Fallback para resolu√ß√£o comum
            
            layout = QVBoxLayout(dialog)
            
            # Cabe√ßalho
            header_label = QLabel("üìã <b>Protocolos Terap√™uticos</b><br>"
                                 "<small>Gerencie e aplique protocolos de tratamento</small>")
            header_label.setStyleSheet("padding: 10px; background-color: #f0f8ff; border-radius: 5px; margin-bottom: 10px;")
            layout.addWidget(header_label)
            
            templates_widget = TemplatesManagerWidget(self.paciente_data, dialog)
            layout.addWidget(templates_widget)
            
            # Bot√µes
            buttons_frame = QFrame()
            buttons_layout = QHBoxLayout(buttons_frame)
            
            btn_aplicar = QPushButton("‚úÖ Aplicar ao Hist√≥rico")
            btn_fechar = QPushButton("‚ùå Fechar")
            
            if BIODESK_STYLES_AVAILABLE:
                BiodeskStyles.apply_to_existing_button(btn_aplicar, ButtonType.SAVE)
                BiodeskStyles.apply_to_existing_button(btn_fechar, ButtonType.DEFAULT)
            
            buttons_layout.addStretch()
            buttons_layout.addWidget(btn_aplicar)
            buttons_layout.addWidget(btn_fechar)
            
            layout.addWidget(buttons_frame)
            
            btn_fechar.clicked.connect(dialog.reject)
            btn_aplicar.clicked.connect(lambda: self.aplicar_protocolo_historico(templates_widget, dialog))
            
            dialog.exec()
            
        except ImportError:
            BiodeskMessageBox.warning(self, "Aviso", "M√≥dulo de protocolos n√£o dispon√≠vel")
        except Exception as e:
            BiodeskMessageBox.critical(self, "Erro", f"Erro ao abrir protocolos: {str(e)}")
    
    def salvar_declaracao(self, declaracao_widget, dialog):
        """Salvar declara√ß√£o de sa√∫de"""
        try:
            # Implementar l√≥gica de salvamento
            BiodeskMessageBox.information(dialog, "Sucesso", "Declara√ß√£o de sa√∫de salva com sucesso!")
            dialog.accept()
        except Exception as e:
            BiodeskMessageBox.critical(dialog, "Erro", f"Erro ao salvar declara√ß√£o: {str(e)}")
    
    def aplicar_protocolo_historico(self, templates_widget, dialog):
        """Aplicar protocolos selecionados ao hist√≥rico"""
        try:
            protocolos = templates_widget.obter_protocolos_selecionados()
            if protocolos and hasattr(self, 'historico_widget'):
                # Adicionar protocolos ao hist√≥rico
                texto_protocolos = "PROTOCOLOS APLICADOS:\n" + "\n".join([f"- {p}" for p in protocolos])
                if hasattr(self.historico_widget, 'adicionar_entrada'):
                    self.historico_widget.adicionar_entrada(texto_protocolos)
                
                BiodeskMessageBox.information(dialog, "Sucesso", f"{len(protocolos)} protocolo(s) aplicado(s) ao hist√≥rico!")
                dialog.accept()
            else:
                BiodeskMessageBox.warning(dialog, "Aviso", "Nenhum protocolo selecionado ou hist√≥rico n√£o dispon√≠vel")
        except Exception as e:
            BiodeskMessageBox.critical(dialog, "Erro", f"Erro ao aplicar protocolos: {str(e)}")
        """
        üìã DOCUMENTA√á√ÉO CL√çNICA
        - Dados Pessoais
        - Declara√ß√£o de Sa√∫de (com consentimentos integrados)
        - Gest√£o de Documentos
        """
        main_layout = QVBoxLayout(self.tab_dados_documentos)
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(10)
        
        # ====== SUB-ABAS DENTRO DE DADOS & DOCUMENTOS ======
        self.dados_documentos_tabs = QTabWidget()
        self.dados_documentos_tabs.setTabPosition(QTabWidget.TabPosition.North)
        self.dados_documentos_tabs.setProperty('cssClass', 'tab-container')  # Usar estilo centralizado
        
        # Sub-abas
        self.sub_dados_pessoais = QWidget()
        self.sub_declaracao_saude = QWidget()
        
        self.dados_documentos_tabs.addTab(self.sub_dados_pessoais, 'üë§ Dados Pessoais')
        self.dados_documentos_tabs.addTab(self.sub_declaracao_saude, 'ü©∫ Declara√ß√£o de Sa√∫de')
        
        # üöÄ CARREGAMENTO IMEDIATO: Conectar sinal para carregar sub-tabs sob demanda  
        self.dados_documentos_tabs.currentChanged.connect(self._on_dados_tab_changed)
        
        main_layout.addWidget(self.dados_documentos_tabs)
        
        # üöÄ CARREGAMENTO IMEDIATO: Carregar dados pessoais na inicializa√ß√£o
        self.init_sub_dados_pessoais()
        self._tabs_loaded['dados_pessoais'] = True

    def init_sub_dados_pessoais(self):
        """Sub-aba: Dados Pessoais - M√ìDULO OTIMIZADO"""
        try:
            # ‚úÖ USAR M√ìDULO OTIMIZADO DE DADOS PESSOAIS via lazy loading
            DadosPessoaisWidget, _, _, _, _, _, _, _ = importar_modulos_especializados()
            
            layout = QVBoxLayout(self.sub_dados_pessoais)
            layout.setContentsMargins(0, 0, 0, 0)
            
            # Criar widget modular
            self.dados_pessoais_widget = DadosPessoaisWidget(
                self.paciente_data, 
                self,  # parent 
                self   # ficha_paciente (refer√™ncia direta)
            )
            
            # Conectar sinais para sincroniza√ß√£o
            self.dados_pessoais_widget.dados_alterados.connect(self.on_dados_pessoais_alterados)
            self.dados_pessoais_widget.validacao_alterada.connect(self.on_validacao_dados_pessoais)
            
            layout.addWidget(self.dados_pessoais_widget)
            
            # print("‚úÖ M√≥dulo de dados pessoais carregado com sucesso")
            
        except ImportError as e:
            print(f"‚ùå ERRO CR√çTICO: M√≥dulo dados_pessoais n√£o encontrado: {e}")
            # SEM FALLBACK - deve funcionar sempre
    
    def on_dados_pessoais_alterados(self, dados):
        """Callback quando dados pessoais s√£o alterados PELO USU√ÅRIO"""
        # CORRE√á√ÉO: S√≥ marcar como dirty se n√£o estiver carregando dados iniciais
        if not getattr(self, '_carregando_dados', False) and dados:
            # Atualizar dados do paciente
            self.paciente_data.update(dados)
            self.dirty = True
            
            # Atualizar t√≠tulo da janela se nome mudou
            if 'nome' in dados and dados['nome']:
                self.setWindowTitle(f"üìã Ficha do Paciente - {dados['nome']}")
    
    def on_validacao_dados_pessoais(self, valido):
        """Callback quando valida√ß√£o dos dados pessoais muda"""
        # Pode ser usado para ativar/desativar bot√µes de guardar
        pass

    def init_sub_historico_clinico(self):
        """OBSOLETO: Redirecionado para sistema principal"""
        # O sistema principal usa init_tab_historico() que √© o correto
        print("ÔøΩ [AVISO] init_sub_historico_clinico √© OBSOLETO - sistema principal ativo")
        
        # O widget correto j√° foi criado pelo sistema principal
        if hasattr(self, 'historico_widget') and self.historico_widget is not None:
            print("üîç [DEBUG SUB-HIST√ìRICO] Widget principal j√° existe - ignorando")
            return
            
        # Se chegou aqui, algo est√° errado - usar sistema principal
        print("ÔøΩ [ERRO] Widget n√£o existe - chamando sistema principal")
        self.init_tab_historico()
    
    def on_historico_alterado(self, novo_historico):
        """Callback quando hist√≥rico √© alterado PELO USU√ÅRIO"""
        print(f"üîç [DEBUG HIST√ìRICO] Callback altera√ß√£o: {len(novo_historico)} chars, carregando={getattr(self, '_carregando_dados', False)}")
        # CORRE√á√ÉO: S√≥ marcar como dirty se n√£o estiver carregando dados iniciais
        if not getattr(self, '_carregando_dados', False) and hasattr(self, 'paciente_data') and self.paciente_data:
            # Atualizar usando a coluna correta da base de dados
            self.paciente_data['historico'] = novo_historico
            # Marcar como alterado
            self.dirty = True
            print(f"üîç [DEBUG HIST√ìRICO] Marcado como dirty - dados atualizados")
    
    def init_sub_templates_prescricoes(self):
        """Sub-aba: Templates & Prescri√ß√µes - Usando m√≥dulo especializado"""
        try:
            # Usar lazy loading para Templates Manager
            _, _, TemplatesManagerWidget, _, _, _, _, _ = importar_modulos_especializados()
            
            # Criar widget especializado
            self.templates_widget = TemplatesManagerWidget(self.paciente_data, self)
            
            # Layout simples para integra√ß√£o
            layout = QVBoxLayout(self.sub_templates_prescricoes)
            layout.setContentsMargins(0, 0, 0, 0)
            layout.addWidget(self.templates_widget)
            
            # Conectar sinais
            self.templates_widget.template_selecionado.connect(self.on_template_selecionado)
            self.templates_widget.protocolo_adicionado.connect(self.on_protocolo_adicionado)
            self.templates_widget.template_gerado.connect(self.on_template_gerado)
            
            # Aplica√ß√£o de estilos personalizada ser√° feita pelos pr√≥prios widgets
            
            print("‚úÖ Templates Manager carregado com sucesso")
            
        except ImportError as e:
            print(f"‚ùå ERRO CR√çTICO: Templates Manager n√£o encontrado: {e}")
            # SEM FALLBACK - deve funcionar sempre
        except Exception as e:
            print(f"‚ùå ERRO no Templates Manager: {e}")
            # SEM FALLBACK - deve funcionar sempre
    
    def init_sub_centro_comunicacao(self):
        """Sub-aba: Email - Usando m√≥dulo especializado"""
        try:
            # Usar lazy loading para Comunica√ß√£o Manager
            _, _, _, ComunicacaoManagerWidget, _, _, _, _ = importar_modulos_especializados()
            
            # Criar widget especializado
            self.comunicacao_widget = ComunicacaoManagerWidget(self.paciente_data, self)
            
            # Layout simples para integra√ß√£o
            layout = QVBoxLayout(self.sub_centro_comunicacao)
            layout.setContentsMargins(0, 0, 0, 0)
            layout.addWidget(self.comunicacao_widget)
            
            # Conectar sinais
            self.comunicacao_widget.email_enviado.connect(self.on_email_enviado)
            self.comunicacao_widget.followup_agendado.connect(self.on_followup_agendado)
            self.comunicacao_widget.template_aplicado.connect(self.on_template_aplicado)
            
            # Aplica√ß√£o de estilos personalizada ser√° feita pelos pr√≥prios widgets
            
            print("‚úÖ Comunica√ß√£o Manager carregado com sucesso")
            
        except ImportError as e:
            print(f"‚ùå ERRO CR√çTICO: Comunica√ß√£o Manager n√£o encontrado: {e}")
            # SEM FALLBACK - deve funcionar sempre
        except Exception as e:
            print(f"‚ùå ERRO no Comunica√ß√£o Manager: {e}")
            # SEM FALLBACK - deve funcionar sempre
    
    def on_email_enviado(self, destinatario, assunto, corpo):
        """Callback quando email √© enviado"""
        print(f"üì§ Email enviado para: {destinatario}")
        # Aqui pode registrar no hist√≥rico, etc.
    
    def on_template_aplicado(self, nome_template):
        """Callback quando template √© aplicado"""
        print(f"üìÑ Template aplicado: {nome_template}")

    def init_sub_iris_analise(self):
        """Sub-aba: An√°lise de √çris - Carregamento otimizado"""
        try:
            # Lazy import para m√≥dulos de √≠ris
            print("üîÑ Carregando m√≥dulo de an√°lise de √≠ris...")
            from iris_canvas import IrisCanvas
            from iris_overlay_manager import IrisOverlayManager
            
            layout = QVBoxLayout(self.sub_iris_analise)
            layout.setContentsMargins(10, 10, 10, 10)
            layout.setSpacing(10)
            
            # T√≠tulo da se√ß√£o
            titulo_iris = QLabel("üëÅÔ∏è An√°lise Iridol√≥gica")
            titulo_iris.setStyleSheet("""
                QLabel {
                    font-size: 18px;
                    font-weight: bold;
                    color: #2c3e50;
                    padding: 10px;
                    background-color: #ecf0f1;
                    border-radius: 8px;
                    margin-bottom: 10px;
                }
            """)
            layout.addWidget(titulo_iris)
            
            # ‚úÖ CORRE√á√ÉO CR√çTICA: Canvas de √≠ris com verifica√ß√£o de QApplication
            try:
                from PyQt6.QtWidgets import QApplication
                app = QApplication.instance()
                if app is not None:
                    self.iris_canvas = IrisCanvas(self)
                    layout.addWidget(self.iris_canvas)
                    
                    # Manager de overlays
                    self.iris_overlay_manager = IrisOverlayManager(self.iris_canvas.scene)
                    print("‚úÖ M√≥dulo de an√°lise de √≠ris carregado com seguran√ßa")
                else:
                    print("‚ö†Ô∏è QApplication n√£o dispon√≠vel - iris ser√° carregada posteriormente")
                    # Placeholder tempor√°rio
                    placeholder = QLabel("üëÅÔ∏è Carregando m√≥dulo de √≠ris...")
                    placeholder.setAlignment(Qt.AlignmentFlag.AlignCenter)
                    placeholder.setStyleSheet("color: #6c757d; font-size: 14px; padding: 50px;")
                    layout.addWidget(placeholder)
                    self.iris_canvas = None
                    self.iris_overlay_manager = None
                    
            except Exception as iris_error:
                print(f"‚ùå Erro protegido na cria√ß√£o da iris: {iris_error}")
                # Fallback seguro
                placeholder = QLabel("‚ö†Ô∏è M√≥dulo de √≠ris temporariamente indispon√≠vel")
                placeholder.setAlignment(Qt.AlignmentFlag.AlignCenter)
                placeholder.setStyleSheet("color: #dc3545; font-size: 14px; padding: 50px;")
                layout.addWidget(placeholder)
                self.iris_canvas = None
                self.iris_overlay_manager = None
            
        except ImportError as e:
            print(f"‚ö†Ô∏è M√≥dulo de √≠ris n√£o encontrado: {e}")
            # Fallback simples
            layout = QVBoxLayout(self.sub_iris_analise)
            placeholder = QLabel("üëÅÔ∏è M√≥dulo de √çris ser√° carregado em breve...")
            placeholder.setAlignment(Qt.AlignmentFlag.AlignCenter)
            placeholder.setStyleSheet("color: #6c757d; font-size: 14px; padding: 50px;")
            layout.addWidget(placeholder)
        except Exception as e:
            print(f"‚ùå Erro ao carregar an√°lise de √≠ris: {e}")

    def init_sub_centro_comunicacao_fallback(self):
        """Sub-aba: Email - Interface limpa sem barras"""
        layout = QVBoxLayout(self.sub_centro_comunicacao)
        layout.setContentsMargins(30, 30, 30, 30)
        layout.setSpacing(20)

        # Campo Para + Bot√µes na mesma linha - EXATAMENTE como na imagem
        para_layout = QHBoxLayout()
        para_layout.setSpacing(15)
        
        lbl_para = QLabel("Para:")
        lbl_para.setStyleSheet("font-weight: bold; font-size: 14px; color: #2c3e50;")
        lbl_para.setFixedWidth(80)
        para_layout.addWidget(lbl_para)
        
        self.destinatario_edit = QLineEdit()
        self.destinatario_edit.setPlaceholderText("email@exemplo.com")
        self.destinatario_edit.setFixedHeight(45)
        self.destinatario_edit.setMinimumWidth(500)  # Aumentado de 400 para 500
        self.destinatario_edit.setMaximumWidth(600)  # Mais espa√ßo ainda
        self.destinatario_edit.setStyleSheet("""
            QLineEdit {
                padding: 12px 15px;
                border: 2px solid #e1e5e9;
                border-radius: 8px;
                font-size: 14px;
                background-color: white;
            }
            QLineEdit:focus {
                border-color: #3498db;
            }
        """)
        para_layout.addWidget(self.destinatario_edit)
        
        # ‚úÖ BOT√ïES NA LINHA "PARA" - USANDO BUTTON MANAGER CENTRALIZADO
        from ficha_paciente.core.button_manager import ButtonManager
        
        btn_followup = ButtonManager.followup_button(self, self.schedule_followup_consulta)
        btn_followup.setFixedHeight(45)
        btn_followup.setFixedWidth(120)  # TAMANHO UNIFICADO
        para_layout.addWidget(btn_followup)
        
        btn_template = ButtonManager.template_button(self, self.abrir_templates_mensagem)
        btn_template.setFixedHeight(45)
        btn_template.setFixedWidth(120)  # TAMANHO UNIFICADO
        para_layout.addWidget(btn_template)
        
        btn_listar_followups = ButtonManager.lista_followups_button(self, self.listar_followups_agendados)
        btn_listar_followups.setFixedHeight(45)
        btn_listar_followups.setFixedWidth(120)  # TAMANHO UNIFICADO
        para_layout.addWidget(btn_listar_followups)
        
        para_layout.addStretch()  # Empurra tudo para a esquerda
        layout.addLayout(para_layout)
        
        # Campo Assunto - Layout horizontal com BOT√ÉO ENVIAR CENTRADO
        assunto_layout = QHBoxLayout()
        assunto_layout.setSpacing(15)
        
        lbl_assunto = QLabel("Assunto:")
        lbl_assunto.setStyleSheet("font-weight: bold; font-size: 14px; color: #2c3e50;")
        lbl_assunto.setFixedWidth(80)
        assunto_layout.addWidget(lbl_assunto)
        
        self.assunto_edit = QLineEdit()
        self.assunto_edit.setPlaceholderText("Assunto do email")
        self.assunto_edit.setFixedHeight(45)
        self.assunto_edit.setMinimumWidth(500)  # MESMO TAMANHO que o campo "Para"
        self.assunto_edit.setMaximumWidth(600)  # MESMO TAMANHO que o campo "Para"
        self.assunto_edit.setStyleSheet("""
            QLineEdit {
                padding: 12px 15px;
                border: 2px solid #e1e5e9;
                border-radius: 8px;
                font-size: 14px;
                background-color: white;
            }
            QLineEdit:focus {
                border-color: #3498db;
            }
        """)
        assunto_layout.addWidget(self.assunto_edit)
        
        # BOT√ÉO ENVIAR - USANDO BUTTON MANAGER CENTRALIZADO
        btn_enviar_email = ButtonManager.email_button(self, self.enviar_mensagem)
        btn_enviar_email.setFixedHeight(45)
        btn_enviar_email.setFixedWidth(390)  # LARGURA AUMENTADA para 390px
        assunto_layout.addWidget(btn_enviar_email)
        
        assunto_layout.addStretch()  # Empurra tudo para a esquerda
        layout.addLayout(assunto_layout)
        
        # ‚úÖ SE√á√ÉO DE ANEXOS - Sempre presente no lado direito, alinhada com campo de texto
        self.anexos_frame = QFrame()
        self.anexos_frame.setFixedWidth(250)  # Largura adequada para coluna direita
        self.anexos_frame.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 2px solid #dee2e6;
                border-radius: 8px;
                margin: 0px;
            }
        """)
        
        anexos_layout = QVBoxLayout(self.anexos_frame)
        anexos_layout.setContentsMargins(15, 10, 15, 10)
        
        # T√≠tulo da se√ß√£o melhorado
        lbl_anexos = QLabel("üìé Anexos:")
        lbl_anexos.setStyleSheet("font-weight: bold; font-size: 14px; color: #495057; margin-bottom: 8px;")
        anexos_layout.addWidget(lbl_anexos)
        
        # Lista de anexos com altura adequada
        self.lista_anexos = QListWidget()
        self.lista_anexos.setMinimumHeight(80)
        self.lista_anexos.setMaximumHeight(120)  # Altura controlada
        self.lista_anexos.setStyleSheet("""
            QListWidget {
                background-color: white;
                border: 1px solid #ced4da;
                border-radius: 6px;
                padding: 8px;
                font-size: 12px;
            }
            QListWidgetItem {
                padding: 4px 6px;
                border-bottom: 1px solid #f8f9fa;
                color: #495057;
                border-radius: 3px;
                margin: 1px 0px;
            }
            QListWidgetItem:hover {
                background-color: #f8f9fa;
            }
        """)
        anexos_layout.addWidget(self.lista_anexos)
        
        # Texto informativo quando n√£o h√° anexos
        info_anexos = QLabel("üìé Nenhum anexo selecionado\nüí° Protocolos aparecer√£o aqui automaticamente")
        info_anexos.setStyleSheet("font-size: 11px; color: #6c757d; font-style: italic; margin-top: 5px; text-align: center;")
        info_anexos.setWordWrap(True)
        info_anexos.setAlignment(Qt.AlignmentFlag.AlignCenter)
        anexos_layout.addWidget(info_anexos)

        # Campo Mensagem + Anexos - Layout horizontal EXATO da imagem
        conteudo_layout = QHBoxLayout()
        conteudo_layout.setSpacing(15)
        
        # Coluna esquerda: Mensagem (ocupa mais espa√ßo)
        mensagem_layout = QVBoxLayout()
        
        lbl_msg = QLabel("Mensagem:")
        lbl_msg.setStyleSheet("font-weight: bold; font-size: 14px; color: #2c3e50; margin-bottom: 5px; margin-top: 15px;")
        mensagem_layout.addWidget(lbl_msg)
        
        self.mensagem_edit = QTextEdit()
        self.mensagem_edit.setPlaceholderText("Digite aqui a sua mensagem...")
        self.mensagem_edit.setMinimumHeight(300)  # Altura como na imagem
        
        self.mensagem_edit.setLineWrapMode(QTextEdit.LineWrapMode.WidgetWidth)
        self.mensagem_edit.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.mensagem_edit.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        
        self.mensagem_edit.setStyleSheet("""
            QTextEdit {
                border: 2px solid #e1e5e9;
                border-radius: 8px;
                padding: 15px;
                font-size: 14px;
                background-color: white;
                line-height: 1.5;
            }
            QTextEdit:focus {
                border-color: #3498db;
            }
            QTextEdit QScrollBar:vertical {
                background: transparent;
                width: 8px;
                border: none;
                border-radius: 4px;
                margin: 0;
            }
            QTextEdit QScrollBar::handle:vertical {
                background: rgba(0, 0, 0, 0.1);
                border-radius: 4px;
                min-height: 20px;
                margin: 2px;
            }
            QTextEdit QScrollBar::handle:vertical:hover {
                background: rgba(0, 0, 0, 0.2);
            }
            QTextEdit QScrollBar::add-line:vertical,
            QTextEdit QScrollBar::sub-line:vertical {
                border: none;
                background: none;
                height: 0px;
            }
            QTextEdit QScrollBar::add-page:vertical,
            QTextEdit QScrollBar::sub-page:vertical {
                background: none;
            }
        """)
        mensagem_layout.addWidget(self.mensagem_edit)
        
        # Coluna direita: Anexos alinhados EXATAMENTE com o campo de texto
        direita_layout = QVBoxLayout()
        
        # ‚úÖ ESPA√áO PARA ALINHAR PERFEITAMENTE: Label "Mensagem:" + margens + in√≠cio do campo
        # Calculado: font-size 14px + margin-top 15px + margin-bottom 5px + padding do campo ‚âà 50px
        direita_layout.addSpacing(50)
        
        # Se√ß√£o de anexos - SEMPRE PRESENTE mesmo sem anexos
        self.anexos_frame.show()
        direita_layout.addWidget(self.anexos_frame)
        
        # Adicionar stretch para empurrar tudo para cima
        direita_layout.addStretch()
        
        # Adicionar as duas colunas ao layout horizontal
        conteudo_layout.addLayout(mensagem_layout, 3)  # 3/4 do espa√ßo para mensagem
        conteudo_layout.addLayout(direita_layout, 1)   # 1/4 do espa√ßo para anexos
        
        # Layout principal
        layout.addLayout(conteudo_layout)
        
        # ‚úÖ BOT√ÉO CONFIG EMAIL - Canto inferior direito da sub-aba
        config_inferior_layout = QHBoxLayout()
        config_inferior_layout.addStretch()  # Empurra para a direita
        
        btn_config_inferior = ButtonManager.config_button(self, self.abrir_configuracoes_comunicacao)
        btn_config_inferior.setFixedHeight(35)
        btn_config_inferior.setFixedWidth(85)
        config_inferior_layout.addWidget(btn_config_inferior)
        
        layout.addLayout(config_inferior_layout)
        
        # ‚úÖ SEM BOT√ïES EM BAIXO - Como pedido na imagem (j√° est√£o na linha do "Para:")
        
        # Adicionar stretch no final para empurrar conte√∫do para cima
        layout.addStretch()

        # Configurar canal e carregar dados
        
        btn_enviar = ButtonManager.email_button(self, self.enviar_mensagem)
        btn_enviar.setFixedHeight(50)  # Ligeiramente maior para destaque
        btn_enviar.setFixedWidth(200)  # Ligeiramente maior
        # REMOVIDO: botoes_layout.addWidget(btn_enviar) - c√≥digo duplicado
        
        # REMOVIDO: botoes_layout.addStretch() - c√≥digo duplicado
        
        # Adicionar stretch no final para empurrar conte√∫do para cima
        layout.addStretch()

        # Configurar canal e carregar dados
        self.canal_atual = "email"
        self.carregar_dados_paciente_email()
        
        # ‚úÖ INICIALIZAR VISIBILIDADE DOS ANEXOS
        self.atualizar_visibilidade_anexos()

    def atualizar_visibilidade_anexos(self):
        """Mant√©m a se√ß√£o de anexos sempre vis√≠vel - como solicitado"""
        if hasattr(self, 'anexos_frame'):
            # ‚úÖ SEMPRE PRESENTE - Campo de anexos sempre vis√≠vel
            self.anexos_frame.show()

    def carregar_dados_paciente_email(self):
        """M√âTODO REFATORADO - usa EmailService"""
        from ficha_paciente.services import EmailService
        
        if self.paciente_data:
            # Usar EmailService para obter email formatado
            email_paciente = EmailService.formatar_destinatario(self.paciente_data) or ''
            
            if email_paciente:
                # S√≥ preencher se o campo existir (m√≥dulo de comunica√ß√£o carregado)
                if hasattr(self, 'destinatario_edit'):
                    self.destinatario_edit.setText(email_paciente)
                # Email do paciente carregado
            else:
                # Paciente n√£o tem email configurado
                pass
            
            # Carregar nome para personaliza√ß√£o - PROTEGER CONTRA None
            nome_raw = self.paciente_data.get('nome', 'Paciente')
            self.nome_paciente = nome_raw if nome_raw else 'Paciente'
            # Nome do paciente carregado
        else:
            self.nome_paciente = "Paciente"
            # Nenhum paciente carregado

    def atualizar_email_paciente_data(self):
        """M√âTODO REFATORADO - usa DataService"""
        from ficha_paciente.services import DataService
        
        novo_email = self.email_edit.text().strip()
        
        if hasattr(self, 'paciente_data') and self.paciente_data:
            # Usar DataService para atualizar dados
            self.paciente_data = DataService.atualizar_campo_paciente(
                self.paciente_data, 'email', novo_email
            )
            print(f"[EMAIL] üîÑ Email atualizado em tempo real: '{novo_email}'")
            
            # Atualizar campo de email no separador Email, se existir
            if hasattr(self, 'destinatario_edit'):
                self.destinatario_edit.setText(novo_email)
                print(f"[EMAIL] ‚úÖ Campo de destinat√°rio atualizado automaticamente")
        else:
            print(f"[EMAIL] ‚ö†Ô∏è paciente_data n√£o dispon√≠vel para atualiza√ß√£o")

    def enviar_prescricao_pdf(self):
        """Cria e envia prescri√ß√£o em PDF como anexo"""
        try:
            # Verificar se h√° dados do paciente carregados
            if not hasattr(self, 'paciente_data') or not self.paciente_data:
                BiodeskMessageBox.warning(self, "Aviso", "Selecione um paciente primeiro.")
                return
            
            # Verificar se h√° email configurado
            patient_email = self.paciente_data.get('email', '').strip()
            
            if not patient_email:
                BiodeskMessageBox.warning(self, "Aviso", "Paciente n√£o tem email configurado.\n\nPor favor, adicione um email na ficha do paciente.")
                return
            
            # Obter dados da prescri√ß√£o
            template_texto = self.template_preview.toPlainText()
            if not template_texto or "Selecione um template" in template_texto:
                BiodeskMessageBox.warning(self, "Aviso", "Selecione um template de prescri√ß√£o primeiro.")
                return
            
            # Usar sistema PDF profissional
            try:
                from pdf_template_professional import BiodeskPDFTemplate
                import tempfile
                import os
                from datetime import datetime
                
                # Criar PDF com template profissional
                pdf_generator = BiodeskPDFTemplate(self.paciente_data)
                
                # Gerar PDF tempor√°rio
                temp_dir = tempfile.gettempdir()
                pdf_filename = f"prescricao_{self.paciente_data.get('nome', 'paciente').replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
                pdf_path = os.path.join(temp_dir, pdf_filename)
                
                # Extrair conte√∫do do template para prescri√ß√£o
                nome_template = getattr(self, 'nome_template_atual', 'Template selecionado')
                categoria_template = getattr(self, 'categoria_template_atual', 'Prescri√ß√£o')
                
                conteudo_prescricao = f"""
{categoria_template} - {nome_template}

{template_texto}

Orienta√ß√µes gerais:
‚Ä¢ Seguir rigorosamente as indica√ß√µes acima
‚Ä¢ Manter acompanhamento conforme orienta√ß√£o
‚Ä¢ Em caso de d√∫vidas, contactar a cl√≠nica
‚Ä¢ Retorno conforme agendamento
                """.strip()
                
                # Gerar PDF profissional
                pdf_path = pdf_generator.gerar_prescricao(conteudo_prescricao, pdf_path)
                
                print(f"[PDF] ‚úÖ PDF profissional gerado: {pdf_path}")
                
            except Exception as e:
                print(f"[PDF] ‚ùå Erro ao gerar PDF profissional: {e}")
                # Fallback para sistema anterior
                from reportlab.pdfgen import canvas
                from reportlab.lib.pagesizes import A4
                import tempfile
                import os
                from datetime import datetime
                
                # Criar PDF tempor√°rio (sistema anterior como backup)
                temp_dir = tempfile.gettempdir()
                pdf_filename = f"prescricao_{self.paciente_data.get('nome', 'paciente').replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
                pdf_path = os.path.join(temp_dir, pdf_filename)
                
                # Gerar PDF b√°sico
                c = canvas.Canvas(pdf_path, pagesize=A4)
                width, height = A4
                
                # Cabe√ßalho
                c.setFont("Helvetica-Bold", 16)
                c.drawString(50, height - 50, "PRESCRI√á√ÉO M√âDICA")
                
                # Dados do paciente
                c.setFont("Helvetica", 12)
                y_pos = height - 100
                c.drawString(50, y_pos, f"Paciente: {self.paciente_data.get('nome', 'N/A')}")
                y_pos -= 20
                c.drawString(50, y_pos, f"Data: {datetime.now().strftime('%d/%m/%Y')}")
                y_pos -= 40
                
                # Prescri√ß√£o
                c.setFont("Helvetica-Bold", 14)
                c.drawString(50, y_pos, "PRESCRI√á√ÉO:")
                y_pos -= 30
                
                c.setFont("Helvetica", 11)
                linhas_prescricao = template_texto.split('\n')
                for linha in linhas_prescricao[:10]:  # Limitar linhas
                    if linha.strip():
                        c.drawString(70, y_pos, f"‚Ä¢ {linha[:70]}")
                        y_pos -= 20
                
                # Rodap√©
                c.setFont("Helvetica", 10)
                c.drawString(50, 50, f"Documento gerado automaticamente pelo Biodesk - {datetime.now().strftime('%d/%m/%Y %H:%M')}")
                
                c.save()
            
            # ‚úÖ USAR NOVO SISTEMA DE EMAIL PERSONALIZADO
            try:
                from email_templates_biodesk import gerar_email_personalizado
                
                # Gerar email personalizado para prescri√ß√£o
                nome_paciente = self.paciente_data.get('nome', 'Paciente')
                
                # Conte√∫do espec√≠fico para prescri√ß√£o
                conteudo_prescricao = f"""Segue em anexo sua prescri√ß√£o m√©dica conforme an√°lise realizada.

üìã Template aplicado: {nome_template}
üìÇ Categoria: {categoria_template}

Por favor, siga todas as orienta√ß√µes descritas no documento anexo.

Em caso de d√∫vidas sobre a prescri√ß√£o, n√£o hesite em contactar-me."""
                
                email_personalizado = gerar_email_personalizado(
                    nome_paciente=nome_paciente,
                    templates_anexados=[nome_template],
                    tipo_comunicacao="prescricao"
                )
                
                # Usar email personalizado
                assunto = email_personalizado['assunto']
                corpo = email_personalizado['corpo']
                
                print(f"[PDF] ‚úÖ Email personalizado gerado para prescri√ß√£o")
                
            except ImportError:
                # Fallback para email simples se sistema personalizado n√£o dispon√≠vel
                print(f"[PDF] ‚ö†Ô∏è Sistema personalizado n√£o dispon√≠vel, usando email padr√£o")
                
                assunto = f"Prescri√ß√£o - {self.paciente_data.get('nome', 'Paciente')}"
                corpo = f"""Prezado(a) {self.paciente_data.get('nome', 'Paciente')},

Segue em anexo sua prescri√ß√£o m√©dica conforme an√°lise realizada.

Por favor, siga todas as orienta√ß√µes descritas no documento.

Atenciosamente,
Equipe M√©dica"""
            
            # Preencher campos da interface
            self.destinatario_edit.setText(patient_email)
            self.assunto_edit.setText(assunto)
            self.mensagem_edit.setPlainText(corpo)
            
            # Criar sender de email
            from email_sender import EmailSender
            
            email_sender = EmailSender()
            
            # Enviar email com anexo
            sucesso, mensagem = email_sender.send_email_with_attachment(
                to_email=patient_email,
                subject=assunto,
                body=corpo,
                attachment_path=pdf_path,
                nome_destinatario=self.paciente_data.get('nome', 'Paciente')
            )
            
            if sucesso:
                BiodeskMessageBox.information(self, "Sucesso", "‚úÖ Prescri√ß√£o enviada com sucesso!\n\nO PDF profissional foi enviado para o email do paciente.")
                
                # Mostrar PDF gerado no visualizador integrado
                self.mostrar_pdf_gerado(pdf_path)
                
                # Limpar arquivo tempor√°rio ap√≥s delay
                import threading
                def cleanup():
                    import time
                    time.sleep(10)  # Aguardar 10 segundos para visualiza√ß√£o
                    try:
                        if os.path.exists(pdf_path):
                            os.remove(pdf_path)
                    except:
                        pass
                
                threading.Thread(target=cleanup, daemon=True).start()
            else:
                QMessageBox.critical(
            self,
            "Erro",
            f"‚ùå Erro ao enviar prescri√ß√£o:\n\n{mensagem}"
        )
                
        except ImportError:
            QMessageBox.warning(
            self,
            "Depend√™ncia",
            "üì¶ Biblioteca reportlab n√£o encontrada.\n\n‚ñ∂Ô∏è Instale com: pip install reportlab"
        )
        except Exception as e:
            BiodeskMessageBox.critical(self, "Erro", f"‚ùå Erro inesperado ao enviar prescri√ß√£o:\n\n{str(e)}")
            print(f"[ERRO] Erro ao enviar prescri√ß√£o: {e}")

    def _lighten_color(self, hex_color, percent):
        """Clarifica uma cor hexadecimal - wrapper para services.styles"""
        from services.styles import lighten_color
        return lighten_color(hex_color, percent)
    
    def _darken_color(self, hex_color, percent):
        """Escurece uma cor hexadecimal - wrapper para services.styles"""
        from services.styles import darken_color
        return darken_color(hex_color, percent)

    def selecionar_canal(self, canal):
        """M√©todo mantido para compatibilidade - email j√° est√° sempre selecionado"""
        self.canal_atual = "email"
        
        # Preencher automaticamente com dados do paciente
        if self.paciente_data and self.paciente_data.get('email'):
            self.destinatario_edit.setText(self.paciente_data['email'])

    def abrir_templates_mensagem(self):
        """Abre di√°logo para selecionar template de mensagem com sistema personalizado"""
        try:
            from PyQt6.QtWidgets import QDialog, QVBoxLayout, QHBoxLayout, QListWidget, QTextEdit, QPushButton, QLabel, QListWidgetItem, QMessageBox
            from PyQt6.QtCore import Qt
            from biodesk_dialogs import BiodeskDialog
            
            # Obter nome do paciente
            nome_paciente = getattr(self, 'nome_paciente', self.paciente_data.get('nome', 'Paciente') if self.paciente_data else 'Paciente')
            
            # ‚úÖ NOVOS TEMPLATES COM SISTEMA PERSONALIZADO
            templates_base = {
                "üìß Envio de Prescri√ß√£o": f"Segue em anexo a sua prescri√ß√£o m√©dica personalizada conforme nossa consulta realizada.\n\nPor favor, siga rigorosamente as orienta√ß√µes descritas no documento.\n\nPara qualquer esclarecimento adicional, estou √† inteira disposi√ß√£o.",
                
                "üîÑ Consulta de Seguimento": f"Espero que esteja bem e seguindo as recomenda√ß√µes prescritas.\n\nGostaria de agendar uma consulta de seguimento para avaliar o seu progresso e ajustar o tratamento se necess√°rio.\n\nAguardo o seu contacto para marcarmos a pr√≥xima consulta.",
                
                "üìã Resultados de An√°lise": f"Os resultados da sua an√°lise iridol√≥gica j√° est√£o dispon√≠veis.\n\nGostaria de agendar uma consulta para discutir detalhadamente os achados e definir o plano terap√™utico mais adequado.\n\nFico √† disposi√ß√£o para esclarecimentos.",
                
                "‚è∞ Lembrete de Consulta": f"Este √© um lembrete da sua consulta marcada para [DATA] √†s [HORA].\n\nSolicitamos que chegue 10 minutos antes do hor√°rio agendado.\n\nCaso necessite remarcar, contacte-nos com anteced√™ncia.",
                
                "üôè Agradecimento": f"Gostaria de expressar o meu sincero agradecimento pela confian√ßa depositada nos nossos servi√ßos de medicina integrativa.\n\nFoi um prazer acompanh√°-lo/a no seu processo de bem-estar e sa√∫de.\n\nEstamos sempre √† disposi√ß√£o para futuros acompanhamentos.",
                
                "üíå Template Personalizado Completo": "EXEMPLO: Este template ser√° automaticamente personalizado com sauda√ß√£o, redes sociais e assinatura profissional."
            }
            
            # Usar di√°logo estilizado do Biodesk
            dialog = BiodeskDialog(self)
            dialog.setWindowTitle("üìù Templates de Email Personalizados")
            dialog.setFixedSize(1000, 800)  # AUMENTADO: era 900x700, agora 1000x800
            
            layout = QVBoxLayout(dialog)
            layout.setSpacing(15)
            layout.setContentsMargins(20, 20, 20, 20)
            
            # T√≠tulo com informa√ß√£o sobre personaliza√ß√£o
            titulo = QLabel("‚ú® Templates com Personaliza√ß√£o Autom√°tica")
            titulo.setStyleSheet("""
                QLabel {
                    font-size: 18px;
                    font-weight: 700;
                    color: #9C27B0;
                    padding: 15px;
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                        stop:0 #f8f9fa, stop:0.5 #E1BEE7, stop:1 #f8f9fa);
                    border: 2px solid #9C27B0;
                    border-radius: 10px;
                    margin-bottom: 10px;
                }
            """)
            titulo.setAlignment(Qt.AlignmentFlag.AlignCenter)
            layout.addWidget(titulo)
            
            # Info sobre personaliza√ß√£o autom√°tica
            info_label = QLabel("üîß Cada template ser√° automaticamente personalizado com:\n‚Ä¢ Sauda√ß√£o baseada na hora\n‚Ä¢ Nome do paciente\n‚Ä¢ Redes sociais (Instagram/Facebook)\n‚Ä¢ Assinatura profissional")
            info_label.setStyleSheet("""
                QLabel {
                    background-color: #d1ecf1;
                    color: #0c5460;
                    padding: 10px;
                    border-radius: 6px;
                    border: 1px solid #bee5eb;
                    font-size: 12px;
                }
            """)
            layout.addWidget(info_label)
            
            # Layout horizontal para lista e preview
            horizontal_layout = QHBoxLayout()
            
            # Lista de templates
            lista_frame = QLabel("üìù Templates Dispon√≠veis:")
            lista_frame.setStyleSheet("font-weight: bold; color: #6c757d; margin-bottom: 5px;")
            layout.addWidget(lista_frame)
            
            self.lista_templates = QListWidget()
            self.lista_templates.setFixedWidth(300)
            self.lista_templates.setStyleSheet("""
                QListWidget {
                    border: 2px solid #9C27B0;
                    border-radius: 8px;
                    background-color: #ffffff;
                    font-size: 12px;
                    padding: 5px;
                }
                QListWidget::item {
                    padding: 12px;
                    border-bottom: 1px solid #e9ecef;
                    border-radius: 4px;
                    margin: 2px;
                }
                QListWidget::item:hover {
                    background-color: #E1BEE7;
                    color: #9C27B0;
                }
                QListWidget::item:selected {
                    background-color: #9C27B0;
                    color: white;
                }
            """)
            
            for nome_template in templates_base.keys():
                item = QListWidgetItem(nome_template)
                self.lista_templates.addItem(item)
            
            # Preview do template PERSONALIZADO
            preview_frame = QVBoxLayout()
            preview_label = QLabel("üëÅÔ∏è Preview com Personaliza√ß√£o Completa:")
            preview_label.setStyleSheet("font-weight: bold; color: #6c757d; margin-bottom: 5px;")
            preview_frame.addWidget(preview_label)
            
            preview_text = QTextEdit()
            preview_text.setReadOnly(True)
            preview_text.setMinimumHeight(400)
            preview_text.setStyleSheet("""
                QTextEdit {
                    border: 2px solid #9C27B0;
                    border-radius: 8px;
                    background-color: #fefefe;
                    font-family: 'Times New Roman', serif;
                    font-size: 11px;
                    padding: 15px;
                    line-height: 1.4;
                }
            """)
            preview_frame.addWidget(preview_text)
            
            horizontal_layout.addWidget(self.lista_templates)
            horizontal_layout.addLayout(preview_frame)
            layout.addLayout(horizontal_layout)
            
            # ‚úÖ ATUALIZAR PREVIEW COM SISTEMA PERSONALIZADO
            def atualizar_preview():
                item_atual = self.lista_templates.currentItem()
                if item_atual:
                    nome = item_atual.text()
                    conteudo_base = templates_base[nome]
                    
                    # Se √© o template de exemplo, mostrar preview completo
                    if "Template Personalizado Completo" in nome:
                        try:
                            from email_templates_biodesk import gerar_email_personalizado
                            
                            # Gerar preview personalizado de exemplo
                            exemplo_personalizado = gerar_email_personalizado(
                                nome_paciente=nome_paciente,
                                templates_anexados=["Template de Exemplo"],  # ‚úÖ Par√¢metro correto
                                tipo_comunicacao="templates"  # ‚úÖ Par√¢metro correto
                            )
                            
                            preview_text.setPlainText(f"ASSUNTO: {exemplo_personalizado['assunto']}\n\n{exemplo_personalizado['corpo']}")
                            
                        except ImportError:
                            preview_text.setPlainText("Sistema de personaliza√ß√£o n√£o dispon√≠vel - usando template b√°sico.")
                    else:
                        # Para outros templates, mostrar como ficar√° personalizado
                        try:
                            from email_templates_biodesk import gerar_email_personalizado
                            
                            preview_personalizado = gerar_email_personalizado(
                                nome_paciente=nome_paciente,
                                templates_anexados=[nome],  # ‚úÖ Usar nome do template em vez de path
                                tipo_comunicacao="templates"  # ‚úÖ Par√¢metro correto
                            )
                            
                            preview_text.setPlainText(f"ASSUNTO: {preview_personalizado['assunto']}\n\n{preview_personalizado['corpo']}")
                            
                        except ImportError:
                            # Fallback simples se sistema n√£o dispon√≠vel
                            preview_text.setPlainText(f"Exm./a Sr./a {nome_paciente},\n\n{conteudo_base}\n\nCom os melhores cumprimentos,\nDr. Nuno Correia")
            
            self.lista_templates.itemSelectionChanged.connect(atualizar_preview)
            
            # Bot√µes
            botoes_layout = QHBoxLayout()
            botoes_layout.setSpacing(15)
            
            btn_cancelar = ButtonManager.cancelar_button(dialog, dialog.reject)
            btn_cancelar.setFixedHeight(40)
            
            btn_usar = ButtonManager.template_personalizado_button(dialog, None)  # callback ser√° definido abaixo
            btn_usar.setFixedHeight(40)

            # ‚úÖ FUN√á√ÉO PARA USAR TEMPLATE PERSONALIZADO
            def usar_template():
                item_atual = self.lista_templates.currentItem()
                if item_atual:
                    nome = item_atual.text()
                    conteudo_base = templates_base[nome]
                    
                    # Se √© template de exemplo, usar conteudo gen√©rico
                    if "Template Personalizado Completo" in nome:
                        conteudo_base = "Espero que esteja bem. Este email foi gerado automaticamente com personaliza√ß√£o completa."
                    
                    # Aplicar personaliza√ß√£o autom√°tica
                    try:
                        from email_templates_biodesk import gerar_email_personalizado
                        
                        # Gerar email personalizado completo (corrigir par√¢metros)
                        email_personalizado = gerar_email_personalizado(
                            nome_paciente=nome_paciente,
                            templates_anexados=[template_nome],
                            tipo_comunicacao="templates"
                        )
                        
                        # Aplicar aos campos da interface
                        self.assunto_edit.setText(email_personalizado['assunto'])
                        self.mensagem_edit.setPlainText(email_personalizado['corpo'])
                        
                        print(f"‚úÖ [TEMPLATES] Template personalizado aplicado: {nome}")
                        
                    except ImportError:
                        # Fallback simples
                        self.mensagem_edit.setPlainText(f"Exm./a Sr./a {nome_paciente},\n\n{conteudo_base}\n\nCom os melhores cumprimentos,\nDr. Nuno Correia")
                        print(f"‚ö†Ô∏è [TEMPLATES] Sistema personalizado indispon√≠vel, usando template simples")
                    
                    dialog.accept()
                else:
                    QMessageBox.warning(
            dialog,
            "Aviso",
            "Selecione um template primeiro."
        )
            
            btn_usar.clicked.connect(usar_template)
            
            botoes_layout.addStretch()
            botoes_layout.addWidget(btn_cancelar)
            botoes_layout.addWidget(btn_usar)
            layout.addLayout(botoes_layout)
            
            # Selecionar primeiro item por padr√£o
            if self.lista_templates.count() > 0:
                self.lista_templates.setCurrentRow(0)
                atualizar_preview()
            
            dialog.exec()
            
        except Exception as e:
            from PyQt6.QtWidgets import QMessageBox
            BiodeskMessageBox.warning(self, "Erro", f"Erro ao abrir templates: {str(e)}")
            print(f"‚ùå [TEMPLATES] Erro: {e}")

    def selecionar_pdf_e_mostrar_visualizador(self, template_data):
        """Seleciona PDF, mostra no canvas E adiciona √† lista de protocolos selecionados"""
        try:
            import os
            from datetime import datetime
            from PyQt6.QtCore import QUrl
            
            nome_protocolo = template_data.get('nome', 'Sem nome')
            print(f"üìÑ [PDF INTEGRADO] Selecionado: {nome_protocolo}")
            
            # ADICIONAR √Ä LISTA DE PROTOCOLOS SELECIONADOS
            if template_data not in self.protocolos_selecionados:
                self.protocolos_selecionados.append(template_data)
                self.atualizar_lista_protocolos()
                print(f"‚úÖ [PROTOCOLOS] Adicionado √† sele√ß√£o: {nome_protocolo}")
            else:
                print(f"‚ÑπÔ∏è [PROTOCOLOS] J√° selecionado: {nome_protocolo}")
            
            pdf_path = template_data.get('arquivo')
            
            # Abrir PDF externamente para evitar janela que pisca
            if pdf_path and os.path.exists(pdf_path):
                try:
                    # Mostrar texto extra√≠do do PDF no preview
                    self.mostrar_pdf_como_texto_integrado(template_data)
                    print(f"üìÑ [PDF] Preview de texto carregado: {template_data.get('nome')}")
                except Exception as e:
                    print(f"‚ö†Ô∏è [PDF] Erro ao extrair texto: {e}")
                    traceback.print_exc()
                    # Fallback para texto
                    self.mostrar_pdf_como_texto_integrado(template_data)
            else:
                print(f"‚ùå [PDF INTEGRADO] Arquivo n√£o encontrado: {pdf_path}")
                self.mostrar_erro_pdf_integrado(template_data, "Arquivo PDF n√£o encontrado")
            
            # Guardar template selecionado
            self.template_selecionado = template_data
                
        except Exception as e:
            print(f"‚ùå [PDF INTEGRADO] Erro geral: {e}")
            self.mostrar_erro_pdf_integrado(template_data, str(e))
            import traceback
            traceback.print_exc()
    
    def atualizar_lista_protocolos(self):
        """Atualiza a visualiza√ß√£o da lista de protocolos selecionados"""
        if not self.protocolos_selecionados:
            self.lista_protocolos.setText("Nenhum protocolo selecionado")
            return
        
        # Criar lista formatada
        lista_texto = []
        for i, protocolo in enumerate(self.protocolos_selecionados, 1):
            nome = protocolo.get('nome', 'Sem nome')
            categoria = protocolo.get('categoria', 'N/A')
            lista_texto.append(f"{i}. {nome}")
        
        texto_final = "\n".join(lista_texto)
        if len(self.protocolos_selecionados) > 1:
            texto_final += f"\n\nüìä Total: {len(self.protocolos_selecionados)} protocolos"
        
        self.lista_protocolos.setText(texto_final)
        print(f"üìã [PROTOCOLOS] Lista atualizada: {len(self.protocolos_selecionados)} itens")
    
    def limpar_protocolos_selecionados(self):
        """Limpa a lista de protocolos selecionados"""
        self.protocolos_selecionados.clear()
        self.atualizar_lista_protocolos()
        print("üóëÔ∏è [PROTOCOLOS] Lista de protocolos limpa")
    
    def enviar_protocolos_direto(self):
        """NOVO: Envio direto dos protocolos PDF selecionados sem convers√£o"""
        try:
            print("üöÄ [ENVIO DIRETO] Iniciando envio dos protocolos selecionados...")
            
            if not self.protocolos_selecionados:
                from biodesk_dialogs import mostrar_aviso
                mostrar_aviso(self, "Aviso", "Selecione pelo menos um protocolo antes de enviar!")
                return
            
            # Verificar dados do paciente
            if not self.paciente_data or not self.paciente_data.get('email'):
                from biodesk_dialogs import mostrar_aviso
                mostrar_aviso(self, "Aviso", "Paciente n√£o tem email cadastrado!")
                return
            
            nome_paciente = self.paciente_data.get('nome', 'Paciente')
            email_paciente = self.paciente_data.get('email')
            
            print(f"üìß [ENVIO DIRETO] Destinat√°rio: {nome_paciente} - {email_paciente}")
            print(f"üìã [ENVIO DIRETO] Protocolos: {len(self.protocolos_selecionados)} itens")
            
            # Preparar lista de anexos
            anexos = []
            nomes_protocolos = []
            
            for protocolo in self.protocolos_selecionados:
                arquivo_pdf = protocolo.get('arquivo')
                if arquivo_pdf and os.path.exists(arquivo_pdf):
                    anexos.append(arquivo_pdf)
                    nomes_protocolos.append(protocolo.get('nome', 'Protocolo'))
                    print(f"üìé [ANEXO] {protocolo.get('nome')} - {arquivo_pdf}")
                else:
                    print(f"‚ùå [ANEXO PERDIDO] {protocolo.get('nome')} - arquivo n√£o encontrado: {arquivo_pdf}")
            
            if not anexos:
                from biodesk_dialogs import mostrar_erro
                mostrar_erro(self, "Erro", "Nenhum arquivo PDF v√°lido encontrado!")
                return
            
            # Criar email personalizado
            lista_protocolos = "\n".join([f"‚Ä¢ {nome}" for nome in nomes_protocolos])
            
            assunto = f"Protocolos Terap√™uticos - {nome_paciente}"
            corpo = f"""Exm./a Sr./a {nome_paciente},

Espero que se encontre bem.

Conforme combinado na consulta, anexo os seguintes protocolos terap√™uticos personalizados:

{lista_protocolos}

Estes protocolos foram cuidadosamente selecionados tendo em conta o seu perfil espec√≠fico e objetivos de sa√∫de.

Por favor, leia atentamente as orienta√ß√µes e n√£o hesite em contactar-me caso tenha alguma d√∫vida.

Com os melhores cumprimentos,

Dr. Nuno Correia
Naturopata | Osteopata | Medicina Qu√¢ntica
üìß Email: [seu email]
üì± Contacto: [seu contacto]"""

            # Aplicar ao interface de email
            self.assunto_edit.setText(assunto)
            self.mensagem_edit.setPlainText(corpo)
            
            # ‚úÖ ATUALIZAR LISTA DE ANEXOS VISUALMENTE
            if hasattr(self, 'lista_anexos'):
                self.lista_anexos.clear()
                for i, protocolo in enumerate(nomes_protocolos, 1):
                    item_texto = f"üìÑ {i}. {protocolo}"
                    self.lista_anexos.addItem(item_texto)
            
            # ‚úÖ ATUALIZAR VISIBILIDADE DA SE√á√ÉO DE ANEXOS
            self.atualizar_visibilidade_anexos()
            
            # Simular envio (aqui integraria com sistema real de email)
            print(f"‚úÖ [ENVIO DIRETO] Email preparado com {len(anexos)} anexos")
            print(f"üìß [ENVIO DIRETO] Assunto: {assunto}")
            
            # Registar no hist√≥rico
            from datetime import datetime
            historico_entry = {
                'data': datetime.now().strftime('%d/%m/%Y %H:%M'),
                'paciente': nome_paciente,
                'email': email_paciente,
                'tipo': 'protocolos_direto',
                'protocolos': nomes_protocolos,
                'status': 'preparado'
            }
            
            # Feedback visual - ESTILO BIODESK
            from biodesk_dialogs import mostrar_informacao
            mostrar_informacao(self, "Sucesso", 
                             f"Email preparado com sucesso!\n\n" +
                             f"Destinat√°rio: {nome_paciente}\n" +
                             f"Protocolos: {len(anexos)} anexos\n\n" +
                             f"Use a aba 'Email' para revisar e enviar.",
                             tipo="sucesso")
            
            print("üéØ [ENVIO DIRETO] Processo conclu√≠do - email preparado para envio")
            
        except Exception as e:
            print(f"‚ùå [ENVIO DIRETO] Erro: {e}")
            import traceback
            traceback.print_exc()
            from biodesk_dialogs import mostrar_erro
            mostrar_erro(self, "Erro", f"Erro no envio direto: {str(e)}")
    
    def mostrar_pdf_como_texto_integrado(self, template_data):
        """Mostra PDF como texto extra√≠do no preview integrado"""
        try:
            import os
            from datetime import datetime
            
            nome_paciente = self.paciente_data.get('nome', 'N/A') if self.paciente_data else 'N/A'
            data_atual = datetime.now().strftime('%d/%m/%Y')
            pdf_path = template_data.get('arquivo')
            conteudo_pdf = ""
            
            if pdf_path and os.path.exists(pdf_path):
                try:
                    # Extrair texto do PDF
                    import PyPDF2
                    with open(pdf_path, 'rb') as file:
                        pdf_reader = PyPDF2.PdfReader(file)
                        conteudo_pdf = ""
                        for page_num, page in enumerate(pdf_reader.pages[:3]):  # Primeiras 3 p√°ginas
                            conteudo_pdf += f"\n--- P√ÅGINA {page_num + 1} ---\n"
                            conteudo_pdf += page.extract_text()
                            conteudo_pdf += "\n"
                        
                        if len(pdf_reader.pages) > 3:
                            conteudo_pdf += f"\n... (mais {len(pdf_reader.pages) - 3} p√°ginas no documento completo) ..."
                            
                except Exception as e:
                    conteudo_pdf = f"‚ùå Erro ao ler PDF: {str(e)}\n\nPDF existe mas conte√∫do n√£o pode ser extra√≠do automaticamente."
            else:
                conteudo_pdf = "‚ùå Arquivo PDF n√£o encontrado."
            
            # PREVIEW INTEGRADO COM CONTE√öDO DO PDF
            info_integrada = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    ü©∫ DOCUMENTO PDF - CONTE√öDO EXTRA√çDO                    ‚ïë
‚ïë                            Dr. Nuno Correia                                 ‚ïë
‚ïë                         Medicina Integrativa                                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã PACIENTE: {nome_paciente}
üìÖ DATA: {data_atual}

üìÑ DOCUMENTO: {template_data['nome'].upper()}
üìÅ Categoria: {template_data.get('categoria', 'N/A').title()}
üìè Tamanho: {template_data.get('tamanho', 'N/A')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìñ CONTE√öDO DO PDF (INTEGRADO - SEM JANELAS SEPARADAS):
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

{conteudo_pdf}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìß EMAIL PERSONALIZADO PRONTO:
‚Ä¢ Sauda√ß√£o personalizada baseada na hora
‚Ä¢ Nome do paciente: {nome_paciente}
‚Ä¢ Redes sociais: @nunocorreia.naturopata (Instagram)
‚Ä¢ Redes sociais: @NunoCorreiaTerapiasNaturais (Facebook)
‚Ä¢ Assinatura profissional completa

üéØ PR√ìXIMO PASSO:
   Clique "üöÄ Enviar e Registar" para enviar este PDF ao paciente
   com email personalizado e registar no hist√≥rico.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
            üîó PDF TOTALMENTE INTEGRADO NO CANVAS (SEM JANELAS EXTERNAS)
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""
            
            # ‚úÖ MOSTRAR PRIMEIRO o texto extra√≠do
            self.template_preview.setPlainText(info_integrada)
            self.preview_stack.setCurrentIndex(0)  # Mostrar texto primeiro
            
            # ‚úÖ CONFIGURAR o bot√£o PDF externo
            if pdf_path and os.path.exists(pdf_path):
                self._ultimo_pdf_gerado = pdf_path
                
                # Ativar bot√£o principal no preview
                if hasattr(self, 'btn_pdf_preview'):
                    self.btn_pdf_preview.setEnabled(True)
                    self.btn_pdf_preview.setVisible(True)
                    self.btn_pdf_preview.setText(f"üîç Abrir: {os.path.basename(pdf_path)}")
                
                # Ativar bot√£o no widget PDF externo (se existir)
                if hasattr(self, 'btn_abrir_pdf_externo'):
                    self.btn_abrir_pdf_externo.setEnabled(True)
                    self.btn_abrir_pdf_externo.setText(f"üîç Ver PDF Completo: {os.path.basename(pdf_path)}")
                    
                    # ‚úÖ ADICIONAR bot√£o ao preview de texto para acesso r√°pido
                    texto_com_botao = info_integrada + f"""

üîó A√á√ÉO DISPON√çVEL:
   üìÑ Use o bot√£o "üîç Abrir PDF Completo" abaixo para ver
   o documento com formata√ß√£o original no visualizador externo.
   
   üìÅ Arquivo: {os.path.basename(pdf_path)}
"""
                    self.template_preview.setPlainText(texto_com_botao)
            else:
                # Desativar bot√£o se n√£o h√° PDF
                if hasattr(self, 'btn_pdf_preview'):
                    self.btn_pdf_preview.setEnabled(False)
                    self.btn_pdf_preview.setVisible(False)
            
            print(f"‚úÖ [PDF INTEGRADO] Texto + bot√£o configurados: {template_data.get('nome')}")
            
        except Exception as e:
            self.mostrar_erro_pdf_integrado(template_data, str(e))
    
    def mostrar_erro_pdf_integrado(self, template_data, erro):
        """Mostra erro no preview integrado"""
        nome_paciente = self.paciente_data.get('nome', 'N/A') if self.paciente_data else 'N/A'
        
        info_erro = f"""
üìÑ PDF SELECIONADO: {template_data.get('nome', 'Sem nome')}

‚ùå Erro: {erro}

üìã INFORMA√á√ïES:
‚Ä¢ Paciente: {nome_paciente}
‚Ä¢ Categoria: {template_data.get('categoria', 'N/A').title()}
‚Ä¢ Tamanho: {template_data.get('tamanho', 'N/A')}

üí° O PDF existe mas n√£o pode ser visualizado diretamente no canvas.
   Use "üöÄ Enviar e Registar" para processar e enviar ao paciente.

üìß Email personalizado ser√° enviado normalmente com o PDF anexo:
   ‚Ä¢ Com redes sociais integradas
   ‚Ä¢ Assinatura profissional
   ‚Ä¢ Conte√∫do personalizado
"""
        self.template_preview.setPlainText(info_erro)
        self.preview_stack.setCurrentIndex(0)  # Mostrar texto
        self.template_selecionado = template_data

    def usar_template_dialog(self):
        """Abre di√°logo para usar templates predefinidos - REFATORADO"""
        try:
            from ficha_paciente.dialogs.template_dialog import TemplateDialog
            
            def aplicar_template(template_texto):
                """Callback para aplicar o template selecionado"""
                if hasattr(self, 'mensagem_edit'):
                    self.mensagem_edit.setPlainText(template_texto)
            
            # Abrir di√°logo usando a nova classe extra√≠da
            TemplateDialog.abrir_dialog(callback=aplicar_template, parent=self)
            
        except Exception as e:
            from PyQt6.QtWidgets import QMessageBox
            BiodeskMessageBox.warning(self, "Erro", f"Erro ao abrir templates: {str(e)}")
            print(f"[TEMPLATE] ‚ùå Erro: {e}")

    def enviar_mensagem(self):
        """M√âTODO REFATORADO - usa ValidationService"""
        from ficha_paciente.services import ValidationService
        
        if not self.canal_atual or self.canal_atual != "email":
            from biodesk_dialogs import mostrar_aviso
            mostrar_aviso(self, "Canal n√£o dispon√≠vel", "Apenas o canal de email est√° dispon√≠vel.")
            return
        
        destinatario = self.destinatario_edit.text()
        mensagem = self.mensagem_edit.toPlainText()
        assunto = self.assunto_edit.text() or "Mensagem do Biodesk"
        
        # Usar ValidationService para validar campos
        valido, erros = ValidationService.validar_campos_email(destinatario, assunto, mensagem)
        if not valido:
            from biodesk_dialogs import mostrar_aviso
            mostrar_aviso(self, "Campos inv√°lidos", "\n".join(erros))
            return
        
        # Obter nome do paciente atual
        nome_paciente = self.paciente_data.get('nome', 'Paciente') if self.paciente_data else 'Paciente'
        
        try:
            # ‚úÖ USAR NOVO SISTEMA DE EMAIL PERSONALIZADO
            from email_templates_biodesk import gerar_email_personalizado
            
            # Preparar lista dos protocolos selecionados (se houver)
            protocolos_anexados = []
            if hasattr(self, 'protocolos_selecionados') and self.protocolos_selecionados:
                protocolos_anexados = [p.get('nome', 'Protocolo') for p in self.protocolos_selecionados]
            
            # Gerar email personalizado com redes sociais
            email_personalizado = gerar_email_personalizado(
                nome_paciente=nome_paciente,
                templates_anexados=protocolos_anexados,
                tipo_comunicacao="mensagem"
            )
            
            # Usar o novo sistema de email
            from email_sender import EmailSender
            from email_config import EmailConfig
            
            config = EmailConfig()
            if not config.is_configured():
                from biodesk_dialogs import mostrar_aviso
                mostrar_aviso(self, "Email n√£o configurado", 
                             "Configure o email nas configura√ß√µes primeiro.")
                return
            
            email_sender = EmailSender()
            
            # Preparar anexos se houver protocolos selecionados
            import os
            anexos = []
                
            if hasattr(self, 'protocolos_selecionados') and self.protocolos_selecionados:
                for protocolo in self.protocolos_selecionados:
                    arquivo_pdf = protocolo.get('arquivo')
                    if arquivo_pdf and os.path.exists(arquivo_pdf):
                        anexos.append(arquivo_pdf)
            
            # Enviar com email personalizado E ANEXOS (se houver)
            if anexos:
                success, error_msg = email_sender.send_email_with_attachments(
                    destinatario, 
                    email_personalizado['assunto'], 
                    email_personalizado['corpo'],
                    anexos
                )
            else:
                # Enviar sem anexos se n√£o houver protocolos
                success, error_msg = email_sender.send_email(
                    destinatario, 
                    email_personalizado['assunto'], 
                    email_personalizado['corpo']
                )
            
            # Mostrar resultado
            if success:
                # Limpar campos apenas se enviou com sucesso
                self.mensagem_edit.clear()
                self.assunto_edit.clear()
                
                from biodesk_dialogs import mostrar_informacao
                mostrar_informacao(self, "‚úÖ Email Enviado", 
                                 f"Email personalizado enviado para {destinatario} com sucesso!\n\n"
                                 f"‚úÖ Sauda√ß√£o personalizada inclu√≠da\n"
                                 f"‚úÖ Redes sociais inclu√≠das\n"
                                 f"‚úÖ Assinatura profissional aplicada")
                print(f"[COMUNICA√á√ÉO] ‚úÖ EMAIL PERSONALIZADO enviado para {destinatario}")
            else:
                from biodesk_dialogs import mostrar_erro
                mostrar_erro(self, "‚ùå Erro no Envio", 
                           f"Falha ao enviar email:\n\n{error_msg}")
                print(f"[COMUNICA√á√ÉO] ‚ùå Erro EMAIL: {error_msg}")
                
        except ImportError:
            print("[COMUNICA√á√ÉO] ‚ö†Ô∏è Sistema personalizado n√£o dispon√≠vel, usando sistema padr√£o")
            # Fallback para sistema anterior se o novo n√£o estiver dispon√≠vel
            try:
                from email_sender import EmailSender
                from email_config import EmailConfig
                
                config = EmailConfig()
                if not config.is_configured():
                    from biodesk_dialogs import mostrar_aviso
                    mostrar_aviso(self, "Email n√£o configurado", 
                                 "Configure o email nas configura√ß√µes primeiro.")
                    return
                
                email_sender = EmailSender()
                success, error_msg = email_sender.send_email(destinatario, assunto, mensagem)
                
                if success:
                    self.mensagem_edit.clear()
                    self.assunto_edit.clear()
                    
                    from biodesk_dialogs import mostrar_informacao
                    mostrar_informacao(self, "‚úÖ Email Enviado", 
                                     f"Email enviado para {destinatario} com sucesso!")
                    print(f"[COMUNICA√á√ÉO] ‚úÖ EMAIL (padr√£o) enviado para {destinatario}")
                else:
                    from biodesk_dialogs import mostrar_erro
                    mostrar_erro(self, "‚ùå Erro no Envio", 
                               f"Falha ao enviar email:\n\n{error_msg}")
                    print(f"[COMUNICA√á√ÉO] ‚ùå Erro EMAIL: {error_msg}")
                    
            except Exception as e:
                from biodesk_dialogs import mostrar_erro
                mostrar_erro(self, "‚ùå Erro do Sistema", 
                           f"Erro no sistema de email:\n\n{str(e)}")
                print(f"[COMUNICA√á√ÉO] ‚ùå Erro sistema EMAIL: {e}")
        except Exception as e:
            from biodesk_dialogs import mostrar_erro
            mostrar_erro(self, "‚ùå Erro do Sistema", 
                       f"Erro no sistema de email:\n\n{str(e)}")
            print(f"[COMUNICA√á√ÉO] ‚ùå Erro sistema EMAIL: {e}")

    def abrir_configuracoes_comunicacao(self):
        """Abre a janela de configura√ß√µes de email"""
        try:
            from email_config_window import EmailConfigWindow
            
            # Criar e mostrar janela de configura√ß√£o de email
            self.config_window = EmailConfigWindow()
            self.config_window.show()
            
            print("[COMUNICA√á√ÉO] ‚öôÔ∏è Janela de configura√ß√µes de email aberta")
            
        except ImportError as e:
            from biodesk_dialogs import mostrar_erro
            mostrar_erro(self, "M√≥dulo n√£o encontrado", 
                       f"N√£o foi poss√≠vel carregar as configura√ß√µes de email.\n\n"
                       f"Erro: {e}\n\n"
                       f"Verifique se o arquivo email_config_window.py existe.")
            print(f"[COMUNICA√á√ÉO] ‚ùå Erro ao abrir configura√ß√µes: {e}")
        except Exception as e:
            from biodesk_dialogs import mostrar_erro
            mostrar_erro(self, "Erro", f"Erro ao abrir configura√ß√µes:\n{str(e)}")
            print(f"[COMUNICA√á√ÉO] ‚ùå Erro inesperado: {e}")

    def init_sub_declaracao_saude_modular(self):
        """Sub-aba: Declara√ß√£o de Sa√∫de - VERS√ÉO MODULAR"""
        try:
            # Import lazy do m√≥dulo especializado
            _, _, _, _, _, DeclaracaoSaudeWidget, _, _ = importar_modulos_especializados()
            
            # Criar widget especializado
            self.declaracao_saude_widget = DeclaracaoSaudeWidget(self)
            
            # Conectar sinais
            self.declaracao_saude_widget.declaracao_assinada.connect(self.on_declaracao_assinada)
            self.declaracao_saude_widget.dados_atualizados.connect(self.on_declaracao_dados_atualizados)
            
            # Layout para o widget modular
            if not self.sub_declaracao_saude.layout():
                layout = QVBoxLayout(self.sub_declaracao_saude)
                layout.setContentsMargins(0, 0, 0, 0)
                layout.addWidget(self.declaracao_saude_widget)
            else:
                self.sub_declaracao_saude.layout().addWidget(self.declaracao_saude_widget)
            
            # Carregar dados do paciente se dispon√≠vel
            if hasattr(self, 'paciente_data') and self.paciente_data:
                if hasattr(self.declaracao_saude_widget, 'set_paciente_data'):
                    self.declaracao_saude_widget.set_paciente_data(self.paciente_data)
                elif hasattr(self.declaracao_saude_widget, 'carregar_dados_paciente'):
                    self.declaracao_saude_widget.carregar_dados_paciente(self.paciente_data)
            
            return True
            
        except Exception as e:
            return self.init_sub_declaracao_saude_fallback()
    
    def init_sub_declaracao_saude_fallback(self):
        """Fallback para declara√ß√£o de sa√∫de caso o m√≥dulo falhe"""
        layout = QVBoxLayout(self.sub_declaracao_saude)
        layout.setContentsMargins(20, 20, 20, 20)
        
        label = QLabel("‚ùå M√≥dulo de Declara√ß√£o de Sa√∫de indispon√≠vel")
        label.setStyleSheet("color: #e74c3c; font-size: 16px; font-weight: bold;")
        label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(label)
        
        print("‚ö†Ô∏è Usando fallback para DeclaracaoSaudeWidget")
        return False
    
    # Callbacks para o m√≥dulo de declara√ß√£o de sa√∫de
    def on_declaracao_assinada(self, dados):
        """Callback quando declara√ß√£o √© assinada"""
        print(f"‚úÖ Declara√ß√£o assinada para paciente {dados.get('paciente_id')}")
        
        # Atualizar lista de documentos no gestor
        if hasattr(self, 'gestao_documentos_widget'):
            try:
                print("üîÑ Atualizando lista de documentos...")
                self.gestao_documentos_widget.atualizar_lista_documentos()
                print("‚úÖ Lista de documentos atualizada")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao atualizar gestor de documentos: {e}")
        
        try:
            self.atualizar_lista_documentos()
            print("‚úÖ Lista atualizada via delegate")
        except Exception as e:
            print(f"‚ÑπÔ∏è Delegate n√£o dispon√≠vel: {e}")
    
    def on_declaracao_dados_atualizados(self, dados):
        """Callback quando dados da declara√ß√£o s√£o atualizados"""
        print(f"üìÑ Dados da declara√ß√£o atualizados: {dados}")

    def init_sub_gestao_documentos_modular(self):
        """Sub-aba: Gest√£o de Documentos - M√ìDULO OTIMIZADO"""
        # ‚úÖ USAR M√ìDULO OTIMIZADO DE GEST√ÉO DE DOCUMENTOS
        from ficha_paciente.gestao_documentos import GestaoDocumentosWidget
        
        # Criar layout principal
        layout = QVBoxLayout(self.sub_gestao_documentos)
        layout.setContentsMargins(0, 0, 0, 0)
        
        # Criar widget especializado
        self.gestao_documentos_widget = GestaoDocumentosWidget(self)
        
        # Definir ID do paciente
        if self.paciente_data and 'id' in self.paciente_data:
            self.gestao_documentos_widget.set_paciente_id(self.paciente_data['id'])
        elif self.paciente_data and 'nome' in self.paciente_data:
            # Se n√£o houver ID, usar nome como fallback
            self.gestao_documentos_widget.set_paciente_id(self.paciente_data['nome'])
        
        # Conectar sinais para comunica√ß√£o
        self.gestao_documentos_widget.documento_adicionado.connect(self.on_documento_adicionado)
        self.gestao_documentos_widget.documento_removido.connect(self.on_documento_removido)
        self.gestao_documentos_widget.documento_visualizado.connect(self.on_documento_visualizado)
        
        # Adicionar ao layout
        layout.addWidget(self.gestao_documentos_widget)
        
        print("‚úÖ Gest√£o de Documentos carregado com sucesso")
    
    # Callbacks para integra√ß√£o com o m√≥dulo especializado
    def on_documento_adicionado(self, caminho_documento):
        """Callback quando documento √© adicionado"""
        print(f"üìÑ Documento adicionado: {caminho_documento}")
    
    def on_documento_removido(self, caminho_documento):
        """Callback quando documento √© removido"""
        print(f"üóëÔ∏è Documento removido: {caminho_documento}")
    
    def on_documento_visualizado(self, caminho_documento):
        """Callback quando documento √© visualizado"""
        print(f"üëÅÔ∏è Documento visualizado: {caminho_documento}")
    
    def on_documento_assinado(self, caminho_documento):
        """Callback quando documento √© assinado"""
        print(f"‚úçÔ∏è Documento assinado: {caminho_documento}")
    
    def atualizar_lista_documentos(self):
        """Delegado para atualizar a lista no Gestor de Documentos."""
        try:
            if hasattr(self, "gestao_documentos_widget") and self.gestao_documentos_widget:
                # Garantir que est√° a usar o ID atual
                pid = self.paciente_data.get("id") or self.paciente_data.get("nome")
                if pid:
                    self.gestao_documentos_widget.set_paciente_id(pid)
                self.gestao_documentos_widget.atualizar_lista_documentos()
                print("üîÑ [DOCUMENTOS] Refresh pedido pela FichaPaciente")
        except Exception as e:
            print(f"‚ùå [DOCUMENTOS] Erro no refresh delegado: {e}")

    def _on_dados_tab_changed(self, idx):
        """üöÄ LAZY LOADING: Carrega sub-tab de dados/documentos sob demanda"""
        try:
            tab_names = ['dados_pessoais', 'declaracao_saude', 'gestao_documentos']
            
            if 0 <= idx < len(tab_names):
                tab_name = tab_names[idx]
                
                # Carregar tab apenas se ainda n√£o foi carregado
                if not self._tabs_loaded.get(tab_name, False):
                    print(f"üöÄ [LAZY] Carregando sub-tab '{tab_name}' sob demanda...")
                    
                    # Carregar tab espec√≠fico
                    if tab_name == 'dados_pessoais':
                        self.init_sub_dados_pessoais()
                    elif tab_name == 'declaracao_saude':
                        self.init_sub_declaracao_saude_modular()
                    elif tab_name == 'gestao_documentos':
                        self.init_sub_gestao_documentos_modular()
                    
                    # Marcar como carregado
                    self._tabs_loaded[tab_name] = True
                    print(f"‚úÖ [LAZY] Sub-tab '{tab_name}' carregado com sucesso")
                else:
                    print(f"‚ôªÔ∏è [LAZY] Sub-tab '{tab_name}' j√° carregado - reutilizando")
                    
        except Exception as e:
            print(f"‚ùå [LAZY] Erro ao carregar sub-tab: {e}")

    def init_sub_iris_analise(self):
        """An√°lise de √çris - M√≥dulo Otimizado"""
        try:
            from ficha_paciente.iris_integration import IrisIntegrationWidget
            
            layout = QVBoxLayout(self.sub_iris_analise)
            layout.setContentsMargins(0, 0, 0, 0)
            
            # Usar m√≥dulo especializado
            self.iris_widget = IrisIntegrationWidget(self.paciente_data, self)
            layout.addWidget(self.iris_widget)
            
            # Conectar sinais
            self.iris_widget.zona_clicada.connect(self.on_zona_clicada)
            self.iris_widget.imagem_selecionada.connect(self.on_imagem_iris_selecionada)
            self.iris_widget.notas_exportadas.connect(self.on_notas_iris_exportadas)
            
            # print("‚úÖ M√≥dulo de √çris carregado com sucesso")
            
        except ImportError as e:
            print(f"‚ùå Erro ao carregar m√≥dulo de √≠ris: {e}")
            self.init_sub_iris_analise_fallback()

    def on_zona_clicada(self, nome_zona):
        """
        ‚úÖ FUNCIONALIDADE RESTAURADA: An√°lise interativa de sinais de √≠ris
        Processa clique numa zona da √≠ris e abre popup de an√°lise de sinais
        """
        print(f"üîç Zona clicada para an√°lise: {nome_zona}")
        
        # Adicionar nota automaticamente na √°rea de notas
        if hasattr(self, 'notas_iris'):
            try:
                if hasattr(self.notas_iris, 'adicionar_linha'):
                    self.notas_iris.adicionar_linha(f"üéØ An√°lise: {nome_zona}")
                    print(f"‚úÖ Nota adicionada para zona: {nome_zona}")
                elif hasattr(self.notas_iris, 'setPlainText'):
                    # QTextEdit simples
                    texto_atual = self.notas_iris.toPlainText()
                    if texto_atual:
                        texto_atual += f"\nüéØ An√°lise: {nome_zona}"
                    else:
                        texto_atual = f"üéØ An√°lise: {nome_zona}"
                    self.notas_iris.setPlainText(texto_atual)
                    print(f"‚úÖ Nota adicionada para zona: {nome_zona}")
                else:
                    print(f"‚ö†Ô∏è Widget de notas n√£o suporta adi√ß√£o autom√°tica de texto")
                    
            except Exception as e:
                print(f"‚ùå Erro ao adicionar nota: {e}")
        
        # O popup de an√°lise detalhada √© aberto automaticamente pelo pr√≥prio ZonaReflexa

    def on_imagem_iris_selecionada(self, imagem_data):
        """Callback para quando uma imagem √© selecionada na galeria"""
        print(f"üñºÔ∏è Imagem selecionada: {imagem_data}")
        # Processar sele√ß√£o de imagem conforme necess√°rio
        
    def on_notas_iris_exportadas(self, nota_zona):
        """Callback para quando uma zona √© exportada da √≠ris para o painel dedicado"""
        from datetime import datetime
        
        print(f"üìù Recebida zona da √≠ris: {nota_zona}")
        
        # ‚úÖ GARANTIR QUE O HIST√ìRICO EST√Å CARREGADO ANTES DE ADICIONAR NOTAS
        if not hasattr(self, 'historico_widget') or not self.historico_widget:
            print("üîÑ Hist√≥rico n√£o carregado ainda, carregando agora...")
            # For√ßar carregamento do hist√≥rico se ainda n√£o existe
            if not self._tabs_loaded.get('historico', False):
                self.init_tab_historico()
                self._tabs_loaded['historico'] = True
        
        # ‚úÖ CORRIGIDO: Processar cada zona individualmente
        if hasattr(self, 'historico_widget') and self.historico_widget:
            try:
                # Verificar se o widget tem o m√©todo para adicionar an√°lises de √≠ris
                if hasattr(self.historico_widget, 'adicionar_analise_iris'):
                    # Limpar texto (remover prefixos como "An√°lise: ")
                    zona_limpa = nota_zona.replace('An√°lise: ', '').strip()
                    
                    # Adicionar zona individual
                    self.historico_widget.adicionar_analise_iris(zona_limpa)
                    
                    print(f"‚úÖ Zona '{zona_limpa}' adicionada ao painel dedicado")
                else:
                    print("‚ö†Ô∏è M√©todo adicionar_analise_iris n√£o encontrado no widget de hist√≥rico")
            except Exception as e:
                print(f"‚ùå Erro ao adicionar an√°lise ao painel de √≠ris: {e}")
        else:
            print("‚ö†Ô∏è Widget de hist√≥rico ainda n√£o dispon√≠vel ap√≥s carregamento")
            
            # Marcar como alterado para salvar
            self.dirty = True
            print("‚úÖ Dados do paciente atualizados com notas da √≠ris")

    def atualizar_textos_botoes(self, texto_linha=None):
        """Atualiza os textos dos bot√µes mostrando quantas linhas est√£o selecionadas"""
        if not hasattr(self, 'notas_iris') or not self.notas_iris:
            return
            
        try:
            total = self.notas_iris.count_total()
            selecionadas = self.notas_iris.count_selecionadas()
            
            if total == 0:
                self.btn_exportar_notas.setText('üì§ Hist√≥rico')
                self.btn_exportar_terapia.setText('‚ö° Terapia')
            else:
                self.btn_exportar_notas.setText(f'üì§ Hist√≥rico ({selecionadas}/{total})')
                self.btn_exportar_terapia.setText(f'‚ö° Terapia ({selecionadas}/{total})')
        except Exception as e:
            print(f"[DEBUG] Erro ao atualizar textos dos bot√µes: {e}")

    def init_sub_centro_comunicacao_unificado(self):
        """
        üöÄ CENTRO DE COMUNICA√á√ÉO UNIFICADO
        ==================================
        
        Substitui as abas separadas de:
        - Email
        - Gest√£o de Documentos  
        - Templates/Prescri√ß√µes
        
        Por uma interface unificada em 3 colunas
        """
        try:
            print("üöÄ Carregando Centro de Comunica√ß√£o Unificado...")
            
            # Limpar layout existente
            layout = QVBoxLayout(self.sub_centro_comunicacao)
            layout.setContentsMargins(0, 0, 0, 0)
            layout.setSpacing(0)
            
            # Importar e instanciar o Centro de Comunica√ß√£o
            from ficha_paciente.centro_comunicacao_unificado import CentroComunicacaoUnificado
            
            # Criar widget com dados do paciente
            self.centro_comunicacao_widget = CentroComunicacaoUnificado(self.paciente_data, self)
            
            # Conectar sinais
            if hasattr(self.centro_comunicacao_widget, 'comunicacao_realizada'):
                self.centro_comunicacao_widget.comunicacao_realizada.connect(self.on_comunicacao_realizada)
            
            # Adicionar ao layout
            layout.addWidget(self.centro_comunicacao_widget)
            
            print("‚úÖ Centro de Comunica√ß√£o Unificado carregado com sucesso!")
            
        except ImportError as e:
            print(f"‚ùå Erro ao importar Centro de Comunica√ß√£o: {e}")
            self.init_sub_centro_comunicacao_fallback()
            
        except Exception as e:
            print(f"‚ùå Erro geral ao carregar Centro de Comunica√ß√£o: {e}")
            import traceback
            traceback.print_exc()
            self.init_sub_centro_comunicacao_fallback()
    
    def on_comunicacao_realizada(self, comunicacao_data):
        """Callback quando uma comunica√ß√£o √© realizada no centro unificado"""
        try:
            print(f"üìß Comunica√ß√£o realizada: {comunicacao_data.get('assunto', 'N/A')}")
            
            # Aqui poderia integrar com sistema de auditoria
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no callback de comunica√ß√£o: {e}")

    def init_tab_terapia(self):
        """Inicializa a aba de terapia qu√¢ntica - Interface Zero"""
        layout = QVBoxLayout(self.tab_terapia)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)

        # T√≠tulo principal - mesmo estilo do bot√£o principal
        titulo = QLabel("üåü TERAPIA QU√ÇNTICA üåü")
        titulo.setAlignment(Qt.AlignmentFlag.AlignCenter)
        titulo.setStyleSheet("""
            font-size: 28px;
            font-weight: bold;
            color: #4a148c;
            padding: 25px;
            background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                stop:0 #e1bee7, stop:0.5 white, stop:1 #e1bee7);
            border-radius: 15px;
            border: 3px solid #9c27b0;
            margin-bottom: 20px;
        """)
        layout.addWidget(titulo)
        
        # Informa√ß√µes do paciente
        if self.paciente_data:
            info_paciente = QLabel(f"üë§ Paciente: {self.paciente_data.get('nome', 'N/A')}")
            info_paciente.setAlignment(Qt.AlignmentFlag.AlignCenter)
            info_paciente.setStyleSheet("""
                font-size: 18px;
                font-weight: bold;
                color: #666;
                padding: 10px;
                background: #f8f8f8;
                border-radius: 8px;
                margin-bottom: 20px;
            """)
            layout.addWidget(info_paciente)

        # √Årea de desenvolvimento - mesma mensagem do bot√£o principal
        area_dev = QLabel("""
        üî¨ √ÅREA COMPLETAMENTE VAZIA PARA DESENVOLVIMENTO
        
        Esta √© uma tela em branco onde voc√™ pode:
        
        ‚ú® Implementar an√°lise de frequ√™ncias
        ‚ú® Criar protocolos terap√™uticos
        ‚ú® Desenvolver biofeedback
        ‚ú® Adicionar an√°lise de √≠ris
        ‚ú® Criar seu pr√≥prio sistema de medicina qu√¢ntica
        
        üéØ COMECE AQUI O SEU C√ìDIGO!
        """)
        area_dev.setAlignment(Qt.AlignmentFlag.AlignCenter)
        area_dev.setStyleSheet("""
            font-size: 16px;
            color: #444;
            padding: 40px;
            background: white;
            border: 3px dashed #9c27b0;
            border-radius: 15px;
            margin: 20px 0;
        """)
        layout.addWidget(area_dev)
        
        # Bot√µes de a√ß√£o - mesmo estilo
        botoes_layout = QHBoxLayout()
        # Bot√£o de teste removido - funcionalidade obsoleta
        
        # Bot√£o abrir m√≥dulo
        self.btn_abrir_terapia = ButtonManager.abrir_terapia_button(self, self.abrir_terapia)
        botoes_layout.addWidget(self.btn_abrir_terapia)
        
        botoes_layout.addStretch()
        layout.addLayout(botoes_layout)
        
        # Espa√ßador
        layout.addStretch()

    def inserir_data_negrito(self):
        import time
        from datetime import datetime
        
        # ‚úÖ Debounce: prevenir cliques m√∫ltiplos acidentais (500ms)
        agora = time.time()
        if agora - self._ultimo_clique_data < 0.5:  # 500ms
            print("[DEBUG] Clique ignorado devido ao debounce")
            return
        self._ultimo_clique_data = agora
        
        data_hoje = datetime.today().strftime('%d/%m/%Y')
        
        # Usar verifica√ß√£o robusta de data existente
        existe, tipo = self._data_ja_existe_no_historico(data_hoje)
        
        if existe:
            from biodesk_dialogs import mostrar_informacao
            if tipo == 'iris':
                mostrar_informacao(
                    self, 
                    'Data j√° existe', 
                    f'J√° existe um registo de an√°lise de √≠ris para hoje ({data_hoje}).\n\n'
                    'Pode continuar a adicionar conte√∫do ao registo existente ou '
                    'usar a fun√ß√£o "Exportar" na aba √çris para adicionar mais notas.'
                )
            else:
                mostrar_informacao(
                    self, 
                    'Data j√° existe', 
                    f'J√° existe uma entrada para hoje ({data_hoje}) no hist√≥rico.\n\n'
                    'Pode continuar a escrever no registo existente.'
                )
            return
        
        prefixo = f'<b>{data_hoje}</b><br><hr style="border: none; border-top: 1px solid #bbb; margin: 10px 6px;">'
        # Montar novo HTML, garantindo separa√ß√£o de blocos
        html_atual = self.historico_edit.toHtml()
        novo_html = f'{prefixo}<div></div>{html_atual}'
        self.historico_edit.setHtml(novo_html)
        
        # Scroll para o topo
        v_scroll = self.historico_edit.verticalScrollBar()
        if v_scroll is not None:
            v_scroll.setValue(0)

    def json_richtext_to_html(self, json_list):
        html = ""
        current_block = ""
        last_bg = None
        for obj in json_list:
            char = obj.get("char", "")
            # Trata quebras de linha como novo bloco
            if char == "\n":
                if current_block:
                    html += current_block + "<br>"
                    current_block = ""
                continue
            style = ""
            bg = obj.get("background")
            if bg:
                style += f"background-color:{bg};"
            span = char
            if style:
                span = f"<span style='{style}'>{span}</span>"
            if obj.get("bold"):
                span = f"<b>{span}</b>"
            if obj.get("italic"):
                span = f"<i>{span}</i>"
            if obj.get("underline"):
                span = f"<u>{span}</u>"
            current_block += span
        if current_block:
            html += current_block
        return html

    def text_with_tags_to_html(self, text, tags):
        html = ""
        opens = []
        tags_sorted = sorted(tags, key=lambda t: float(t["start"]))
        i = 0
        while i < len(text):
            # Abre tags que come√ßam aqui
            for tag in tags_sorted:
                if int(float(tag["start"])) == i:
                    if tag["tag"] == "negrito":
                        html += "<b>"
                        opens.append("b")
                    if tag["tag"] == "sel":
                        html += "<span style='background-color: #ffff00;'>"
                        opens.append("span")
            c = text[i]
            if c == "\n":
                html += "<br>"
            else:
                html += c
            # Fecha tags que terminam aqui
            for tag in tags_sorted:
                if int(float(tag["end"])) == i + 1:
                    if tag["tag"] == "negrito" and "b" in opens:
                        html += "</b>"
                        opens.remove("b")
                    if tag["tag"] == "sel" and "span" in opens:
                        html += "</span>"
                        opens.remove("span")
            i += 1
        # Fecha tags abertas
        for t in reversed(opens):
            html += f"</{t}>"
        return html

    def load_data(self):
        """Carrega os dados do paciente nos widgets especializados"""
        # CORRE√á√ÉO: Prevenir callbacks de marcar como dirty durante carregamento
        self._carregando_dados = True
        
        try:
            d = self.paciente_data
            
            # Carregar dados pessoais no widget especializado
            if hasattr(self, 'dados_pessoais_widget'):
                try:
                    # O widget usa self.paciente_data internamente
                    self.dados_pessoais_widget.paciente_data = d
                    self.dados_pessoais_widget.carregar_dados()
                    # print("‚úÖ Dados pessoais carregados no widget especializado")
                except Exception as e:
                    print(f"‚ùå Erro ao carregar dados pessoais: {e}")
            
            # Carregar hist√≥rico cl√≠nico no widget especializado  
            if hasattr(self, 'historico_widget'):
                try:
                    historico = d.get('historico_clinico', '') or d.get('historico', '')
                    # O widget usa self.historico_texto internamente
                    self.historico_widget.historico_texto = historico
                    self.historico_widget.carregar_historico()
                    print("‚úÖ Hist√≥rico cl√≠nico carregado no widget especializado")
                except Exception as e:
                    print(f"‚ùå Erro ao carregar hist√≥rico: {e}")
            
            # Carregar outros dados que ainda n√£o foram modularizados
            
            # Carregar novos campos se existirem
            if hasattr(self, 'observacoes_edit'):
                self.observacoes_edit.setText(d.get('observacoes', ''))
            if hasattr(self, 'conheceu_combo'):
                self.conheceu_combo.setCurrentText(d.get('conheceu', ''))
            if hasattr(self, 'referenciado_edit'):
                self.referenciado_edit.setText(d.get('referenciado', ''))
            if hasattr(self, 'nif_edit'):
                self.nif_edit.setText(d.get('nif', ''))
            if hasattr(self, 'local_combo'):
                self.local_combo.setCurrentText(d.get('local_habitual', ''))
        
            # ‚úÖ CORRE√á√ÉO: Carregar dados do email automaticamente
            if hasattr(self, 'carregar_dados_paciente_email'):
                self.carregar_dados_paciente_email()
                
            # ‚úÖ NOVO: Carregar dados da declara√ß√£o de sa√∫de
            if hasattr(self, 'carregar_dados_paciente_declaracao'):
                self.carregar_dados_paciente_declaracao()
                # Dados do email recarregados automaticamente
            
            # ‚úÖ CORRE√á√ÉO: Atualizar lista de documentos quando o paciente √© carregado
            if hasattr(self, 'atualizar_lista_documentos'):
                try:
                    self.atualizar_lista_documentos()
                    print(f"üîÑ [DOCUMENTOS] Lista atualizada para paciente: {d.get('nome', 'Sem nome')}")
                except Exception as e:
                    print(f"‚ùå [DOCUMENTOS] Erro ao atualizar lista: {e}")
        
        finally:
            # CORRE√á√ÉO: Reativar callbacks ap√≥s carregamento completo
            self._carregando_dados = False
            # Resetar estado dirty ap√≥s carregamento inicial
            self.dirty = False

    def guardar(self):
        """Guarda os dados do utente na base de dados usando widgets especializados"""
        print("üîç [DEBUG GUARDAR] === IN√çCIO DA FUN√á√ÉO GUARDAR ===")
        from db_manager import DBManager
        
        # Obter dados do widget de dados pessoais
        dados = {}
        if hasattr(self, 'dados_pessoais_widget'):
            try:
                dados_pessoais = self.dados_pessoais_widget.obter_dados()
                dados.update(dados_pessoais)
            except Exception as e:
                print(f"‚ùå Erro ao obter dados pessoais: {e}")
        
        # Obter hist√≥rico cl√≠nico do widget especializado
        if hasattr(self, 'historico_widget'):
            try:
                historico = self.historico_widget.obter_historico()
                dados['historico'] = historico
                print(f"üîç [DEBUG HIST√ìRICO] Obtido hist√≥rico com {len(historico)} caracteres")
                print(f"üîç [DEBUG HIST√ìRICO] Primeiros 200 chars: {historico[:200]}")
            except Exception as e:
                print(f"‚ùå Erro ao obter hist√≥rico: {e}")
        else:
            print("‚ö†Ô∏è [DEBUG HIST√ìRICO] Widget de hist√≥rico n√£o dispon√≠vel")
        
        # Incluir ID se existir
        if 'id' in self.paciente_data:
            dados['id'] = self.paciente_data['id']
        
        # Salvar na base de dados
        from db_manager import DBManager
        db = DBManager()
        
        print(f"üîç [DEBUG GUARDAR] Dados a guardar: {list(dados.keys())}")
        if 'historico' in dados:
            print(f"üîç [DEBUG GUARDAR] Hist√≥rico tem {len(dados['historico'])} caracteres")
        
        # Preven√ß√£o de duplica√ß√£o por nome + data_nascimento
        query = "SELECT * FROM pacientes WHERE nome = ? AND data_nascimento = ?"
        params = (dados['nome'], dados['data_nascimento'])
        duplicados = db.execute_query(query, params)
        if duplicados and (not ('id' in dados and duplicados[0].get('id') == dados['id'])):
            QMessageBox.warning(
            self,
            "Duplicado",
            "J√° existe um utente com este nome e data de nascimento."
        )
            return
            
        novo_id = db.save_or_update_paciente(dados)
        
        print(f"üîç [DEBUG GUARDAR] Resultado DB: novo_id={novo_id}")
        
        if novo_id != -1:
            self.paciente_data['id'] = novo_id
            # Atualizar dados do paciente para reflex√£o na interface
            self.paciente_data.update(dados)
            self.setWindowTitle(dados['nome'])
            self.dirty = False
            QMessageBox.information(
            self,
            "Sucesso",
            "Utente guardado com sucesso!"
        )
        else:
            QMessageBox.warning(
            self,
            "Erro",
            "Erro ao guardar utente."
        )

    @staticmethod
    def mostrar_seletor(callback, parent=None):
        """Interface modular de pesquisa de pacientes"""
        try:
            # Usar m√≥dulo especializado
            _, _, _, _, _, _, _, PesquisaPacientesManager = importar_modulos_especializados()
            PesquisaPacientesManager.mostrar_seletor(callback, parent)
            # print("‚úÖ Pesquisa de Pacientes carregada com sucesso")
        except Exception as e:
            print(f"‚ùå Erro no m√≥dulo de pesquisa: {e}")
            # Fallback b√°sico em caso de erro
            from biodesk_dialogs import mostrar_erro
            mostrar_erro(parent, "Erro", f"Erro no sistema de pesquisa: {str(e)}")
        from PyQt6.QtWidgets import QDialog, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton, QTableWidget, QTableWidgetItem, QMenu, QHeaderView
        from PyQt6.QtCore import Qt, QPoint
        from db_manager import DBManager
        
    # ========================================================================
    # SISTEMA DE FOLLOW-UP AUTOM√ÅTICO - REMOVIDO
    # C√≥digo movido para comunicacao_manager.py para melhor performance de startup
    # ========================================================================
    
    def abrir_pdf_atual_externo(self):
        """Abre o PDF atual no visualizador externo padr√£o"""
        if hasattr(self, '_ultimo_pdf_gerado') and self._ultimo_pdf_gerado:
            try:
                from PyQt6.QtGui import QDesktopServices
                from PyQt6.QtCore import QUrl
                import os
                
                if os.path.exists(self._ultimo_pdf_gerado):
                    url = QUrl.fromLocalFile(os.path.abspath(self._ultimo_pdf_gerado))
                    QDesktopServices.openUrl(url)
                    print(f"‚úÖ [PDF] Aberto externamente: {os.path.basename(self._ultimo_pdf_gerado)}")
                else:
                    print("‚ùå [PDF] Arquivo n√£o encontrado")
                    
            except Exception as e:
                print(f"‚ùå [PDF] Erro ao abrir: {e}")
        else:
            print("‚ö†Ô∏è [PDF] Nenhum PDF dispon√≠vel para abrir")

    def _is_online(self, timeout=3):
        """Verifica conectividade b√°sica (DNS/Google) antes de tentar enviar."""
        try:
            socket.create_connection(("8.8.8.8", 53), timeout=timeout)
            return True
        except Exception:
            return False

    def schedule_followup_consulta(self):
        """REMOVIDO: Agendamento de follow-up movido para comunicacao_manager.py"""
        from PyQt6.QtWidgets import QMessageBox
        BiodeskMessageBox.information(self, "Follow-up", 
                              "O sistema de follow-up foi integrado no Centro de Comunica√ß√£o.\n"
                              "Use a aba 'Comunica√ß√£o' para agendar follow-ups.")
        return

    def _show_followup_confirmation(self, tipo, when_dt):
        """Mostra uma caixa de confirma√ß√£o estilizada para follow-up agendado."""
        dialog = QDialog(self)
        dialog.setWindowTitle("‚úÖ Follow-up Agendado")
        dialog.setFixedSize(400, 200)
        dialog.setModal(True)
        
        # Centralizar
        screen = QApplication.primaryScreen().geometry()
        x = (screen.width() - 400) // 2
        y = (screen.height() - 200) // 2
        dialog.move(x, y)
        
        # Estilo moderno
        dialog.setStyleSheet("""
            QDialog {
                background-color: #ffffff;
                border: 2px solid #28a745;
                border-radius: 12px;
            }
        """)
        
        layout = QVBoxLayout(dialog)
        layout.setSpacing(15)
        layout.setContentsMargins(25, 25, 25, 25)
        
        # √çcone e t√≠tulo
        title_layout = QHBoxLayout()
        
        icon_label = QLabel("‚úÖ")
        icon_label.setStyleSheet("""
            font-size: 32px;
            color: #28a745;
            margin-right: 10px;
        """)
        
        title_label = QLabel("Follow-up Agendado com Sucesso!")
        title_label.setStyleSheet("""
            font-size: 16px;
            font-weight: bold;
            color: #2c3e50;
        """)
        
        title_layout.addWidget(icon_label)
        title_layout.addWidget(title_label)
        title_layout.addStretch()
        
        layout.addLayout(title_layout)
        
        # Informa√ß√µes do agendamento
        tipo_display = tipo.replace('_', ' ').title()
        info_text = f"""
üìß <b>Tipo:</b> {tipo_display}
üìÖ <b>Data:</b> {when_dt.strftime('%d/%m/%Y')}
üïê <b>Hora:</b> {when_dt.strftime('%H:%M')}
üìã <b>Paciente:</b> {self.paciente_data.get('nome', 'N/A')}
        """.strip()
        
        info_label = QLabel(info_text)
        info_label.setStyleSheet("""
            QLabel {
                background-color: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 8px;
                padding: 15px;
                font-size: 13px;
                color: #495057;
                line-height: 1.4;
            }
        """)
        info_label.setWordWrap(True)
        
        layout.addWidget(info_label)
        
        # Bot√£o OK estilizado
        btn_ok = ButtonManager.entendido_button(dialog, dialog.accept)
        
        btn_layout = QHBoxLayout()
        btn_layout.addStretch()
        btn_layout.addWidget(btn_ok)
        btn_layout.addStretch()
        
        layout.addLayout(btn_layout)
        
        dialog.exec()

    def _adjust_to_business_hours(self, when_dt):
        """
        Ajusta a data/hora para hor√°rio comercial (11h-17h).
        Se estiver fora do hor√°rio, ajusta para o pr√≥ximo hor√°rio v√°lido.
        """
        from datetime import time
        
        # Extrair componentes
        target_date = when_dt.date()
        target_time = when_dt.time()
        
        # Hor√°rio comercial: 11h √†s 17h
        business_start = time(11, 0)
        business_end = time(17, 0)
        
        # Se est√° no hor√°rio comercial, manter
        if business_start <= target_time <= business_end:
            return when_dt
        
        # Se √© antes das 11h, ajustar para 11h do mesmo dia
        if target_time < business_start:
            # Escolher hor√°rio aleat√≥rio entre 11h-17h
            import random
            random_hour = random.randint(11, 16)
            random_minute = random.randint(0, 59)
            new_time = time(random_hour, random_minute)
            return datetime.combine(target_date, new_time)
        
        # Se √© depois das 17h, ajustar para 11h-17h do dia seguinte
        else:
            import random
            next_date = target_date + timedelta(days=1)
            random_hour = random.randint(11, 16)
            random_minute = random.randint(0, 59)
            new_time = time(random_hour, random_minute)
            return datetime.combine(next_date, new_time)

    def listar_followups_agendados(self):
        """Lista todos os follow-ups agendados e enviados para este paciente."""
        if not hasattr(self, 'scheduler') or not self.scheduler:
            QMessageBox.warning(
            self,
            "Erro",
            "Sistema de agendamento n√£o dispon√≠vel."
        )
            return
            
        paciente_id = self.paciente_data.get('id')
        if not paciente_id:
            return
            
        # Primeiro, recarregar dados do paciente da BD para ter hist√≥rico atualizado
        try:
            if hasattr(self, 'db') and self.db:
                paciente_atualizado = self.db.get_paciente_by_id(paciente_id)
                if paciente_atualizado:
                    self.paciente_data.update(paciente_atualizado)
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao recarregar dados do paciente: {e}")
            
        # Obter follow-ups agendados
        jobs_agendados = []
        for job in self.scheduler.get_jobs():
            if job.id.startswith(f"followup_{paciente_id}_"):
                jobs_agendados.append({
                    'id': job.id,
                    'data': job.next_run_time,
                    'tipo': job.id.split('_')[2] if len(job.id.split('_')) > 2 else 'padrao',
                    'status': 'agendado'
                })
        
        historico_completo = self.paciente_data.get('historico', '') or ''
        followups_enviados = []
        emails_enviados = []
        
        import re
        for linha in historico_completo.split('\n'):
            # Follow-ups autom√°ticos
            if 'follow-up autom√°tico' in linha.lower() or 'follow-up simulado' in linha.lower():
                try:
                    match = re.search(r'\[(\d{2}/\d{2}/\d{4} \d{2}:\d{2})\]', linha)
                    if match:
                        data_str = match.group(1)
                        data_envio = datetime.strptime(data_str, '%d/%m/%Y %H:%M')
                        
                        # Extrair tipo do follow-up
                        tipo = 'padrao'
                        if 'primeira_consulta' in linha:
                            tipo = 'primeira_consulta'
                        elif 'tratamento' in linha:
                            tipo = 'tratamento'
                        elif 'resultado' in linha:
                            tipo = 'resultado'
                            
                        followups_enviados.append({
                            'data': data_envio,
                            'tipo': tipo,
                            'status': 'enviado',
                            'texto': linha.strip(),
                            'categoria': 'Follow-up Autom√°tico'
                        })
                except Exception:
                    continue
            
            # Outros emails enviados (templates, documentos, etc.)
            elif any(termo in linha.lower() for termo in ['email enviado', 'enviado email', 'template enviado', 'documento enviado']):
                try:
                    match = re.search(r'\[(\d{2}/\d{2}/\d{4} \d{2}:\d{2})\]', linha)
                    if match:
                        data_str = match.group(1)
                        data_envio = datetime.strptime(data_str, '%d/%m/%Y %H:%M')
                        
                        # Determinar categoria do email
                        categoria = 'Email Manual'
                        if 'template' in linha.lower():
                            categoria = 'Template/Protocolo'
                        elif 'documento' in linha.lower():
                            categoria = 'Documento'
                        elif 'ficha' in linha.lower():
                            categoria = 'Ficha Paciente'
                            
                        emails_enviados.append({
                            'data': data_envio,
                            'status': 'enviado',
                            'texto': linha.strip(),
                            'categoria': categoria
                        })
                except Exception:
                    continue
        
        # Verificar se h√° dados para mostrar
        total_emails = len(followups_enviados) + len(emails_enviados)
        if not jobs_agendados and total_emails == 0:
            QMessageBox.information(
            self,
            "üìß Emails & Follow-ups",
            "N√£o h√° follow-ups agendados nem emails enviados para este paciente."
        )
            return
            
        # Criar dialog melhorado
        dialog = QDialog(self)
        dialog.setWindowTitle("üìß Emails & Follow-ups - Hist√≥rico Completo")
        dialog.setMinimumSize(700, 500)
        dialog.setModal(True)
        
        layout = QVBoxLayout(dialog)
        
        # Info do paciente
        info_label = QLabel(f"üìã Paciente: {self.paciente_data.get('nome', 'N/A')}")
        info_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #2c3e50; margin-bottom: 10px;")
        layout.addWidget(info_label)
        
        # Tabs para separar diferentes tipos
        tab_widget = QTabWidget()
        
        # Tab 1: Follow-ups Agendados
        tab_agendados = QWidget()
        layout_agendados = QVBoxLayout(tab_agendados)
        
        if jobs_agendados:
            lista_agendados = QListWidget()
            for job in jobs_agendados:
                tipo_display = job['tipo'].replace('_', ' ').title()
                item_text = f"üìÖ {tipo_display} - {job['data'].strftime('%d/%m/%Y √†s %H:%M')}"
                item = QListWidgetItem(item_text)
                item.setData(Qt.ItemDataRole.UserRole, job['id'])
                lista_agendados.addItem(item)
            
            layout_agendados.addWidget(lista_agendados)
            
            # Bot√£o para cancelar
            btn_cancelar = ButtonManager.cancelar_selecionado_button(dialog, None)  # callback ser√° definido abaixo

            def cancelar_job():
                item = lista_agendados.currentItem()
                if item:
                    job_id = item.data(Qt.ItemDataRole.UserRole)
                    try:
                        self.scheduler.remove_job(job_id)
                        lista_agendados.takeItem(lista_agendados.row(item))
                        BiodeskMessageBox.information(dialog, "‚úÖ Sucesso", "Follow-up cancelado com sucesso.")
                        
                        # Se n√£o h√° mais jobs, atualizar label
                        if lista_agendados.count() == 0:
                            lista_agendados.addItem("‚úÖ Nenhum follow-up agendado")
                            btn_cancelar.setEnabled(False)
                            
                    except Exception as e:
                        QMessageBox.warning(
            dialog,
            "‚ùå Erro",
            f"Erro ao cancelar: {e}"
        )
            
            btn_cancelar.clicked.connect(cancelar_job)
            layout_agendados.addWidget(btn_cancelar)
        else:
            label_vazio = QLabel("‚úÖ Nenhum follow-up agendado para este paciente.")
            label_vazio.setStyleSheet("color: #7f8c8d; font-style: italic; padding: 20px;")
            layout_agendados.addWidget(label_vazio)
        
        # Tab 2: Follow-ups Enviados
        tab_followups = QWidget()
        layout_followups = QVBoxLayout(tab_followups)
        
        if followups_enviados:
            lista_followups = QListWidget()
            # Ordenar por data (mais recente primeiro)
            followups_enviados.sort(key=lambda x: x['data'], reverse=True)
            
            for envio in followups_enviados:
                tipo_display = envio['tipo'].replace('_', ' ').title()
                item_text = f"ü§ñ {tipo_display} - Enviado em {envio['data'].strftime('%d/%m/%Y √†s %H:%M')}"
                item = QListWidgetItem(item_text)
                item.setToolTip(envio['texto'])  # Mostrar texto completo no tooltip
                lista_followups.addItem(item)
            
            layout_followups.addWidget(lista_followups)
            
            # Label informativo
            info_followups = QLabel(f"ü§ñ Total de follow-ups autom√°ticos: {len(followups_enviados)}")
            info_followups.setStyleSheet("color: #17a2b8; font-weight: bold; padding: 5px;")
            layout_followups.addWidget(info_followups)
        else:
            label_vazio = QLabel("üì≠ Nenhum follow-up autom√°tico foi enviado ainda.")
            label_vazio.setStyleSheet("color: #7f8c8d; font-style: italic; padding: 20px;")
            layout_followups.addWidget(label_vazio)
            
        tab_emails = QWidget()
        layout_emails = QVBoxLayout(tab_emails)
        
        if emails_enviados:
            lista_emails = QListWidget()
            # Ordenar por data (mais recente primeiro)
            emails_enviados.sort(key=lambda x: x['data'], reverse=True)
            
            # Agrupar por categoria para melhor visualiza√ß√£o
            categorias_icons = {
                'Email Manual': 'üìß',
                'Template/Protocolo': 'üìã',
                'Documento': 'üìÑ',
                'Ficha Paciente': 'üë§'
            }
            
            for envio in emails_enviados:
                icon = categorias_icons.get(envio['categoria'], 'üìß')
                item_text = f"{icon} {envio['categoria']} - Enviado em {envio['data'].strftime('%d/%m/%Y √†s %H:%M')}"
                item = QListWidgetItem(item_text)
                item.setToolTip(envio['texto'])  # Mostrar texto completo no tooltip
                lista_emails.addItem(item)
            
            layout_emails.addWidget(lista_emails)
            
            # Estat√≠sticas por categoria
            categorias_count = {}
            for envio in emails_enviados:
                cat = envio['categoria']
                categorias_count[cat] = categorias_count.get(cat, 0) + 1
            
            stats_text = "üìä Resumo: " + " ‚Ä¢ ".join([f"{cat}: {count}" for cat, count in categorias_count.items()])
            info_emails = QLabel(stats_text)
            info_emails.setStyleSheet("color: #28a745; font-weight: bold; padding: 5px; font-size: 12px;")
            info_emails.setWordWrap(True)
            layout_emails.addWidget(info_emails)
        else:
            label_vazio = QLabel("üì≠ Nenhum email manual foi enviado ainda.")
            label_vazio.setStyleSheet("color: #7f8c8d; font-style: italic; padding: 20px;")
            layout_emails.addWidget(label_vazio)
        
        # Adicionar tabs
        tab_widget.addTab(tab_agendados, f"üìÖ Agendados ({len(jobs_agendados)})")
        tab_widget.addTab(tab_followups, f"ü§ñ Follow-ups ({len(followups_enviados)})")
        tab_widget.addTab(tab_emails, f"üìß Outros Emails ({len(emails_enviados)})")
        
        layout.addWidget(tab_widget)
        
        # Bot√£o fechar
        btn_fechar = ButtonManager.fechar_button(dialog, dialog.accept)
        layout.addWidget(btn_fechar)
        
        dialog.exec()

    def closeEvent(self, event):
        # Fechar scheduler se estiver ativo
        try:
            if hasattr(self, 'scheduler') and self.scheduler:
                self.scheduler.shutdown(wait=False)
        except Exception:
            pass
            
        if getattr(self, 'dirty', False):
            reply = QMessageBox.question(
            self,
            "Altera√ß√µes por guardar",
            "Existem altera√ß√µes n√£o guardadas. Deseja sair sem guardar?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )
            if reply != QMessageBox.StandardButton.Yes:
                event.ignore()
                return
        event.accept()

    def abrir_terapia(self):
        """Abre o m√≥dulo de terapia qu√¢ntica com dados do paciente"""
        try:
            from terapia_quantica_window import TerapiaQuanticaWindow
            
            # Criar janela com dados do paciente
            self.terapia_window = TerapiaQuanticaWindow(paciente_data=self.paciente_data)
            self.terapia_window.show()
            
            print(f"[DEBUG] ‚úÖ Terapia Qu√¢ntica aberta para paciente: {self.paciente_data.get('nome', 'N/A')}")
            
        except ImportError as e:
            print(f"[ERRO] M√≥dulo n√£o encontrado: {e}")
            from biodesk_dialogs import mostrar_erro
            mostrar_erro(self, 'Erro', 'M√≥dulo Terapia Qu√¢ntica n√£o encontrado.')
        except Exception as e:
            print(f"[ERRO] Erro ao abrir terapia: {e}")
            from biodesk_dialogs import mostrar_erro
            mostrar_erro(self, 'Erro', f'Erro ao abrir terapia qu√¢ntica:\n{str(e)}')
            
    def exportar_para_terapia_quantica(self):
        """Exporta dados selecionados para o m√≥dulo de Terapia Qu√¢ntica."""
        # Obter apenas as linhas selecionadas
        linhas_selecionadas = self.notas_iris.get_linhas_selecionadas()
        
        if not linhas_selecionadas:
            from biodesk_dialogs import mostrar_aviso
            mostrar_aviso(self, 'Nenhuma nota selecionada', 
                         'Selecione pelo menos uma nota para enviar para a terapia qu√¢ntica.')
            return
        
        try:
            from terapia_quantica_window import TerapiaQuanticaWindow
            
            # Preparar dados das notas selecionadas para a terapia
            dados_iris = {
                'notas_selecionadas': linhas_selecionadas,
                'total_notas': len(linhas_selecionadas),
                'data_analise': self.data_atual(),
                'olho_analisado': getattr(self, 'ultimo_tipo_iris', 'esq')  # Padr√£o esquerdo
            }
            
            # Usar a mesma interface da vers√£o zero
            self.terapia_window = TerapiaQuanticaWindow(
                paciente_data=self.paciente_data,
                iris_data=dados_iris
            )
            self.terapia_window.show()
            
            # Informar sobre o envio
            from biodesk_dialogs import mostrar_informacao
            mostrar_informacao(self, 'Enviado para Terapia', 
                             f'‚úÖ {len(linhas_selecionadas)} nota(s) enviada(s) para a terapia qu√¢ntica!')
            
            print(f"[DEBUG] ‚úÖ {len(linhas_selecionadas)} nota(s) de √≠ris enviada(s) para terapia qu√¢ntica")
                
        except ImportError as e:
            print(f"[ERRO] M√≥dulo n√£o encontrado: {e}")
            from biodesk_dialogs import mostrar_informacao
            mostrar_informacao(self, "Exportar para terapia qu√¢ntica", "M√≥dulo em desenvolvimento")
        except Exception as e:
            print(f"[ERRO] Erro ao exportar para terapia: {e}")
            from biodesk_dialogs import mostrar_erro
            mostrar_erro(self, 'Erro', f'Erro ao exportar para terapia qu√¢ntica:\n{str(e)}')

    def atualizar_status_hs3(self, conectado=False):
        """Fun√ß√£o mantida para compatibilidade - n√£o faz nada na interface zero"""
        pass

    def atualizar_status_sessao(self, ativa=False, info=""):
        """Fun√ß√£o mantida para compatibilidade - n√£o faz nada na interface zero"""
        pass

    def verificar_status_hs3_inicial(self):
        """Fun√ß√£o mantida para compatibilidade - n√£o faz nada na interface zero"""
        pass
    def init_tab_consentimentos(self):
        """Inicializa a aba de consentimentos"""
        layout = QVBoxLayout(self.tab_consentimentos)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)
        
        # ====== SUB-ABAS DENTRO DE CONSENTIMENTOS ======
        self.consentimentos_tabs = QTabWidget()
        self.consentimentos_tabs.setTabPosition(QTabWidget.TabPosition.North)
        self.consentimentos_tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #dee2e6;
                border-radius: 8px;
                background-color: white;
            }
            QTabBar::tab {
                padding: 12px 20px;
                margin: 2px;
                border-radius: 6px 6px 0px 0px;
                background-color: #f8f9fa;
                color: #495057;
                font-weight: 600;
            }
            QTabBar::tab:selected {
                background-color: #007bff;
                color: white;
            }
            QTabBar::tab:hover {
                background-color: #e9ecef;
            }
        """)
        
        # Sub-aba 1: Consentimentos de Tratamento
        self.tab_consentimentos_tratamento = QWidget()
        self.consentimentos_tabs.addTab(self.tab_consentimentos_tratamento, 'üìã Consentimentos de Tratamento')
        
        # Sub-aba 2: Declara√ß√£o de Estado de Sa√∫de - REMOVIDA PARA EVITAR DUPLICA√á√ÉO
        # A Declara√ß√£o de Sa√∫de est√° APENAS na aba "DADOS DOCUMENTOS"
        # self.tab_declaracao_saude = QWidget()
        # self.consentimentos_tabs.addTab(self.tab_declaracao_saude, 'ü©∫ Declara√ß√£o de Estado de Sa√∫de')
        print("üö´ Sistema duplicado da Declara√ß√£o de Sa√∫de foi removido da aba CONSENTIMENTOS")
        
        # Adicionar as sub-abas ao layout principal
        layout.addWidget(self.consentimentos_tabs)
        
        # Inicializar cada sub-aba
        self.init_sub_aba_consentimentos_tratamento()

    def init_sub_aba_consentimentos_tratamento(self):
        """Inicializa a sub-aba de Consentimentos de Tratamento (conte√∫do original)"""
        # Layout principal da sub-aba
        layout = QVBoxLayout(self.tab_consentimentos_tratamento)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)
        
        # ====== LAYOUT HORIZONTAL PRINCIPAL ======
        main_horizontal_layout = QHBoxLayout()
        main_horizontal_layout.setSpacing(20)  # Aumentar espa√ßamento entre colunas
        
        # ====== 1. ESQUERDA: PAINEL DE STATUS COMPACTO ======
        status_frame = QFrame()
        status_frame.setFixedWidth(300)  # Aumentar largura para melhor organiza√ß√£o
        status_frame.setMinimumHeight(400)  # Garantir altura m√≠nima adequada
        status_frame.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 10px;
                padding: 15px;
            }
        """)
        status_layout = QVBoxLayout(status_frame)
        status_layout.setSpacing(12)  # Aumentar espa√ßamento entre elementos
        status_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        
        # T√≠tulo da se√ß√£o
        status_titulo = QLabel("üìã Status dos Consentimentos")
        status_titulo.setStyleSheet("""
            font-size: 14px; 
            font-weight: 600; 
            color: #2c3e50; 
            margin-bottom: 15px;
            padding: 8px;
            background-color: #e9ecef;
            border-radius: 6px;
        """)
        status_titulo.setAlignment(Qt.AlignmentFlag.AlignCenter)
        status_layout.addWidget(status_titulo)
        
        # Scroll area para os consentimentos
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: transparent;
            }

        """)
        
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)
        scroll_layout.setSpacing(8)  # Espa√ßamento adequado entre consentimentos
        scroll_layout.setContentsMargins(0, 8, 8, 8)  # Margem esquerda removida para alinhamento
        scroll_layout.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)  # Alinhar √† esquerda
        
        # Tipos de consentimento com cores past√©is elegantes (tratamento)
        tipos_consentimento = [
            ("üåø Naturopatia", "naturopatia", "#81c784"),     # Verde suave
            ("üëÅÔ∏è Iridologia", "iridologia", "#4fc3f7"),      # Azul c√©u
            ("ü¶¥ Osteopatia", "osteopatia", "#ffb74d"),       # Laranja suave
            ("‚ö° Medicina Qu√¢ntica", "quantica", "#ba68c8"),  # Roxo elegante
            ("üíâ Mesoterapia", "mesoterapia", "#f06292"),     # Rosa vibrante (mudei do azul)
            ("üõ°Ô∏è RGPD", "rgpd", "#90a4ae")                   # Cinza azulado
        ]
        
        self.botoes_consentimento = {}
        self.labels_status = {}
        
        for nome, tipo, cor in tipos_consentimento:
            # Cores past√©is predefinidas para cada tipo de consentimento
            cores_pastel = {
                "#81c784": "#e8f5e8",  # Verde suave para verde claro
                "#4fc3f7": "#e3f2fd",  # Azul c√©u para azul claro
                "#ffb74d": "#fff3e0",  # Laranja suave para laranja claro
                "#ba68c8": "#f3e5f5",  # Roxo elegante para roxo claro
                "#64b5f6": "#e3f2fd",  # Azul sereno para azul claro
                "#90a4ae": "#f5f5f5"   # Cinza azulado para cinza claro
            }
            
            cor_pastel = cores_pastel.get(cor, "#f5f5f5")
            
            # Container para bot√£o + status
            item_widget = QWidget()
            item_widget.setFixedHeight(60)  # Altura compacta
            item_widget.setStyleSheet("background-color: transparent;")  # Remover fundo branco
            item_layout = QVBoxLayout(item_widget)
            item_layout.setContentsMargins(5, 5, 5, 5)
            item_layout.setSpacing(2)
            
            # Bot√£o principal - ESTILO IGUAL AOS TEMPLATES
            if BIODESK_STYLES_AVAILABLE:
                btn = BiodeskStyles.create_button(nome, ButtonType.DEFAULT)
                btn.setCheckable(True)
            else:
                btn = QPushButton(nome)
                btn.setCheckable(True)
                btn.setFixedHeight(45)  # Altura igual aos templates
            
            btn.clicked.connect(lambda checked, t=tipo: self.selecionar_tipo_consentimento(t))
            self.botoes_consentimento[tipo] = btn
            item_layout.addWidget(btn)
            
            # Label de status (menor)
            status_label = QLabel("‚ùå N√£o assinado")
            status_label.setStyleSheet("""
                font-size: 10px;
                color: #666;
                padding-left: 8px;
                margin: 0;
            """)
            self.labels_status[tipo] = status_label
            item_layout.addWidget(status_label)
            
            scroll_layout.addWidget(item_widget)
        
        # Adicionar stretch ao final
        scroll_layout.addStretch()
        
        scroll_area.setWidget(scroll_widget)
        status_layout.addWidget(scroll_area)
        
        main_horizontal_layout.addWidget(status_frame)
        
        # ====== 2. CENTRO: √ÅREA GRANDE DE TEXTO ======
        centro_frame = QFrame()
        centro_frame.setStyleSheet("""
            QFrame {
                background-color: #ffffff;
                border: 2px solid #e0e0e0;
                border-radius: 10px;
            }
        """)
        centro_layout = QVBoxLayout(centro_frame)
        centro_layout.setContentsMargins(15, 15, 15, 15)
        centro_layout.setSpacing(10)
        
        # Cabe√ßalho do centro
        header_centro = QFrame()
        header_centro.setFixedHeight(85)  # Aumentar altura para o texto ficar ainda mais vis√≠vel
        header_centro.setStyleSheet("""
            QFrame {
                background-color: #2980b9;
                border-radius: 8px;
            }
        """)
        header_layout = QHBoxLayout(header_centro)
        
        self.label_tipo_atual = QLabel("üëà Selecione um tipo de consentimento")
        self.label_tipo_atual.setStyleSheet("""
            font-size: 16px; 
            font-weight: 700; 
            color: #ffffff;
            padding: 20px 15px;
        """)
        header_layout.addWidget(self.label_tipo_atual)
        
        header_layout.addStretch()
        
        self.label_data_consentimento = QLabel(f"üìÖ {self.data_atual()}")
        self.label_data_consentimento.setStyleSheet("""
            font-size: 16px; 
            font-weight: 600;
            color: #ffffff;
            padding: 15px;
        """)
        header_layout.addWidget(self.label_data_consentimento)
        
        centro_layout.addWidget(header_centro)
        
        # Mensagem inicial (quando nenhum tipo est√° selecionado)
        self.mensagem_inicial = QLabel("üëà Selecione um tipo de consentimento")
        self.mensagem_inicial.setStyleSheet("""
            font-size: 18px;
            color: #7f8c8d;
            padding: 80px;
            border: 2px dashed #bdc3c7;
            border-radius: 10px;
            background-color: #f8f9fa;
        """)
        self.mensagem_inicial.setAlignment(Qt.AlignmentFlag.AlignCenter)
        centro_layout.addWidget(self.mensagem_inicial)
        
        # Editor de texto principal com altura controlada
        self.editor_consentimento = QTextEdit()
        self.editor_consentimento.setMinimumHeight(300)  # Altura aumentada
        self.editor_consentimento.setMaximumHeight(400)  # Altura m√°xima aumentada
        # Aplicar estilo b√°sico
        self.editor_consentimento.setStyleSheet("QTextEdit { border: 2px solid #e0e0e0; border-radius: 8px; padding: 12px; font-size: 14px; background-color: white; }")
        self.editor_consentimento.setPlaceholderText("Selecione um tipo de consentimento para editar o texto...")
        self.editor_consentimento.setVisible(False)  # Inicialmente oculto
        centro_layout.addWidget(self.editor_consentimento)
        
        # ====== BOT√ïES DE ASSINATURA COMPACTOS ======
        assinaturas_layout = QHBoxLayout()
        assinaturas_layout.setContentsMargins(20, 15, 20, 15)
        assinaturas_layout.setSpacing(25)
        
        # Espa√ßador esquerdo
        assinaturas_layout.addStretch()
        
        # Bot√£o Paciente - usando BiodeskStyles v2.0
        if BIODESK_STYLES_AVAILABLE:
            self.assinatura_paciente = BiodeskStyles.create_button("üìù Paciente", ButtonType.DIALOG)
        else:
            self.assinatura_paciente = QPushButton("üìù Paciente")
            self.assinatura_paciente.setFixedSize(140, 45)
            self.assinatura_paciente.setStyleSheet("""
                QPushButton {
                    border: 2px solid #2196F3;
                    border-radius: 8px;
                    background-color: #e3f2fd;
                    font-size: 12px;
                    color: #1976d2;
                    font-weight: 600;
                    padding: 8px;
                }
                QPushButton:hover {
                    background-color: #bbdefb;
                    border-color: #1976d2;
                }
                QPushButton:pressed {
                    background-color: #90caf9;
                    border-color: #0d47a1;
                }
            """)
        self.assinatura_paciente.clicked.connect(self.abrir_assinatura_paciente_click)
        assinaturas_layout.addWidget(self.assinatura_paciente)
        
        # Bot√£o Terapeuta - usando BiodeskStyles v2.0
        if BIODESK_STYLES_AVAILABLE:
            self.assinatura_terapeuta = BiodeskStyles.create_button("üë®‚Äç‚öïÔ∏è Terapeuta", ButtonType.SAVE)
        else:
            self.assinatura_terapeuta = QPushButton("üë®‚Äç‚öïÔ∏è Terapeuta")
            self.assinatura_terapeuta.setFixedSize(140, 45)
            self.assinatura_terapeuta.setStyleSheet("""
                QPushButton {
                    border: 2px solid #4CAF50;
                    border-radius: 8px;
                    background-color: #e8f5e8;
                    font-size: 12px;
                    color: #2e7d32;
                    font-weight: 600;
                    padding: 8px;
                }
                QPushButton:hover {
                    background-color: #c8e6c9;
                    border-color: #388e3c;
                }
                QPushButton:pressed {
                    background-color: #a5d6a7;
                    border-color: #1b5e20;
                }
            """)
        self.assinatura_terapeuta.clicked.connect(self.abrir_assinatura_terapeuta_click)
        assinaturas_layout.addWidget(self.assinatura_terapeuta)
        
        # Espa√ßador direito
        assinaturas_layout.addStretch()
        
        # Adicionar layout de assinaturas ao centro
        centro_layout.addLayout(assinaturas_layout)

        main_horizontal_layout.addWidget(centro_frame, 1)  # Expandir no centro        # ====== 3. DIREITA: BOT√ïES DE A√á√ÉO ======
        acoes_frame = QFrame()
        # Remover largura fixa para que se estenda at√© quase o limite da tela
        acoes_frame.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 10px;
                padding: 10px;
            }
        """)
        acoes_layout = QVBoxLayout(acoes_frame)
        acoes_layout.setSpacing(15)  # Aumentar espa√ßamento vertical
        acoes_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        
        # T√≠tulo das a√ß√µes
        acoes_titulo = QLabel("‚ö° A√ß√µes")
        acoes_titulo.setStyleSheet("""
            font-size: 16px; 
            font-weight: 600; 
            color: #2c3e50; 
            margin-bottom: 15px;
            padding: 12px;
            background-color: #e9ecef;
            border-radius: 6px;
        """)
        acoes_titulo.setAlignment(Qt.AlignmentFlag.AlignCenter)
        acoes_layout.addWidget(acoes_titulo)
        
        # Layout horizontal para os bot√µes (em linha)
        botoes_linha1 = QHBoxLayout()
        botoes_linha1.setSpacing(10)
        
        # Bot√µes de a√ß√£o (mais largos devido ao espa√ßo dispon√≠vel)
        if BIODESK_STYLES_AVAILABLE:
            btn_imprimir = BiodeskStyles.create_button("üñ®Ô∏è Imprimir", ButtonType.TOOL)
        else:
            btn_imprimir = QPushButton("üñ®Ô∏è\nImprimir")
            btn_imprimir.setFixedSize(100, 60)  # Reduzir largura
            self._style_modern_button(btn_imprimir, "#ff9800")
        btn_imprimir.clicked.connect(self.imprimir_consentimento)
        botoes_linha1.addWidget(btn_imprimir)
        
        if BIODESK_STYLES_AVAILABLE:
            btn_pdf = BiodeskStyles.create_button("üìÑ PDF", ButtonType.TOOL)
        else:
            btn_pdf = QPushButton("üìÑ\nPDF")
            btn_pdf.setFixedSize(100, 60)  # Reduzir largura
            self._style_modern_button(btn_pdf, "#3498db")
        btn_pdf.clicked.connect(self.gerar_pdf_consentimento)
        botoes_linha1.addWidget(btn_pdf)
        
        acoes_layout.addLayout(botoes_linha1)
        
        # Segunda linha de bot√µes
        botoes_linha2 = QHBoxLayout()
        botoes_linha2.setSpacing(10)
        
        if BIODESK_STYLES_AVAILABLE:
            btn_guardar = BiodeskStyles.create_button("üíæ Guardar", ButtonType.SAVE)
        else:
            btn_guardar = QPushButton("üíæ\nGuardar")
            btn_guardar.setFixedSize(100, 60)  # Reduzir largura
            self._style_modern_button(btn_guardar, "#27ae60")
        btn_guardar.clicked.connect(self.guardar_consentimento)
        botoes_linha2.addWidget(btn_guardar)
        
        if BIODESK_STYLES_AVAILABLE:
            btn_limpar = BiodeskStyles.create_button("üóëÔ∏è Limpar", ButtonType.DELETE)
        else:
            btn_limpar = QPushButton("üóëÔ∏è\nLimpar")
            btn_limpar.setFixedSize(100, 60)  # Reduzir largura
            self._style_modern_button(btn_limpar, "#e74c3c")
        btn_limpar.clicked.connect(self.limpar_consentimento)
        botoes_linha2.addWidget(btn_limpar)
        
        acoes_layout.addLayout(botoes_linha2)
        
        # Bot√£o de hist√≥rico centralizado
        if BIODESK_STYLES_AVAILABLE:
            btn_historico = BiodeskStyles.create_button("üìã Hist√≥rico", ButtonType.NAVIGATION)
        else:
            btn_historico = QPushButton("üìã Hist√≥rico")
            btn_historico.setFixedSize(210, 50)  # Mais largo para ocupar as duas colunas
            self._style_modern_button(btn_historico, "#9b59b6")
        btn_historico.clicked.connect(self.mostrar_historico_consentimentos)
        acoes_layout.addWidget(btn_historico)
        
        # Bot√£o moderno para assinatura externa
        if BIODESK_STYLES_AVAILABLE:
            btn_assinatura_externa = BiodeskStyles.create_button("üìù Assinar PDF Externamente", ButtonType.TOOL)
        else:
            btn_assinatura_externa = QPushButton("üìù Assinar PDF Externamente")
            btn_assinatura_externa.setFixedSize(210, 50)
        btn_assinatura_externa.clicked.connect(self.gerar_pdf_para_assinatura_externa)
        acoes_layout.addWidget(btn_assinatura_externa)
        
        # Bot√£o de importa√ß√£o manual (para casos onde a automa√ß√£o falha)
        if BIODESK_STYLES_AVAILABLE:
            btn_importar_manual_consent = BiodeskStyles.create_button("üìÅ Importar Assinado", ButtonType.TOOL)
        else:
            btn_importar_manual_consent = QPushButton("üìÅ Importar Assinado")
            btn_importar_manual_consent.setFixedSize(210, 35)
        btn_importar_manual_consent.clicked.connect(self.importar_pdf_manual)
        acoes_layout.addWidget(btn_importar_manual_consent)
        
        # Bot√£o de anular consentimento
        if BIODESK_STYLES_AVAILABLE:
            self.btn_anular = BiodeskStyles.create_button("üóëÔ∏è Anular", ButtonType.DELETE)
        else:
            self.btn_anular = QPushButton("üóëÔ∏è Anular")
            self.btn_anular.setFixedSize(210, 50)
            self._style_modern_button(self.btn_anular, "#6c757d")
        self.btn_anular.clicked.connect(self.anular_consentimento_click)
        self.btn_anular.setVisible(False)  # Inicialmente oculto
        acoes_layout.addWidget(self.btn_anular)
        
        acoes_layout.addStretch()
        main_horizontal_layout.addWidget(acoes_frame)
        
        # Pequena margem direita para n√£o ir at√© o extremo
        main_horizontal_layout.addSpacing(20)
        
        # Adicionar layout horizontal ao layout principal
        layout.addLayout(main_horizontal_layout, 1)
        
        # Carregar status dos consentimentos
        self.carregar_status_consentimentos()
        
        # Atualizar informa√ß√µes do paciente
        self.atualizar_info_paciente_consentimento()

    def carregar_status_consentimentos(self):
        """Carrega e atualiza o status visual dos consentimentos"""
        try:
            from consentimentos_manager import ConsentimentosManager
            
            # Verificar se temos ID do paciente
            paciente_id = self.paciente_data.get('id')
            if not paciente_id:
                return
            
            manager = ConsentimentosManager()
            status_dict = manager.obter_status_consentimentos(paciente_id)
            
            # Atualizar labels de status
            for tipo, info in status_dict.items():
                if tipo in self.labels_status:
                    status = info.get('status', 'nao_assinado')
                    data = info.get('data')
                    data_anulacao = info.get('data_anulacao')
                    
                    if status == 'assinado':
                        emoji = "‚úÖ"
                        texto = f"‚úÖ {data}"
                        cor = "#27ae60"
                    elif status == 'anulado':
                        emoji = "üóëÔ∏è"
                        texto = f"üóëÔ∏è Anulado {data_anulacao}"
                        cor = "#e74c3c"
                    else:
                        emoji = "‚ùå"
                        texto = "‚ùå N√£o assinado"
                        cor = "#6c757d"
                    
                    self.labels_status[tipo].setText(texto)
                    self.labels_status[tipo].setStyleSheet(f"""
                        font-size: 10px;
                        color: {cor};
                        padding-left: 8px;
                        margin: 0;
                        font-weight: 500;
                    """)

        except Exception as e:
            # Manter status padr√£o em caso de erro
            pass

    def atualizar_historico_consentimentos(self):
        """Atualiza a lista de hist√≥rico de consentimentos"""
        # Por agora, exemplo est√°tico
        if hasattr(self, 'lista_historico'):
            self.lista_historico.clear()
            self.lista_historico.addItem("üìã Consentimento Naturopatia - 01/08/2023")
            self.lista_historico.addItem("üëÅÔ∏è Consentimento Iridologia - 15/07/2023")

    def selecionar_tipo_consentimento(self, tipo):
        """Seleciona um tipo de consentimento e carrega o template correspondente"""
        
        # Desmarcar outros bot√µes e marcar o atual
        for t, btn in self.botoes_consentimento.items():
            btn.setChecked(t == tipo)
        
        # Atualizar label do tipo atual
        tipos_nomes = {
            'naturopatia': 'üåø Naturopatia',
            'osteopatia': 'ü¶¥ Osteopatia',
            'iridologia': 'üëÅÔ∏è Iridologia',
            'quantica': '‚ö° Medicina Qu√¢ntica', 
            'mesoterapia': 'üíâ Mesoterapia Homeop√°tica',
            'rgpd': 'üõ°Ô∏è RGPD'
        }
        
        nome_tipo = tipos_nomes.get(tipo, tipo.title())
        self.label_tipo_atual.setText(nome_tipo)
        
        # Carregar template do consentimento com substitui√ß√£o autom√°tica
        template = self.obter_template_consentimento(tipo)
        template_preenchido = self.substituir_variaveis_template(template)
        self.editor_consentimento.setHtml(template_preenchido)
        
        # Guardar tipo atual
        self.tipo_consentimento_atual = tipo
        
        # VERIFICAR SE J√Å EXISTE CONSENTIMENTO ASSINADO PARA ESTE TIPO
        self.verificar_assinaturas_existentes(tipo)
        
        # MOSTRAR a √°rea de edi√ß√£o e OCULTAR mensagem inicial
        self.mensagem_inicial.setVisible(False)
        self.editor_consentimento.setVisible(True)
        
        # MOSTRAR bot√£o de anula√ß√£o no painel lateral (apenas se consentimento j√° foi assinado)
        from consentimentos_manager import ConsentimentosManager
        paciente_id = self.paciente_data.get('id')
        if paciente_id:
            manager = ConsentimentosManager()
            status_dict = manager.obter_status_consentimentos(paciente_id)
            if tipo in status_dict and status_dict[tipo].get('status') == 'assinado':
                self.btn_anular.setVisible(True)
            else:
                self.btn_anular.setVisible(False)
        else:
            self.btn_anular.setVisible(False)

    def verificar_assinaturas_existentes(self, tipo):
        """Verifica se j√° existem assinaturas para este tipo de consentimento"""
        try:
            if not hasattr(self, 'paciente_data') or not self.paciente_data.get('id'):
                # Reset para estado inicial se n√£o h√° paciente
                self.resetar_botoes_assinatura()
                return
            
            from consentimentos_manager import ConsentimentosManager
            manager = ConsentimentosManager()
            
            # Obter o consentimento mais recente deste tipo para este paciente usando DatabaseService
            paciente_id = self.paciente_data['id']
            
            try:
                from ficha_paciente.services.database_service import DatabaseService
                
                # Buscar consentimento usando DatabaseService
                consentimento = DatabaseService.buscar_consentimento_recente(paciente_id, tipo)
                
                if consentimento:
                    # Verificar se o consentimento n√£o foi anulado
                    if consentimento['status'] == 'anulado':
                        # Consentimento foi anulado - resetar bot√µes
                        self.consentimento_ativo = None
                        self.resetar_botoes_assinatura()
                        print(f"[DEBUG] ‚ÑπÔ∏è Consentimento {tipo} foi anulado - resetando bot√µes")
                        return
                    
                    # Armazenar consentimento ativo para usar nas assinaturas
                    self.consentimento_ativo = {'id': consentimento['id'], 'tipo': tipo}
                    
                    # Verificar e atualizar bot√£o do paciente
                    assinatura_paciente = consentimento['assinatura_paciente']
                    if assinatura_paciente and len(assinatura_paciente) > 0:
                        self.assinatura_paciente.setText("‚úÖ Assinado")
                        self.assinatura_paciente.setStyleSheet("""
                            QPushButton {
                                border: 2px solid #27ae60;
                                border-radius: 8px;
                                background-color: #d4edda;
                                font-size: 12px;
                                color: #155724;
                                font-weight: bold;
                                padding: 8px;
                            }
                            QPushButton:hover {
                                background-color: #c3e6cb;
                            }
                        """)
                        print(f"[DEBUG] ‚úÖ Assinatura do paciente encontrada para {tipo}")
                    else:
                        self.resetar_botao_paciente()
                    
                    # Verificar e atualizar bot√£o do terapeuta
                    assinatura_terapeuta = consentimento['assinatura_terapeuta']
                    if assinatura_terapeuta and len(assinatura_terapeuta) > 0:
                        self.assinatura_terapeuta.setText("‚úÖ Assinado")
                        self.assinatura_terapeuta.setStyleSheet("""
                            QPushButton {
                                border: 2px solid #27ae60;
                                border-radius: 8px;
                                background-color: #d4edda;
                                font-size: 12px;
                                color: #155724;
                                font-weight: bold;
                                padding: 8px;
                            }
                            QPushButton:hover {
                                background-color: #c3e6cb;
                            }
                        """)
                        print(f"[DEBUG] ‚úÖ Assinatura do terapeuta encontrada para {tipo}")
                    else:
                        self.resetar_botao_terapeuta()
                else:
                    # N√£o h√° consentimento deste tipo - resetar bot√µes
                    self.consentimento_ativo = None
                    self.resetar_botoes_assinatura()
                    print(f"[DEBUG] ‚ÑπÔ∏è Nenhum consentimento {tipo} encontrado para este paciente")
                    
            except ImportError:
                print(f"[AVISO] DatabaseService n√£o encontrado, usando fallback")
                self.resetar_botoes_assinatura()
            except Exception as e:
                print(f"[ERRO] Erro ao buscar consentimento: {e}")
                self.resetar_botoes_assinatura()
                
        except Exception as e:
            print(f"[ERRO] Erro ao verificar assinaturas existentes: {e}")
            self.resetar_botoes_assinatura()

    def resetar_botoes_assinatura(self):
        """Reset dos bot√µes de assinatura para estado inicial"""
        self.resetar_botao_paciente()
        self.resetar_botao_terapeuta()
        
        # Resetar tamb√©m as assinaturas capturadas
        self.assinatura_paciente_data = None
        self.assinatura_terapeuta_data = None
        print("üîÑ [ASSINATURA] Assinaturas resetadas")
        
    def resetar_botao_paciente(self):
        """Reset do bot√£o de assinatura do paciente"""
        self.assinatura_paciente.setText("üìù Paciente")
        self.assinatura_paciente.setStyleSheet("""
            QPushButton {
                border: 2px solid #2196F3;
                border-radius: 8px;
                background-color: #e3f2fd;
                font-size: 12px;
                color: #1976d2;
                font-weight: 600;
                padding: 8px;
            }
            QPushButton:hover {
                background-color: #bbdefb;
                border-color: #1976d2;
            }
            QPushButton:pressed {
                background-color: #90caf9;
                border-color: #0d47a1;
            }
        """)
        
    def resetar_botao_terapeuta(self):
        """Reset do bot√£o de assinatura do terapeuta"""
        self.assinatura_terapeuta.setText("üë®‚Äç‚öïÔ∏è Terapeuta")
        self.assinatura_terapeuta.setStyleSheet("""
            QPushButton {
                border: 2px solid #4CAF50;
                border-radius: 8px;
                background-color: #e8f5e8;
                font-size: 12px;
                color: #2e7d32;
                font-weight: 600;
                padding: 8px;
            }
            QPushButton:hover {
                background-color: #c8e6c9;
                border-color: #388e3c;
            }
            QPushButton:pressed {
                background-color: #a5d6a7;
                border-color: #1b5e20;
            }
        """)

    def substituir_variaveis_template(self, template_html):
        """Substitui automaticamente vari√°veis no template com dados do paciente"""
        from datetime import datetime
        
        # Obter dados do paciente
        nome_paciente = self.paciente_data.get('nome', '[NOME DO PACIENTE]')
        data_nascimento = self.paciente_data.get('data_nascimento', '[DATA DE NASCIMENTO]')
        contacto = self.paciente_data.get('contacto', '[CONTACTO]')
        email = self.paciente_data.get('email', '[EMAIL]')
        data_atual = datetime.now().strftime('%d/%m/%Y')
        idade = self.calcular_idade()
        
        # Dicion√°rio de substitui√ß√µes
        substituicoes = {
            '{nome_paciente}': nome_paciente,
            '{NOME_PACIENTE}': nome_paciente,
            '{{NOME_PACIENTE}}': nome_paciente,
            '[NOME_PACIENTE]': nome_paciente,
            
            '{data_nascimento}': data_nascimento,
            '{DATA_NASCIMENTO}': data_nascimento,
            '{{DATA_NASCIMENTO}}': data_nascimento,
            '[DATA_NASCIMENTO]': data_nascimento,
            
            '{contacto}': contacto,
            '{CONTACTO}': contacto,
            '{{CONTACTO}}': contacto,
            '[CONTACTO]': contacto,
            
            '{email}': email,
            '{EMAIL}': email,
            '{{EMAIL}}': email,
            '[EMAIL]': email,
            
            '{data_atual}': data_atual,
            '{DATA_ATUAL}': data_atual,
            '{{DATA_ATUAL}}': data_atual,
            '[DATA_ATUAL]': data_atual,
            
            '{idade}': str(idade),
            '{IDADE}': str(idade),
            '{{IDADE}}': str(idade),
            '[IDADE]': str(idade),
            
            # Placeholders comuns
            '________________________________': nome_paciente,
            '__________': data_atual,
            '___________': data_atual,
        }
        
        # Aplicar todas as substitui√ß√µes
        template_preenchido = template_html
        for placeholder, valor in substituicoes.items():
            template_preenchido = template_preenchido.replace(placeholder, valor)
        
        return template_preenchido

            
