"""
FASE 4: Interface de Balanceamento
=================================

Interface para cria√ß√£o e execu√ß√£o de protocolos terap√™uticos
"""

from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                            QPushButton, QTableWidget, QTableWidgetItem, 
                            QComboBox, QGroupBox, QTextEdit, QProgressBar,
                            QSplitter, QFrame, QSpinBox, QDoubleSpinBox,
                            QHeaderView, QTabWidget, QSlider, QCheckBox,
                            QScrollArea, QGridLayout)
from PyQt6.QtCore import Qt, pyqtSignal, QTimer, QThread
from PyQt6.QtGui import QFont, QColor, QBrush, QPalette
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional

from .protocol_generator import (ProtocolGenerator, TherapyProtocol, ProtocolStep, 
                               ProtocolType, protocol_generator)
from .resonance_analysis import ResonanceItem
from .resonance_interface import ModernWidget

class ProtocolCreationWidget(ModernWidget):
    """Widget para cria√ß√£o de protocolos"""
    
    protocol_created = pyqtSignal(object)  # TherapyProtocol
    
    def __init__(self):
        super().__init__()
        self.analysis_results = []
        self.current_protocol = None
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # T√≠tulo
        title = QLabel("‚öõÔ∏è Gera√ß√£o de Protocolos Terap√™uticos")
        title.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("""
            QLabel {
                color: #2c3e50;
                padding: 10px;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                           stop:0 #ecf0f1, stop:0.5 #ffffff, stop:1 #ecf0f1);
                border: 2px solid #3498db;
                border-radius: 8px;
                margin: 5px;
            }
        """)
        layout.addWidget(title)
        
        # Configura√ß√µes do protocolo
        config_group = QGroupBox("‚öôÔ∏è Configura√ß√£o do Protocolo")
        config_layout = QGridLayout(config_group)
        
        # Tipo de protocolo
        config_layout.addWidget(QLabel("Tipo de Protocolo:"), 0, 0)
        self.protocol_type_combo = QComboBox()
        
        for ptype in ProtocolType:
            display_name = {
                ProtocolType.HARMONIZACAO: "üéµ Harmoniza√ß√£o (refor√ßar positivos)",
                ProtocolType.NEUTRALIZACAO: "üõ°Ô∏è Neutraliza√ß√£o (eliminar stressors)",
                ProtocolType.FORTALECIMENTO: "üí™ Fortalecimento (amplificar benef√≠cios)",
                ProtocolType.EQUILIBRIO: "‚öñÔ∏è Equil√≠brio (neutralizar + harmonizar)",
                ProtocolType.DETOX: "üßπ Detox (limpeza profunda)",
                ProtocolType.REGENERACAO: "üå± Regenera√ß√£o (revitaliza√ß√£o)"
            }[ptype]
            
            self.protocol_type_combo.addItem(display_name, ptype)
        
        config_layout.addWidget(self.protocol_type_combo, 0, 1)
        
        # Op√ß√µes avan√ßadas
        config_layout.addWidget(QLabel("Dura√ß√£o m√°xima (min):"), 1, 0)
        self.max_duration_spin = QSpinBox()
        self.max_duration_spin.setRange(10, 120)
        self.max_duration_spin.setValue(30)
        config_layout.addWidget(self.max_duration_spin, 1, 1)
        
        config_layout.addWidget(QLabel("Intensidade:"), 2, 0)
        self.intensity_slider = QSlider(Qt.Orientation.Horizontal)
        self.intensity_slider.setRange(1, 10)
        self.intensity_slider.setValue(5)
        self.intensity_label = QLabel("5/10")
        self.intensity_slider.valueChanged.connect(
            lambda v: self.intensity_label.setText(f"{v}/10")
        )
        intensity_layout = QHBoxLayout()
        intensity_layout.addWidget(self.intensity_slider)
        intensity_layout.addWidget(self.intensity_label)
        config_layout.addLayout(intensity_layout, 2, 1)
        
        # Incluir prepara√ß√£o e integra√ß√£o
        self.include_prep_check = QCheckBox("Incluir prepara√ß√£o e integra√ß√£o")
        self.include_prep_check.setChecked(True)
        config_layout.addWidget(self.include_prep_check, 3, 0, 1, 2)
        
        layout.addWidget(config_group)
        
        # Estat√≠sticas dos dados de entrada
        stats_group = QGroupBox("üìä Dados de Entrada")
        stats_layout = QVBoxLayout(stats_group)
        
        self.input_stats_label = QLabel("Nenhuma an√°lise carregada")
        stats_layout.addWidget(self.input_stats_label)
        
        layout.addWidget(stats_group)
        
        # Bot√µes de a√ß√£o
        buttons_layout = QHBoxLayout()
        
        self.generate_btn = QPushButton("üöÄ Gerar Protocolo")
        self.generate_btn.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                font-size: 12px;
                font-weight: bold;
                padding: 10px;
            }
            QPushButton:hover {
                background-color: #2ecc71;
            }
        """)
        self.generate_btn.clicked.connect(self.generate_protocol)
        self.generate_btn.setEnabled(False)
        
        self.preview_btn = QPushButton("üëÅÔ∏è Pr√©-visualizar")
        self.preview_btn.clicked.connect(self.preview_protocol)
        self.preview_btn.setEnabled(False)
        
        buttons_layout.addWidget(self.generate_btn)
        buttons_layout.addWidget(self.preview_btn)
        buttons_layout.addStretch()
        
        layout.addLayout(buttons_layout)
        
        # √Årea de pr√©-visualiza√ß√£o
        preview_group = QGroupBox("üëÅÔ∏è Pr√©-visualiza√ß√£o do Protocolo")
        preview_layout = QVBoxLayout(preview_group)
        
        self.protocol_preview = QTextEdit()
        self.protocol_preview.setMaximumHeight(200)
        self.protocol_preview.setPlaceholderText("Gere um protocolo para ver a pr√©-visualiza√ß√£o...")
        preview_layout.addWidget(self.protocol_preview)
        
        layout.addWidget(preview_group)
        layout.addStretch()
        
    def set_analysis_results(self, results: List[ResonanceItem], 
                           patient_witness: Dict, field_used: str):
        """Define resultados da an√°lise para gera√ß√£o de protocolo"""
        self.analysis_results = results
        self.patient_witness = patient_witness
        self.field_used = field_used
        
        # Atualizar estat√≠sticas
        if results:
            positive = len([r for r in results if r.resonance_value > 0])
            negative = len([r for r in results if r.resonance_value < 0])
            avg_resonance = sum(r.resonance_value for r in results) / len(results)
            
            stats_text = f"""
            üìä <b>An√°lise carregada:</b><br>
            ‚Ä¢ Total de itens: {len(results)}<br>
            ‚Ä¢ Ressonantes positivos: {positive}<br>
            ‚Ä¢ Stressors (negativos): {negative}<br>
            ‚Ä¢ Resson√¢ncia m√©dia: {avg_resonance:+.1f}<br>
            ‚Ä¢ Campo usado: {field_used}<br>
            ‚Ä¢ Paciente: {patient_witness.get('name', 'N/A')}
            """
            self.input_stats_label.setText(stats_text)
            self.generate_btn.setEnabled(True)
        else:
            self.input_stats_label.setText("Nenhuma an√°lise carregada")
            self.generate_btn.setEnabled(False)
    
    def generate_protocol(self):
        """Gera protocolo baseado nas configura√ß√µes"""
        if not self.analysis_results:
            return
            
        try:
            # Obter configura√ß√µes
            protocol_type = self.protocol_type_combo.currentData()
            max_duration = self.max_duration_spin.value() * 60  # converter para segundos
            intensity = self.intensity_slider.value()
            
            # Op√ß√µes para o gerador
            options = {
                'max_duration': max_duration,
                'intensity': intensity / 10.0,  # normalizar 0-1
                'include_preparation': self.include_prep_check.isChecked()
            }
            
            # Gerar protocolo
            self.current_protocol = protocol_generator.generate_protocol(
                analysis_results=self.analysis_results,
                protocol_type=protocol_type,
                patient_witness=self.patient_witness,
                field_used=self.field_used,
                options=options
            )
            
            # Atualizar pr√©-visualiza√ß√£o
            self.update_preview()
            
            # Habilitar bot√£o de pr√©-visualiza√ß√£o
            self.preview_btn.setEnabled(True)
            
            # Emitir sinal
            self.protocol_created.emit(self.current_protocol)
            
        except Exception as e:
            self.protocol_preview.setText(f"‚ùå Erro ao gerar protocolo: {e}")
    
    def update_preview(self):
        """Atualiza pr√©-visualiza√ß√£o do protocolo"""
        if not self.current_protocol:
            return
            
        protocol = self.current_protocol
        duration_min = protocol.total_duration / 60
        
        preview_text = f"""
        <h3>üìã {protocol.name}</h3>
        <p><b>Tipo:</b> {protocol.protocol_type.value.title()}</p>
        <p><b>Dura√ß√£o total:</b> {duration_min:.1f} minutos</p>
        <p><b>N√∫mero de passos:</b> {len(protocol.steps)}</p>
        <p><b>Descri√ß√£o:</b> {protocol.description}</p>
        
        <h4>üîß Passos do Protocolo:</h4>
        <ol>
        """
        
        for i, step in enumerate(protocol.steps):
            step_min = step.duration / 60
            preview_text += f"""
            <li><b>{step.name}</b><br>
                üéµ {step.frequency:.1f}Hz | 
                üì∂ {step.amplitude:.1f}V | 
                ‚è±Ô∏è {step_min:.1f}min
            """
            if step.pause_after > 0:
                preview_text += f" | ‚è∏Ô∏è {step.pause_after}s pausa"
            preview_text += "</li>"
        
        preview_text += "</ol>"
        
        # Estat√≠sticas de efic√°cia
        effectiveness = protocol_generator.estimate_protocol_effectiveness(protocol)
        preview_text += f"""
        <h4>üìä Estimativa de Efic√°cia:</h4>
        <ul>
            <li>üîã For√ßa: {effectiveness['strength']*100:.0f}%</li>
            <li>‚öñÔ∏è Equil√≠brio: {effectiveness['balance']*100:.0f}%</li>
            <li>üéµ Coer√™ncia: {effectiveness['coherence']*100:.0f}%</li>
            <li>‚è±Ô∏è Dura√ß√£o: {effectiveness['duration_score']*100:.0f}%</li>
            <li><b>üéØ Geral: {effectiveness['overall']*100:.0f}%</b></li>
        </ul>
        """
        
        self.protocol_preview.setHtml(preview_text)
    
    def preview_protocol(self):
        """Abre janela de pr√©-visualiza√ß√£o detalhada"""
        if not self.current_protocol:
            return
            
        # Por agora, mostrar na √°rea de texto
        # Em implementa√ß√£o futura, abrir janela separada
        pass

class ProtocolExecutionWidget(ModernWidget):
    """Widget para execu√ß√£o de protocolos"""
    
    execution_started = pyqtSignal()
    execution_completed = pyqtSignal()
    execution_paused = pyqtSignal()
    execution_stopped = pyqtSignal()
    step_changed = pyqtSignal(int)  # √≠ndice do passo atual
    progress_updated = pyqtSignal(int)  # 0-100%
    
    def __init__(self):
        super().__init__()
        self.current_protocol = None
        self.execution_timer = QTimer()
        self.current_step_index = 0
        self.step_start_time = None
        self.is_paused = False
        self.is_running = False
        self.init_ui()
        self.connect_signals()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # T√≠tulo
        title = QLabel("‚ñ∂Ô∏è Execu√ß√£o de Protocolo")
        title.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("""
            QLabel {
                color: #2c3e50;
                padding: 10px;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                           stop:0 #e8f5e8, stop:0.5 #ffffff, stop:1 #e8f5e8);
                border: 2px solid #27ae60;
                border-radius: 8px;
                margin: 5px;
            }
        """)
        layout.addWidget(title)
        
        # Informa√ß√µes do protocolo
        info_group = QGroupBox("üìã Informa√ß√µes do Protocolo")
        info_layout = QVBoxLayout(info_group)
        
        self.protocol_info_label = QLabel("Nenhum protocolo carregado")
        info_layout.addWidget(self.protocol_info_label)
        
        layout.addWidget(info_group)
        
        # Controles de execu√ß√£o
        controls_group = QGroupBox("üéÆ Controles")
        controls_layout = QHBoxLayout(controls_group)
        
        self.start_btn = QPushButton("‚ñ∂Ô∏è Iniciar")
        self.start_btn.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                font-size: 12px;
                font-weight: bold;
                padding: 10px;
            }
            QPushButton:hover:enabled {
                background-color: #2ecc71;
            }
        """)
        self.start_btn.clicked.connect(self.start_execution)
        self.start_btn.setEnabled(False)
        
        self.pause_btn = QPushButton("‚è∏Ô∏è Pausar")
        self.pause_btn.clicked.connect(self.pause_execution)
        self.pause_btn.setEnabled(False)
        
        self.stop_btn = QPushButton("‚èπÔ∏è Parar")
        self.stop_btn.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                font-size: 12px;
                font-weight: bold;
                padding: 10px;
            }
            QPushButton:hover:enabled {
                background-color: #c0392b;
            }
        """)
        self.stop_btn.clicked.connect(self.stop_execution)
        self.stop_btn.setEnabled(False)
        
        controls_layout.addWidget(self.start_btn)
        controls_layout.addWidget(self.pause_btn)
        controls_layout.addWidget(self.stop_btn)
        controls_layout.addStretch()
        
        layout.addWidget(controls_group)
        
        # Progresso geral
        progress_group = QGroupBox("üìä Progresso")
        progress_layout = QVBoxLayout(progress_group)
        
        self.overall_progress = QProgressBar()
        self.overall_progress.setStyleSheet("""
            QProgressBar {
                text-align: center;
                font-weight: bold;
            }
            QProgressBar::chunk {
                background-color: #3498db;
            }
        """)
        progress_layout.addWidget(QLabel("Progresso Geral:"))
        progress_layout.addWidget(self.overall_progress)
        
        self.step_progress = QProgressBar()
        self.step_progress.setStyleSheet("""
            QProgressBar::chunk {
                background-color: #27ae60;
            }
        """)
        progress_layout.addWidget(QLabel("Passo Atual:"))
        progress_layout.addWidget(self.step_progress)
        
        layout.addWidget(progress_group)
        
        # Passo atual
        current_step_group = QGroupBox("üéØ Passo Atual")
        current_step_layout = QVBoxLayout(current_step_group)
        
        self.current_step_label = QLabel("Aguardando in√≠cio...")
        self.current_step_label.setFont(QFont("Arial", 11, QFont.Weight.Bold))
        current_step_layout.addWidget(self.current_step_label)
        
        self.step_details_label = QLabel("")
        current_step_layout.addWidget(self.step_details_label)
        
        layout.addWidget(current_step_group)
        
        # Tabela de passos
        steps_group = QGroupBox("üìù Lista de Passos")
        steps_layout = QVBoxLayout(steps_group)
        
        self.steps_table = QTableWidget()
        self.steps_table.setColumnCount(5)
        self.steps_table.setHorizontalHeaderLabels([
            "Passo", "Frequ√™ncia", "Amplitude", "Dura√ß√£o", "Status"
        ])
        
        # Configurar larguras das colunas
        header = self.steps_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.Fixed)
        
        self.steps_table.setColumnWidth(1, 100)
        self.steps_table.setColumnWidth(2, 80)
        self.steps_table.setColumnWidth(3, 80)
        self.steps_table.setColumnWidth(4, 100)
        
        steps_layout.addWidget(self.steps_table)
        layout.addWidget(steps_group)
        
    def connect_signals(self):
        """Conecta sinais internos"""
        self.execution_timer.timeout.connect(self.update_execution)
        
    def set_protocol(self, protocol: TherapyProtocol):
        """Define protocolo para execu√ß√£o"""
        self.current_protocol = protocol
        
        if protocol:
            # Atualizar informa√ß√µes
            duration_min = protocol.total_duration / 60
            info_text = f"""
            <b>üìã {protocol.name}</b><br>
            üé≠ Tipo: {protocol.protocol_type.value.title()}<br>
            ‚è±Ô∏è Dura√ß√£o: {duration_min:.1f} minutos<br>
            üîß Passos: {len(protocol.steps)}<br>
            üë§ Paciente: {protocol.patient_witness.get('name', 'N/A')}<br>
            üîÆ Campo: {protocol.field_used}
            """
            self.protocol_info_label.setText(info_text)
            
            # Preencher tabela de passos
            self.populate_steps_table()
            
            # Habilitar bot√£o de in√≠cio
            self.start_btn.setEnabled(True)
        else:
            self.protocol_info_label.setText("Nenhum protocolo carregado")
            self.start_btn.setEnabled(False)
            
    def populate_steps_table(self):
        """Preenche tabela com passos do protocolo"""
        if not self.current_protocol:
            return
            
        steps = self.current_protocol.steps
        self.steps_table.setRowCount(len(steps))
        
        for i, step in enumerate(steps):
            # Nome do passo
            name_item = QTableWidgetItem(step.name)
            self.steps_table.setItem(i, 0, name_item)
            
            # Frequ√™ncia
            freq_item = QTableWidgetItem(f"{step.frequency:.1f} Hz")
            self.steps_table.setItem(i, 1, freq_item)
            
            # Amplitude
            ampl_item = QTableWidgetItem(f"{step.amplitude:.1f} V")
            self.steps_table.setItem(i, 2, ampl_item)
            
            # Dura√ß√£o
            duration_min = step.duration / 60
            dur_item = QTableWidgetItem(f"{duration_min:.1f} min")
            self.steps_table.setItem(i, 3, dur_item)
            
            # Status
            status_item = QTableWidgetItem("‚è≥ Pendente")
            status_item.setBackground(QBrush(QColor(245, 245, 245)))
            self.steps_table.setItem(i, 4, status_item)
    
    def start_execution(self):
        """Inicia execu√ß√£o do protocolo"""
        if not self.current_protocol or self.is_running:
            return
            
        self.is_running = True
        self.is_paused = False
        self.current_step_index = 0
        self.step_start_time = datetime.now()
        
        # Atualizar controles
        self.start_btn.setEnabled(False)
        self.pause_btn.setEnabled(True)
        self.stop_btn.setEnabled(True)
        
        # Iniciar timer (atualizar a cada 100ms)
        self.execution_timer.start(100)
        
        # Emitir sinal
        self.execution_started.emit()
        
        # Atualizar interface
        self.update_current_step_display()
        
    def pause_execution(self):
        """Pausa/despausa execu√ß√£o"""
        if not self.is_running:
            return
            
        if self.is_paused:
            # Despausar
            self.is_paused = False
            self.pause_btn.setText("‚è∏Ô∏è Pausar")
            self.execution_timer.start(100)
        else:
            # Pausar
            self.is_paused = True
            self.pause_btn.setText("‚ñ∂Ô∏è Continuar")
            self.execution_timer.stop()
            self.execution_paused.emit()
    
    def stop_execution(self):
        """Para execu√ß√£o do protocolo"""
        if not self.is_running:
            return
            
        self.is_running = False
        self.is_paused = False
        self.execution_timer.stop()
        
        # Atualizar controles
        self.start_btn.setEnabled(True)
        self.pause_btn.setEnabled(False)
        self.pause_btn.setText("‚è∏Ô∏è Pausar")
        self.stop_btn.setEnabled(False)
        
        # Resetar progresso
        self.overall_progress.setValue(0)
        self.step_progress.setValue(0)
        self.current_step_label.setText("Execu√ß√£o parada")
        self.step_details_label.setText("")
        
        # Emitir sinal
        self.execution_stopped.emit()
        
    def update_execution(self):
        """Atualiza execu√ß√£o do protocolo"""
        if not self.is_running or self.is_paused or not self.current_protocol:
            return
            
        current_time = datetime.now()
        step = self.current_protocol.steps[self.current_step_index]
        
        # Calcular tempo decorrido no passo atual
        elapsed_time = (current_time - self.step_start_time).total_seconds()
        
        # Atualizar progresso do passo
        step_progress = min(100, int((elapsed_time / step.duration) * 100))
        self.step_progress.setValue(step_progress)
        
        # Verificar se passo terminou
        if elapsed_time >= step.duration:
            # Marcar passo como completo
            status_item = self.steps_table.item(self.current_step_index, 4)
            if status_item:
                status_item.setText("‚úÖ Completo")
                status_item.setBackground(QBrush(QColor(144, 238, 144)))
            
            # Pausa ap√≥s passo (se configurada)
            if step.pause_after > 0:
                # Implementar pausa aqui se necess√°rio
                pass
            
            # Avan√ßar para pr√≥ximo passo
            self.current_step_index += 1
            
            if self.current_step_index >= len(self.current_protocol.steps):
                # Protocolo completo
                self.complete_execution()
            else:
                # Pr√≥ximo passo
                self.step_start_time = current_time
                self.update_current_step_display()
                self.step_changed.emit(self.current_step_index)
        
        # Atualizar progresso geral
        total_steps = len(self.current_protocol.steps)
        overall_progress = int(((self.current_step_index + (elapsed_time / step.duration)) / total_steps) * 100)
        self.overall_progress.setValue(min(100, overall_progress))
        self.progress_updated.emit(overall_progress)
    
    def complete_execution(self):
        """Completa execu√ß√£o do protocolo"""
        self.is_running = False
        self.execution_timer.stop()
        
        # Atualizar interface
        self.overall_progress.setValue(100)
        self.step_progress.setValue(100)
        self.current_step_label.setText("‚úÖ Protocolo Completo!")
        self.step_details_label.setText("Todas as frequ√™ncias foram aplicadas com sucesso")
        
        # Atualizar controles
        self.start_btn.setEnabled(True)
        self.pause_btn.setEnabled(False)
        self.stop_btn.setEnabled(False)
        
        # Emitir sinal
        self.execution_completed.emit()
        
    def update_current_step_display(self):
        """Atualiza display do passo atual"""
        if not self.current_protocol or self.current_step_index >= len(self.current_protocol.steps):
            return
            
        step = self.current_protocol.steps[self.current_step_index]
        
        # Atualizar label do passo atual
        self.current_step_label.setText(f"üéØ Passo {self.current_step_index + 1}: {step.name}")
        
        # Detalhes do passo
        details = f"""
        üéµ Frequ√™ncia: {step.frequency:.1f} Hz
        üì∂ Amplitude: {step.amplitude:.1f} V  
        ‚è±Ô∏è Dura√ß√£o: {step.duration / 60:.1f} minutos
        üìù {step.description}
        """
        if step.resonance_item:
            details += f"\nüîÆ Item: {step.resonance_item.name} ({step.resonance_item.resonance_value:+d})"
            
        self.step_details_label.setText(details)
        
        # Marcar passo como ativo na tabela
        for i in range(self.steps_table.rowCount()):
            status_item = self.steps_table.item(i, 4)
            if status_item:
                if i == self.current_step_index:
                    status_item.setText("‚ñ∂Ô∏è Ativo")
                    status_item.setBackground(QBrush(QColor(255, 215, 0)))  # Dourado
                elif i < self.current_step_index:
                    if status_item.text() != "‚úÖ Completo":
                        status_item.setText("‚úÖ Completo")
                        status_item.setBackground(QBrush(QColor(144, 238, 144)))

class BalancingInterface(ModernWidget):
    """Interface principal para balanceamento"""
    
    def __init__(self):
        super().__init__()
        self.current_analysis_results = []
        self.current_patient_witness = {}
        self.current_field = ""
        self.init_ui()
        self.connect_signals()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # T√≠tulo principal
        main_title = QLabel("‚öñÔ∏è INTERFACE DE BALANCEAMENTO TERAP√äUTICO")
        main_title.setFont(QFont("Arial", 16, QFont.Weight.Bold))
        main_title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        main_title.setStyleSheet("""
            QLabel {
                color: #2c3e50;
                padding: 15px;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                           stop:0 #f8f9fa, stop:0.5 #e3f2fd, stop:1 #f8f9fa);
                border: 3px solid #2196f3;
                border-radius: 10px;
                margin: 10px;
            }
        """)
        layout.addWidget(main_title)
        
        # Splitter principal
        main_splitter = QSplitter(Qt.Orientation.Horizontal)
        
        # Painel esquerdo - Cria√ß√£o de protocolo
        self.protocol_creation = ProtocolCreationWidget()
        main_splitter.addWidget(self.protocol_creation)
        
        # Painel direito - Execu√ß√£o
        self.protocol_execution = ProtocolExecutionWidget()
        main_splitter.addWidget(self.protocol_execution)
        
        # Configurar propor√ß√µes
        main_splitter.setSizes([600, 600])
        
        layout.addWidget(main_splitter)
        
    def connect_signals(self):
        """Conecta sinais entre componentes"""
        self.protocol_creation.protocol_created.connect(
            self.protocol_execution.set_protocol
        )
    
    def set_analysis_data(self, results: List[ResonanceItem], 
                         patient_witness: Dict, field_used: str):
        """Define dados da an√°lise para gera√ß√£o de protocolos"""
        self.current_analysis_results = results
        self.current_patient_witness = patient_witness  
        self.current_field = field_used
        
        # Passar para widget de cria√ß√£o
        self.protocol_creation.set_analysis_results(results, patient_witness, field_used)
