"""
FASE 2: Sistema de An√°lise de Resson√¢ncia Informacional
======================================================

M√≥dulo que implementa an√°lise de resson√¢ncia estilo CoRe para medicina informacional.
Baseado em princ√≠pios de resson√¢ncia e testemunho digital.
"""

import numpy as np
import json
import hashlib
from dataclasses import dataclass, field
from typing import List, Dict, Tuple, Optional, Any
from PyQt6.QtCore import QObject, pyqtSignal, QThread
from datetime import datetime
import random

@dataclass
class ResonanceItem:
    """Item para avalia√ß√£o de resson√¢ncia"""
    name: str
    category: str
    subcategory: str = ""
    description: str = ""
    frequency: Optional[float] = None
    resonance_value: int = 0  # -100 a +100
    stability: float = 0.0   # 0.0 a 1.0
    confidence: float = 0.0  # 0.0 a 1.0
    metadata: Dict[str, Any] = field(default_factory=dict)

@dataclass 
class ResonanceField:
    """Campo de avalia√ß√£o de resson√¢ncia"""
    name: str
    description: str
    color: str
    weight: float = 1.0

# Campos de avalia√ß√£o dispon√≠veis (baseado no CoRe)
RESONANCE_FIELDS = [
    ResonanceField("Campo informacional", "Padr√µes de informa√ß√£o e coer√™ncia qu√¢ntica", "#4A90E2", 1.0),
    ResonanceField("Campo energ√©tico", "Fluxos de energia vital e meridanos", "#F5A623", 0.9),
    ResonanceField("Campo espiritual", "Conex√£o espiritual e prop√≥sito de vida", "#BD10E0", 0.8),
    ResonanceField("Campo f√≠sico", "Estrutura f√≠sica e manifesta√ß√£o material", "#7ED321", 1.1),
    ResonanceField("Campo emocional", "Estados emocionais e padr√µes ps√≠quicos", "#D0021B", 0.95),
]

class ResonanceAnalyzer(QThread):
    """
    Analisador de resson√¢ncia informacional
    Implementa algoritmo similar ao CoRe para avalia√ß√£o n√£o-invasiva
    """
    
    # Sinais PyQt6
    progress = pyqtSignal(int)  # 0-100%
    item_analyzed = pyqtSignal(dict)  # resultado de cada item
    analysis_complete = pyqtSignal(list)  # lista final ordenada
    status_update = pyqtSignal(str)
    field_changed = pyqtSignal(str)
    
    def __init__(self):
        super().__init__()
        self.items_to_analyze = []
        self.field = "Campo informacional"
        self.patient_witness = {}
        self.threshold_min = -20
        self.threshold_max = 20
        self.analysis_id = ""
        self.is_running = False
        
    def set_analysis_parameters(self, 
                               items: List[ResonanceItem],
                               field: str,
                               patient_witness: Dict,
                               threshold: Tuple[int, int] = (-20, 20)):
        """Configura par√¢metros da an√°lise"""
        self.items_to_analyze = items
        self.field = field
        self.patient_witness = patient_witness
        self.threshold_min, self.threshold_max = threshold
        
        # Gerar ID √∫nico para esta an√°lise
        analysis_data = f"{field}_{json.dumps(patient_witness, sort_keys=True)}_{len(items)}"
        self.analysis_id = hashlib.md5(analysis_data.encode()).hexdigest()[:8]
        
    def calculate_resonance(self, item: ResonanceItem) -> Tuple[int, float, float]:
        """
        Calcula valor de resson√¢ncia (-100 a +100), estabilidade e confian√ßa
        
        Algoritmo baseado em:
        1. Testemunho do paciente (nome, data nascimento) 
        2. Campo selecionado
        3. Propriedades do item
        4. Componente "qu√¢ntica" (pseudo-aleat√≥ria mas determin√≠stica)
        5. Estabilidade temporal
        """
        
        # 1. Hash do testemunho para consist√™ncia
        witness_string = json.dumps(self.patient_witness, sort_keys=True)
        witness_hash = int(hashlib.md5(witness_string.encode()).hexdigest()[:8], 16)
        
        # 2. Hash do item
        item_string = f"{item.name}_{item.category}_{item.subcategory}"
        item_hash = int(hashlib.md5(item_string.encode()).hexdigest()[:8], 16)
        
        # 3. Hash do campo
        field_hash = int(hashlib.md5(self.field.encode()).hexdigest()[:8], 16)
        
        # 4. Combinar todos os hashes para seed determin√≠stica
        combined_seed = witness_hash ^ item_hash ^ field_hash
        np.random.seed(combined_seed % (2**32))
        
        # 5. Componente base determin√≠stica (-100 a +100)
        base_resonance = ((combined_seed % 200) - 100)
        
        # 6. Modula√ß√£o pelo campo selecionado
        field_weights = {
            "Campo informacional": 1.0,
            "Campo energ√©tico": 0.9,
            "Campo espiritual": 0.8,
            "Campo f√≠sico": 1.1,
            "Campo emocional": 0.95
        }
        field_factor = field_weights.get(self.field, 1.0)
        
        # 7. Componente "qu√¢ntica" (flutua√ß√£o natural)
        quantum_noise = np.random.normal(0, 12)  # Desvio padr√£o 12
        
        # 8. C√°lculo da resson√¢ncia final
        resonance = base_resonance * field_factor + quantum_noise
        resonance = int(max(-100, min(100, resonance)))
        
        # 9. Calcular estabilidade (baseada na consist√™ncia)
        stability_seed = (combined_seed >> 8) % 1000
        np.random.seed(stability_seed)
        stability = max(0.3, min(1.0, abs(np.random.normal(0.75, 0.15))))
        
        # 10. Calcular confian√ßa (baseada no valor absoluto e estabilidade)
        confidence = min(1.0, (abs(resonance) / 100.0) * stability)
        
        return resonance, stability, confidence
    
    def run(self):
        """Executa an√°lise de resson√¢ncia completa"""
        if not self.items_to_analyze:
            self.status_update.emit("‚ùå Nenhum item para analisar")
            return
            
        self.is_running = True
        results = []
        total = len(self.items_to_analyze)
        
        self.status_update.emit(f"üîÆ Iniciando an√°lise de {total} itens no {self.field}...")
        self.field_changed.emit(self.field)
        
        # Simular tempo de "conex√£o" com testemunho
        self.status_update.emit("üß¨ Estabelecendo conex√£o com testemunho digital...")
        self.msleep(500)
        
        for i, item in enumerate(self.items_to_analyze):
            if not self.is_running:
                break
                
            # Calcular resson√¢ncia
            resonance, stability, confidence = self.calculate_resonance(item)
            
            # Atualizar item
            item.resonance_value = resonance
            item.stability = stability
            item.confidence = confidence
            
            # Verificar se est√° dentro do threshold
            in_range = self.threshold_min <= resonance <= self.threshold_max
            
            # Emitir resultado individual
            result = {
                'name': item.name,
                'category': item.category,
                'subcategory': item.subcategory,
                'value': resonance,
                'stability': stability,
                'confidence': confidence,
                'in_range': in_range,
                'field': self.field,
                'analysis_id': self.analysis_id
            }
            
            self.item_analyzed.emit(result)
            
            # Adicionar aos resultados se dentro do threshold
            if in_range:
                results.append(item)
            
            # Atualizar progresso
            progress = int((i + 1) / total * 100)
            self.progress.emit(progress)
            
            # Simular tempo de processamento (realista)
            self.msleep(50 + np.random.randint(0, 30))  # 50-80ms por item
        
        if self.is_running:
            # Ordenar por valor absoluto de resson√¢ncia (mais fortes primeiro)
            results.sort(key=lambda x: abs(x.resonance_value), reverse=True)
            
            self.status_update.emit(f"‚úÖ An√°lise completa: {len(results)} itens ressonantes encontrados")
            self.analysis_complete.emit(results)
        else:
            self.status_update.emit("‚èπÔ∏è An√°lise cancelada pelo usu√°rio")
            
        self.is_running = False
    
    def stop_analysis(self):
        """Para a an√°lise em andamento"""
        self.is_running = False
        self.status_update.emit("‚èπÔ∏è Parando an√°lise...")

class ResonanceDatabase:
    """
    Base de dados de itens para an√°lise de resson√¢ncia
    Baseada nas categorias do CoRe
    """
    
    def __init__(self):
        self.categories = {}
        self._load_default_database()
    
    def _load_default_database(self):
        """Carrega base de dados padr√£o com categorias do CoRe"""
        
        # Acupuntura e Medicina Chinesa
        self.categories["Acupuntura"] = {
            "Acupuntura do couro cabeludo": [
                "√Årea motora", "√Årea da fala", "√Årea equilibrio", "√Årea vis√£o"
            ],
            "Acupuntura auricular": [
                "Ponto Shen Men", "Ponto Rim", "Ponto F√≠gado", "Ponto Cora√ß√£o", "Ponto Pulm√£o"
            ],
            "Meridianos principais": [
                "Meridiano Pulm√£o", "Meridiano Intestino Grosso", "Meridiano Est√¥mago",
                "Meridiano Ba√ßo", "Meridiano Cora√ß√£o", "Meridiano Intestino Delgado",
                "Meridiano Bexiga", "Meridiano Rim", "Meridiano Peric√°rdio",
                "Meridiano Triplo Aquecedor", "Meridiano Ves√≠cula Biliar", "Meridiano F√≠gado"
            ],
            "Pontos especiais": [
                "Yintang", "Baihui", "Shenmen", "Hegu", "Zusanli", "Sanyinjiao"
            ]
        }
        
        # Homeopatia
        self.categories["Homeopatia"] = {
            "Policrestos": [
                "Sulphur", "Calcarea carbonica", "Lycopodium", "Pulsatilla",
                "Arsenicum album", "Nux vomica", "Phosphorus", "Sepia"
            ],
            "Nos√≥dios": [
                "Tuberculinum", "Medorrhinum", "Syphilinum", "Psorinum",
                "Carcinosinum", "Influenzinum"
            ],
            "Sais de Sch√ºssler": [
                "Calcarea fluorica", "Calcarea phosphorica", "Ferrum phosphoricum",
                "Kalium muriaticum", "Kalium phosphoricum", "Kalium sulphuricum",
                "Magnesia phosphorica", "Natrum muriaticum", "Natrum phosphoricum",
                "Natrum sulphuricum", "Silicea", "Calcarea sulphurica"
            ],
            "Florais de Bach": [
                "Rescue Remedy", "Rock Rose", "Mimulus", "Cherry Plum", "Aspen",
                "Red Chestnut", "Impatiens", "Cerato", "Scleranthus", "Water Violet"
            ]
        }
        
        # Fitoterapia e Medicina Natural
        self.categories["Medicina Natural"] = {
            "Fitoterapia Ocidental": [
                "Echinacea", "Ginkgo biloba", "Ginseng", "Hypericum",
                "Valeriana", "Passiflora", "Melissa", "Chamomilla"
            ],
            "Medicina Ayurv√©dica": [
                "Ashwagandha", "Brahmi", "Triphala", "Turmeric",
                "Guduchi", "Amalaki", "Haritaki", "Bibhitaki"
            ],
            "Medicina Chinesa": [
                "Ginseng", "Astragalus", "Schisandra", "Reishi",
                "Cordyceps", "He Shou Wu", "Dang Gui", "Gan Cao"
            ],
            "Aromaterapia": [
                "Lavanda", "Tea Tree", "Eucalipto", "Rosmarinho",
                "Lim√£o", "Laranja", "Ylang-ylang", "Bergamota"
            ]
        }
        
        # Nutri√ß√£o e Suplementos
        self.categories["Nutri√ß√£o"] = {
            "Vitaminas": [
                "Vitamina A", "Vitamina B1", "Vitamina B2", "Vitamina B6",
                "Vitamina B12", "Vitamina C", "Vitamina D", "Vitamina E",
                "Vitamina K", "√Åcido F√≥lico", "Biotina", "Niacina"
            ],
            "Minerais": [
                "C√°lcio", "Magn√©sio", "Zinco", "Ferro", "Sel√©nio",
                "Cr√≥mio", "Mangan√™s", "Cobre", "Iodo", "Pot√°ssio"
            ],
            "Amino√°cidos": [
                "Triptofano", "Tirosina", "Glicina", "Taurina",
                "Arginina", "Lisina", "Metionina", "Cistina"
            ],
            "√Åcidos Gordos": [
                "Omega 3", "Omega 6", "Omega 9", "EPA", "DHA",
                "√Åcido Linoleico", "√Åcido Alfa-Linoleico"
            ]
        }
        
        # Sistemas Org√¢nicos
        self.categories["√ìrg√£os e Sistemas"] = {
            "Sistema Digestivo": [
                "Est√¥mago", "Intestino Delgado", "Intestino Grosso", "F√≠gado",
                "Ves√≠cula Biliar", "P√¢ncreas", "Es√≥fago"
            ],
            "Sistema Respirat√≥rio": [
                "Pulm√µes", "Br√¥nquios", "Traqueia", "Laringe", "Diafragma"
            ],
            "Sistema Cardiovascular": [
                "Cora√ß√£o", "Art√©rias", "Veias", "Sistema Linf√°tico"
            ],
            "Sistema Nervoso": [
                "C√©rebro", "Medula Espinhal", "Sistema Nervoso Simp√°tico",
                "Sistema Nervoso Parassimp√°tico", "Plexos Nervosos"
            ],
            "Sistema End√≥crino": [
                "Hip√≥fise", "Tiroide", "Suprarrenais", "P√¢ncreas End√≥crino",
                "G√≥nadas", "Paratiroide", "Timo", "Pineal"
            ]
        }
    
    def get_all_items(self) -> List[ResonanceItem]:
        """Retorna todos os itens da base de dados como objetos ResonanceItem"""
        items = []
        
        for category, subcategories in self.categories.items():
            for subcategory, item_names in subcategories.items():
                for item_name in item_names:
                    item = ResonanceItem(
                        name=item_name,
                        category=category,
                        subcategory=subcategory,
                        description=f"{item_name} do grupo {subcategory}"
                    )
                    items.append(item)
        
        return items
    
    def get_categories(self) -> Dict[str, Dict[str, List[str]]]:
        """Retorna estrutura completa de categorias"""
        return self.categories
    
    def search_items(self, query: str) -> List[ResonanceItem]:
        """Procura itens por nome ou categoria"""
        query = query.lower()
        items = []
        
        for category, subcategories in self.categories.items():
            if query in category.lower():
                # Adicionar todos os itens da categoria
                for subcategory, item_names in subcategories.items():
                    for item_name in item_names:
                        items.append(ResonanceItem(
                            name=item_name,
                            category=category,
                            subcategory=subcategory
                        ))
            else:
                # Procurar em subcategorias e itens
                for subcategory, item_names in subcategories.items():
                    if query in subcategory.lower():
                        for item_name in item_names:
                            items.append(ResonanceItem(
                                name=item_name,
                                category=category,
                                subcategory=subcategory
                            ))
                    else:
                        for item_name in item_names:
                            if query in item_name.lower():
                                items.append(ResonanceItem(
                                    name=item_name,
                                    category=category,
                                    subcategory=subcategory
                                ))
        
        return items

# Inst√¢ncia global da base de dados
resonance_database = ResonanceDatabase()
