"""
Demonstra√ß√£o Completa do Sistema de Declara√ß√µes de Sa√∫de - Biodesk
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Script de teste e demonstra√ß√£o do sistema completo de declara√ß√µes de sa√∫de,
incluindo renderiza√ß√£o de formul√°rios, valida√ß√£o e exporta√ß√£o para PDF.
"""

import sys
import json
import logging
from pathlib import Path
from datetime import datetime
from PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QMessageBox
from PyQt6.QtCore import pyqtSlot

# Configurar path para imports locais
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

try:
    # Imports absolutos dos m√≥dulos locais
    import renderer
    import export_pdf
    
    HealthDeclarationRenderer = renderer.HealthDeclarationRenderer
    HealthDeclarationPDFExporter = export_pdf.HealthDeclarationPDFExporter
    
    def create_health_declaration_system(form_spec_path):
        renderer_obj = HealthDeclarationRenderer(form_spec_path)
        exporter_obj = HealthDeclarationPDFExporter()
        return renderer_obj, exporter_obj
        
except ImportError as e:
    print(f"‚ùå Erro na importa√ß√£o: {e}")
    print("Certifique-se de que todos os arquivos est√£o no diret√≥rio correto")
    sys.exit(1)


class HealthDeclarationDemo(QMainWindow):
    """Demo principal do sistema de declara√ß√µes"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Sistema de Declara√ß√µes de Sa√∫de - Demo")
        self.resize(1000, 700)
        
        # Caminhos
        self.form_spec_path = Path(__file__).parent / "form_spec.json"
        self.output_dir = Path(__file__).parent / "demo_output"
        self.output_dir.mkdir(exist_ok=True)
        
        # Verificar arquivos necess√°rios
        if not self.form_spec_path.exists():
            QMessageBox.critical(
                self, "Erro",
                f"Arquivo de especifica√ß√£o n√£o encontrado: {self.form_spec_path}"
            )
            sys.exit(1)
        
        self.setup_ui()
        self.setup_system()
    
    def setup_ui(self):
        """Configurar interface"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # T√≠tulo
        from PyQt6.QtWidgets import QLabel
        title = QLabel("üè• Sistema de Declara√ß√µes de Sa√∫de - Demonstra√ß√£o")
        title.setStyleSheet("font-size: 18px; font-weight: bold; margin: 20px; color: #2c3e50;")
        layout.addWidget(title)
        
        # Bot√µes de demonstra√ß√£o
        btn_new_form = QPushButton("üìù Nova Declara√ß√£o de Sa√∫de")
        btn_new_form.clicked.connect(self.open_new_declaration)
        btn_new_form.setStyleSheet("padding: 10px; font-size: 14px;")
        layout.addWidget(btn_new_form)
        
        btn_sample_pdf = QPushButton("üìÑ Gerar PDF de Exemplo")
        btn_sample_pdf.clicked.connect(self.generate_sample_pdf)
        btn_sample_pdf.setStyleSheet("padding: 10px; font-size: 14px;")
        layout.addWidget(btn_sample_pdf)
        
        btn_test_validation = QPushButton("‚úÖ Testar Valida√ß√£o")
        btn_test_validation.clicked.connect(self.test_validation)
        btn_test_validation.setStyleSheet("padding: 10px; font-size: 14px;")
        layout.addWidget(btn_test_validation)
        
        # √Årea para mostrar o formul√°rio
        self.form_container = QWidget()
        layout.addWidget(self.form_container)
        
        # Status
        self.status_label = QLabel("Sistema iniciado. Selecione uma op√ß√£o acima.")
        self.status_label.setStyleSheet("color: #7f8c8d; font-style: italic; margin: 10px;")
        layout.addWidget(self.status_label)
    
    def setup_system(self):
        """Configurar sistema de declara√ß√µes"""
        try:
            self.renderer, self.exporter = create_health_declaration_system(self.form_spec_path)
            self.status_label.setText("‚úÖ Sistema carregado com sucesso")
        except Exception as e:
            QMessageBox.critical(self, "Erro", f"Falha ao carregar sistema: {e}")
            self.status_label.setText(f"‚ùå Erro: {e}")
    
    @pyqtSlot()
    def open_new_declaration(self):
        """Abrir nova declara√ß√£o"""
        try:
            # Criar novo renderer
            new_renderer = HealthDeclarationRenderer(self.form_spec_path)
            
            # Conectar sinais
            new_renderer.form_completed.connect(self.on_form_completed)
            new_renderer.form_validated.connect(self.on_form_validated)
            
            # Mostrar em janela separada
            new_renderer.show()
            self.status_label.setText("üìù Nova declara√ß√£o aberta")
            
        except Exception as e:
            QMessageBox.warning(self, "Erro", f"Erro ao abrir declara√ß√£o: {e}")
    
    @pyqtSlot()
    def generate_sample_pdf(self):
        """Gerar PDF de exemplo"""
        try:
            # Dados de exemplo
            sample_data = {
                'nome_completo': 'Maria Silva Santos',
                'data_nascimento': '1985-05-15',
                'contacto_telefone': '+351 912345678',
                'contacto_email': 'maria.silva@email.com',
                'genero': 'Feminino',
                'profissao': 'Professora',
                'doencas_cronicas': ['Hipertens√£o arterial'],
                'medicamentos_atuais': ['Lisinopril 10mg'],
                'cirurgias_previas': ['Apendicectomia (2010)'],
                'alergias_conhecidas': ['Penicilina'],
                'dispositivos_implantados': ['nenhum'],
                'gravidez_atual': False,
                'sintomas_atuais': ['Ligeira cefaleia'],
                'nivel_dor': 2,
                'nivel_stress': 4,
                'qualidade_sono': 7,
                'decl_confirmo': True,
                'decl_autorizacao': True,
                'decl_responsabilidade': True,
                '_metadata': {
                    'submission_time': datetime.now().isoformat(),
                    'form_version': '1.0',
                    'validation_passed': True,
                    'demo_mode': True
                }
            }
            
            # Dados de assinatura fict√≠cia
            sample_signature = [
                [[(50, 50), (100, 60)], [(100, 60), (150, 50)]],
                [[(60, 70), (140, 80)], [(140, 80), (120, 90)]]
            ]
            
            # Gerar PDF
            output_path = self.output_dir / f"declaracao_exemplo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            
            self.status_label.setText("üîÑ Gerando PDF de exemplo...")
            QApplication.processEvents()
            
            success = self.exporter.export_declaration(
                form_data=sample_data,
                form_spec_path=self.form_spec_path,
                output_path=output_path,
                signature_data=sample_signature,
                include_timestamp=False
            )
            
            if success:
                QMessageBox.information(
                    self, "PDF Gerado",
                    f"‚úÖ PDF de exemplo gerado com sucesso!\n\nüìÑ Arquivo: {output_path.name}\nüìÅ Local: {output_path.parent}"
                )
                self.status_label.setText(f"‚úÖ PDF gerado: {output_path.name}")
            else:
                QMessageBox.warning(self, "Erro", "‚ùå Falha na gera√ß√£o do PDF")
                self.status_label.setText("‚ùå Erro na gera√ß√£o do PDF")
                
        except Exception as e:
            QMessageBox.critical(self, "Erro", f"Erro inesperado: {e}")
            self.status_label.setText(f"‚ùå Erro: {e}")
    
    @pyqtSlot()
    def test_validation(self):
        """Testar sistema de valida√ß√£o"""
        try:
            from renderer import FormValidator
            
            # Carregar especifica√ß√£o
            with open(self.form_spec_path, 'r', encoding='utf-8') as f:
                form_spec = json.load(f)
            
            validator = FormValidator(form_spec)
            
            # Teste 1: Dados v√°lidos
            valid_data = {
                'nome_completo': 'Jo√£o Silva',
                'data_nascimento': '1980-01-01',
                'contacto_telefone': '+351 912345678',
                'doencas_cronicas': ['nenhuma'],
                'dispositivos_implantados': ['nenhum'],
                'sintomas_atuais': ['nenhum'],
                'decl_confirmo': True,
                'decl_autorizacao': True,
                'decl_responsabilidade': True
            }
            
            # Teste 2: Dados com contraindica√ß√£o
            contraindicated_data = {
                'nome_completo': 'Ana Costa',
                'data_nascimento': '1990-01-01',
                'contacto_telefone': '+351 987654321',
                'doencas_cronicas': ['Epilepsia'],  # Contraindica√ß√£o
                'dispositivos_implantados': ['Pacemaker'],  # Contraindica√ß√£o
                'sintomas_atuais': ['Convuls√µes'],
                'decl_confirmo': True,
                'decl_autorizacao': True,
                'decl_responsabilidade': True
            }
            
            # Teste 3: Dados incompletos
            incomplete_data = {
                'nome_completo': '',  # Campo obrigat√≥rio vazio
                'contacto_telefone': '',  # Campo obrigat√≥rio vazio
                'decl_confirmo': False  # Consentimento obrigat√≥rio n√£o dado
            }
            
            # Executar valida√ß√µes
            errors_valid = validator.validate_form(valid_data)
            errors_contraindicated = validator.validate_form(contraindicated_data)
            errors_incomplete = validator.validate_form(incomplete_data)
            
            # Resultados
            results = []
            results.append("TESTE DE VALIDA√á√ÉO\n" + "="*50)
            
            results.append(f"\n1. DADOS V√ÅLIDOS:")
            if not errors_valid:
                results.append("   ‚úÖ Valida√ß√£o passou - Nenhum erro encontrado")
            else:
                results.append(f"   ‚ùå Erros encontrados: {errors_valid}")
            
            results.append(f"\n2. DADOS COM CONTRAINDICA√á√ÉO:")
            if errors_contraindicated:
                results.append("   ‚úÖ Contraindica√ß√µes detectadas corretamente:")
                for field, errs in errors_contraindicated.items():
                    results.append(f"      - {field}: {errs}")
            else:
                results.append("   ‚ùå FALHA: Contraindica√ß√µes n√£o foram detectadas!")
            
            results.append(f"\n3. DADOS INCOMPLETOS:")
            if errors_incomplete:
                results.append("   ‚úÖ Campos obrigat√≥rios validados corretamente:")
                for field, errs in errors_incomplete.items():
                    results.append(f"      - {field}: {errs}")
            else:
                results.append("   ‚ùå FALHA: Campos obrigat√≥rios n√£o foram validados!")
            
            results.append(f"\n4. TESTE DE CONTRAINDICA√á√ïES CR√çTICAS:")
            has_critical = validator.has_critical_contraindications(contraindicated_data)
            if has_critical:
                results.append("   ‚úÖ Contraindica√ß√µes cr√≠ticas detectadas corretamente")
            else:
                results.append("   ‚ùå FALHA: Contraindica√ß√µes cr√≠ticas n√£o detectadas!")
            
            # Mostrar resultados
            QMessageBox.information(
                self, "Resultados da Valida√ß√£o",
                "\n".join(results)
            )
            
            self.status_label.setText("‚úÖ Testes de valida√ß√£o conclu√≠dos")
            
        except Exception as e:
            QMessageBox.critical(self, "Erro", f"Erro nos testes de valida√ß√£o: {e}")
            self.status_label.setText(f"‚ùå Erro nos testes: {e}")
    
    @pyqtSlot(dict)
    def on_form_completed(self, form_data):
        """Formul√°rio foi completado"""
        self.status_label.setText("‚úÖ Declara√ß√£o submetida com sucesso")
        
        # Perguntar se quer gerar PDF
        reply = QMessageBox.question(
            self, "Gerar PDF",
            "Declara√ß√£o submetida com sucesso!\n\nDeseja gerar o PDF?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            self.generate_pdf_from_data(form_data)
    
    @pyqtSlot(bool)
    def on_form_validated(self, is_valid):
        """Status de valida√ß√£o mudou"""
        if is_valid:
            self.status_label.setText("‚úÖ Formul√°rio v√°lido")
        else:
            self.status_label.setText("‚ö†Ô∏è Formul√°rio cont√©m erros")
    
    def generate_pdf_from_data(self, form_data):
        """Gerar PDF a partir dos dados do formul√°rio"""
        try:
            output_path = self.output_dir / f"declaracao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            
            success = self.exporter.export_declaration(
                form_data=form_data,
                form_spec_path=self.form_spec_path,
                output_path=output_path,
                signature_data=None,  # TODO: Capturar dados de assinatura do formul√°rio
                include_timestamp=False
            )
            
            if success:
                QMessageBox.information(
                    self, "PDF Gerado",
                    f"PDF da declara√ß√£o gerado com sucesso!\n\nüìÑ {output_path}"
                )
            else:
                QMessageBox.warning(self, "Erro", "Falha na gera√ß√£o do PDF")
                
        except Exception as e:
            QMessageBox.critical(self, "Erro", f"Erro na gera√ß√£o do PDF: {e}")


def main():
    """Fun√ß√£o principal da demonstra√ß√£o"""
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Criar aplica√ß√£o
    app = QApplication(sys.argv)
    app.setApplicationName("Sistema Declara√ß√µes Sa√∫de Demo")
    app.setApplicationVersion("1.0.0")
    
    # Verificar depend√™ncias
    print("üîÑ Verificando depend√™ncias...")
    
    try:
        from PyQt6 import QtCore
        print("‚úÖ PyQt6 dispon√≠vel")
    except ImportError:
        print("‚ùå PyQt6 n√£o encontrado")
        return 1
    
    try:
        import reportlab
        print("‚úÖ ReportLab dispon√≠vel - PDFs com funcionalidade completa")
    except ImportError:
        print("‚ö†Ô∏è ReportLab n√£o encontrado - PDFs com funcionalidade limitada")
    
    # Criar e mostrar demo
    print("üöÄ Iniciando demonstra√ß√£o...")
    
    demo = HealthDeclarationDemo()
    demo.show()
    
    print("‚úÖ Sistema de declara√ß√µes carregado com sucesso!")
    print("   Use a interface para testar as funcionalidades:")
    print("   ‚Ä¢ Nova Declara√ß√£o: Abre formul√°rio interativo")
    print("   ‚Ä¢ PDF de Exemplo: Gera documento com dados fict√≠cios")
    print("   ‚Ä¢ Testar Valida√ß√£o: Executa testes autom√°ticos")
    
    # Executar aplica√ß√£o
    return app.exec()


if __name__ == "__main__":
    sys.exit(main())
