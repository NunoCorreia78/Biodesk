"""
Cliente de Integra√ß√£o Biodesk - Quarkus Super Heroes
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Cliente Python para integra√ß√£o entre o sistema Biodesk e os microservi√ßos
Quarkus Super Heroes, fornecendo uma API unificada para comunica√ß√£o.

Funcionalidades:
- Conectividade com todos os microservi√ßos Quarkus
- Sistema de health check e monitoramento
- Tratamento de erros e reconex√£o autom√°tica
- Cache de dados para performance
- Logging integrado com Biodesk
"""

import json
import time
import asyncio
import logging
from typing import Dict, List, Optional, Any, Tuple
from pathlib import Path
from dataclasses import dataclass, asdict
from enum import Enum
import urllib.request
import urllib.parse
import urllib.error

# Configura√ß√µes de servi√ßos
DEFAULT_SERVICES_CONFIG = {
    "hero-service": {
        "url": "http://localhost:8083",
        "endpoints": {
            "list": "/api/heroes",
            "get": "/api/heroes/{id}",
            "create": "/api/heroes",
            "update": "/api/heroes/{id}",
            "delete": "/api/heroes/{id}",
            "random": "/api/heroes/random"
        }
    },
    "villain-service": {
        "url": "http://localhost:8084", 
        "endpoints": {
            "list": "/api/villains",
            "get": "/api/villains/{id}",
            "create": "/api/villains",
            "update": "/api/villains/{id}",
            "delete": "/api/villains/{id}",
            "random": "/api/villains/random"
        }
    },
    "fight-service": {
        "url": "http://localhost:8082",
        "endpoints": {
            "list": "/api/fights",
            "get": "/api/fights/{id}",
            "create": "/api/fights",
            "random": "/api/fights/randomfight"
        }
    },
    "statistics-service": {
        "url": "http://localhost:8085",
        "endpoints": {
            "stats": "/api/statistics",
            "team-stats": "/api/statistics/team"
        }
    },
    "event-statistics": {
        "url": "http://localhost:8086",
        "endpoints": {
            "events": "/",
            "health": "/q/health"
        }
    }
}

@dataclass
class ServiceStatus:
    """Status de um servi√ßo"""
    name: str
    url: str
    healthy: bool
    response_time_ms: int
    last_check: float
    error_message: Optional[str] = None

@dataclass 
class Hero:
    """Modelo de dados para Her√≥i"""
    id: Optional[int] = None
    name: str = ""
    other_name: str = ""
    level: int = 1
    picture: str = ""
    powers: str = ""

@dataclass
class Villain:
    """Modelo de dados para Vil√£o"""
    id: Optional[int] = None
    name: str = ""
    other_name: str = ""
    level: int = 1
    picture: str = ""
    powers: str = ""

@dataclass
class Fight:
    """Modelo de dados para Combate"""
    id: Optional[int] = None
    fight_date: str = ""
    winner_name: str = ""
    winner_level: int = 0
    winner_picture: str = ""
    loser_name: str = ""
    loser_level: int = 0
    loser_picture: str = ""
    winner_team: str = ""
    loser_team: str = ""

class BiodeskQuarkusIntegration:
    """Cliente principal de integra√ß√£o Biodesk-Quarkus"""
    
    def __init__(self, config_file: Optional[Path] = None):
        """
        Inicializar cliente de integra√ß√£o
        
        Args:
            config_file: Caminho para arquivo de configura√ß√£o (opcional)
        """
        self.logger = logging.getLogger("BiodeskQuarkusIntegration")
        
        # Carregar configura√ß√£o
        self.config_file = config_file or Path(__file__).parent / "config.json"
        self.services_config = self._load_config()
        
        # Estado do cliente
        self.services_status: Dict[str, ServiceStatus] = {}
        self.cache: Dict[str, Dict] = {}
        self.cache_ttl = 300  # 5 minutos
        self.request_timeout = 30
        self.retry_attempts = 3
        self.retry_delay = 1
        
        # Inicializar monitoramento
        self._initialize_services_status()
        
    def _load_config(self) -> Dict:
        """Carregar configura√ß√£o dos servi√ßos"""
        try:
            if self.config_file.exists():
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                return config.get('services', DEFAULT_SERVICES_CONFIG)
            else:
                self.logger.warning(f"Arquivo de configura√ß√£o n√£o encontrado: {self.config_file}")
                return DEFAULT_SERVICES_CONFIG
        except Exception as e:
            self.logger.error(f"Erro ao carregar configura√ß√£o: {e}")
            return DEFAULT_SERVICES_CONFIG
    
    def _initialize_services_status(self):
        """Inicializar status dos servi√ßos"""
        for service_name, config in self.services_config.items():
            self.services_status[service_name] = ServiceStatus(
                name=service_name,
                url=config['url'],
                healthy=False,
                response_time_ms=0,
                last_check=0
            )
    
    def _make_request(self, url: str, method: str = 'GET', data: Optional[Dict] = None,
                     headers: Optional[Dict] = None) -> Tuple[Optional[Dict], bool]:
        """
        Fazer requisi√ß√£o HTTP com tratamento de erros
        
        Returns:
            Tuple[response_data, success]
        """
        if headers is None:
            headers = {'Content-Type': 'application/json', 'User-Agent': 'Biodesk-Integration/1.0'}
        
        for attempt in range(self.retry_attempts):
            try:
                # Preparar requisi√ß√£o
                if data and method in ['POST', 'PUT']:
                    data_bytes = json.dumps(data).encode('utf-8')
                    req = urllib.request.Request(url, data=data_bytes, headers=headers, method=method)
                else:
                    req = urllib.request.Request(url, headers=headers, method=method)
                
                # Executar requisi√ß√£o
                start_time = time.time()
                with urllib.request.urlopen(req, timeout=self.request_timeout) as response:
                    response_time = int((time.time() - start_time) * 1000)
                    
                    # Ler resposta
                    response_data = response.read().decode('utf-8')
                    
                    # Parse JSON se poss√≠vel
                    try:
                        json_data = json.loads(response_data) if response_data else {}
                        return json_data, True
                    except json.JSONDecodeError:
                        return {"raw_response": response_data}, True
                        
            except urllib.error.HTTPError as e:
                self.logger.warning(f"HTTP Error {e.code} para {url} (tentativa {attempt + 1})")
                if attempt == self.retry_attempts - 1:
                    return None, False
                    
            except urllib.error.URLError as e:
                self.logger.warning(f"URL Error para {url}: {e.reason} (tentativa {attempt + 1})")
                if attempt == self.retry_attempts - 1:
                    return None, False
                    
            except Exception as e:
                self.logger.error(f"Erro inesperado para {url}: {e} (tentativa {attempt + 1})")
                if attempt == self.retry_attempts - 1:
                    return None, False
            
            # Aguardar antes de tentar novamente
            if attempt < self.retry_attempts - 1:
                time.sleep(self.retry_delay * (attempt + 1))
        
        return None, False
    
    def _get_from_cache(self, cache_key: str) -> Optional[Dict]:
        """Obter dados do cache se v√°lidos"""
        if cache_key in self.cache:
            entry = self.cache[cache_key]
            if time.time() - entry.get('timestamp', 0) < self.cache_ttl:
                return entry['data']
        return None
    
    def _set_cache(self, cache_key: str, data: Dict):
        """Armazenar dados no cache"""
        self.cache[cache_key] = {
            'data': data,
            'timestamp': time.time()
        }
    
    def check_services_health(self) -> Dict[str, ServiceStatus]:
        """
        Verificar sa√∫de de todos os servi√ßos
        
        Returns:
            Dict com status de cada servi√ßo
        """
        self.logger.info("üîç Verificando sa√∫de dos servi√ßos Quarkus...")
        
        for service_name, config in self.services_config.items():
            status = self.services_status[service_name]
            
            # URL de health check (usar endpoint espec√≠fico ou raiz)
            health_url = config['url']
            if 'health' in config.get('endpoints', {}):
                health_url += config['endpoints']['health']
            elif service_name == 'event-statistics':
                health_url += "/"
            else:
                # Para outros servi√ßos, usar o endpoint principal
                endpoints = config.get('endpoints', {})
                if endpoints:
                    health_url += list(endpoints.values())[0]
            
            start_time = time.time()
            _, success = self._make_request(health_url, 'GET')
            response_time = int((time.time() - start_time) * 1000)
            
            # Atualizar status
            status.healthy = success
            status.response_time_ms = response_time
            status.last_check = time.time()
            
            if success:
                status.error_message = None
                self.logger.info(f"  ‚úÖ {service_name}: OK ({response_time}ms)")
            else:
                status.error_message = "Service unavailable"
                self.logger.warning(f"  ‚ùå {service_name}: FALHA")
        
        return self.services_status
    
    def is_service_healthy(self, service_name: str) -> bool:
        """Verificar se um servi√ßo espec√≠fico est√° saud√°vel"""
        if service_name not in self.services_status:
            return False
        
        status = self.services_status[service_name]
        
        # Verificar se precisa atualizar o status
        if time.time() - status.last_check > 60:  # 1 minuto
            self.check_services_health()
        
        return status.healthy
    
    def get_all_healthy_services(self) -> List[str]:
        """Obter lista de servi√ßos saud√°veis"""
        self.check_services_health()
        return [name for name, status in self.services_status.items() if status.healthy]
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # HEROES SERVICE METHODS
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def get_heroes(self, use_cache: bool = True) -> Optional[List[Hero]]:
        """Obter lista de her√≥is"""
        cache_key = "heroes_list"
        
        if use_cache:
            cached_data = self._get_from_cache(cache_key)
            if cached_data:
                return [Hero(**hero) for hero in cached_data]
        
        if not self.is_service_healthy('hero-service'):
            self.logger.error("Hero service n√£o dispon√≠vel")
            return None
        
        config = self.services_config['hero-service']
        url = config['url'] + config['endpoints']['list']
        
        data, success = self._make_request(url)
        if success and data:
            heroes_data = data if isinstance(data, list) else data.get('heroes', [])
            if use_cache:
                self._set_cache(cache_key, heroes_data)
            return [Hero(**hero) for hero in heroes_data]
        
        return None
    
    def get_hero(self, hero_id: int) -> Optional[Hero]:
        """Obter her√≥i espec√≠fico por ID"""
        if not self.is_service_healthy('hero-service'):
            self.logger.error("Hero service n√£o dispon√≠vel")
            return None
        
        config = self.services_config['hero-service']
        url = config['url'] + config['endpoints']['get'].format(id=hero_id)
        
        data, success = self._make_request(url)
        if success and data:
            return Hero(**data)
        
        return None
    
    def get_random_hero(self) -> Optional[Hero]:
        """Obter her√≥i aleat√≥rio"""
        if not self.is_service_healthy('hero-service'):
            self.logger.error("Hero service n√£o dispon√≠vel")
            return None
        
        config = self.services_config['hero-service']
        url = config['url'] + config['endpoints']['random']
        
        data, success = self._make_request(url)
        if success and data:
            return Hero(**data)
        
        return None
    
    def create_hero(self, hero: Hero) -> Optional[Hero]:
        """Criar novo her√≥i"""
        if not self.is_service_healthy('hero-service'):
            self.logger.error("Hero service n√£o dispon√≠vel")
            return None
        
        config = self.services_config['hero-service']
        url = config['url'] + config['endpoints']['create']
        
        hero_data = asdict(hero)
        if hero_data.get('id') is None:
            del hero_data['id']  # Remove ID para cria√ß√£o
        
        data, success = self._make_request(url, 'POST', hero_data)
        if success and data:
            # Limpar cache
            self._clear_heroes_cache()
            return Hero(**data)
        
        return None
    
    def _clear_heroes_cache(self):
        """Limpar cache de her√≥is"""
        cache_keys = [k for k in self.cache.keys() if k.startswith('heroes')]
        for key in cache_keys:
            del self.cache[key]
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # VILLAINS SERVICE METHODS
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def get_villains(self, use_cache: bool = True) -> Optional[List[Villain]]:
        """Obter lista de vil√µes"""
        cache_key = "villains_list"
        
        if use_cache:
            cached_data = self._get_from_cache(cache_key)
            if cached_data:
                return [Villain(**villain) for villain in cached_data]
        
        if not self.is_service_healthy('villain-service'):
            self.logger.error("Villain service n√£o dispon√≠vel")
            return None
        
        config = self.services_config['villain-service']
        url = config['url'] + config['endpoints']['list']
        
        data, success = self._make_request(url)
        if success and data:
            villains_data = data if isinstance(data, list) else data.get('villains', [])
            if use_cache:
                self._set_cache(cache_key, villains_data)
            return [Villain(**villain) for villain in villains_data]
        
        return None
    
    def get_random_villain(self) -> Optional[Villain]:
        """Obter vil√£o aleat√≥rio"""
        if not self.is_service_healthy('villain-service'):
            self.logger.error("Villain service n√£o dispon√≠vel")
            return None
        
        config = self.services_config['villain-service']
        url = config['url'] + config['endpoints']['random']
        
        data, success = self._make_request(url)
        if success and data:
            return Villain(**data)
        
        return None
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # FIGHTS SERVICE METHODS
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def get_fights(self, use_cache: bool = True) -> Optional[List[Fight]]:
        """Obter lista de combates"""
        cache_key = "fights_list"
        
        if use_cache:
            cached_data = self._get_from_cache(cache_key)
            if cached_data:
                return [Fight(**fight) for fight in cached_data]
        
        if not self.is_service_healthy('fight-service'):
            self.logger.error("Fight service n√£o dispon√≠vel")
            return None
        
        config = self.services_config['fight-service']
        url = config['url'] + config['endpoints']['list']
        
        data, success = self._make_request(url)
        if success and data:
            fights_data = data if isinstance(data, list) else data.get('fights', [])
            if use_cache:
                self._set_cache(cache_key, fights_data)
            return [Fight(**fight) for fight in fights_data]
        
        return None
    
    def create_random_fight(self) -> Optional[Fight]:
        """Criar combate aleat√≥rio"""
        if not self.is_service_healthy('fight-service'):
            self.logger.error("Fight service n√£o dispon√≠vel")
            return None
        
        config = self.services_config['fight-service']
        url = config['url'] + config['endpoints']['random']
        
        data, success = self._make_request(url, 'POST')
        if success and data:
            # Limpar cache de fights
            self._clear_fights_cache()
            return Fight(**data)
        
        return None
    
    def _clear_fights_cache(self):
        """Limpar cache de combates"""
        cache_keys = [k for k in self.cache.keys() if k.startswith('fights')]
        for key in cache_keys:
            del self.cache[key]
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # STATISTICS SERVICE METHODS
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def get_fight_statistics(self) -> Optional[Dict]:
        """Obter estat√≠sticas de combates"""
        cache_key = "fight_statistics"
        
        cached_data = self._get_from_cache(cache_key)
        if cached_data:
            return cached_data
        
        if not self.is_service_healthy('statistics-service'):
            self.logger.error("Statistics service n√£o dispon√≠vel")
            return None
        
        config = self.services_config['statistics-service']
        url = config['url'] + config['endpoints']['stats']
        
        data, success = self._make_request(url)
        if success and data:
            self._set_cache(cache_key, data)
            return data
        
        return None
    
    def get_team_statistics(self) -> Optional[Dict]:
        """Obter estat√≠sticas por equipe"""
        cache_key = "team_statistics"
        
        cached_data = self._get_from_cache(cache_key)
        if cached_data:
            return cached_data
        
        if not self.is_service_healthy('statistics-service'):
            self.logger.error("Statistics service n√£o dispon√≠vel")
            return None
        
        config = self.services_config['statistics-service']
        url = config['url'] + config['endpoints']['team-stats']
        
        data, success = self._make_request(url)
        if success and data:
            self._set_cache(cache_key, data)
            return data
        
        return None
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # UTILITY METHODS
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def clear_cache(self):
        """Limpar todo o cache"""
        self.cache.clear()
        self.logger.info("Cache limpo")
    
    def get_integration_status(self) -> Dict:
        """Obter status completo da integra√ß√£o"""
        healthy_services = self.get_all_healthy_services()
        
        return {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "services_total": len(self.services_config),
            "services_healthy": len(healthy_services),
            "services_status": {name: status.healthy for name, status in self.services_status.items()},
            "cache_entries": len(self.cache),
            "integration_healthy": len(healthy_services) >= 3  # Pelo menos 3 servi√ßos funcionando
        }
    
    def sync_therapy_data(self) -> Dict:
        """
        Sincronizar dados de terapia com sistema Quarkus
        
        Este m√©todo pode ser usado para integrar dados da terapia qu√¢ntica
        do Biodesk com os sistemas de estat√≠sticas do Quarkus
        """
        self.logger.info("üîÑ Sincronizando dados de terapia...")
        
        sync_result = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "heroes_synced": 0,
            "villains_synced": 0,
            "fights_synced": 0,
            "statistics_updated": False,
            "success": False
        }
        
        try:
            # Obter dados dos servi√ßos
            heroes = self.get_heroes()
            villains = self.get_villains()
            fights = self.get_fights()
            stats = self.get_fight_statistics()
            
            if heroes:
                sync_result["heroes_synced"] = len(heroes)
            
            if villains:
                sync_result["villains_synced"] = len(villains)
                
            if fights:
                sync_result["fights_synced"] = len(fights)
                
            if stats:
                sync_result["statistics_updated"] = True
            
            # Se conseguiu obter pelo menos alguns dados
            if any([heroes, villains, fights, stats]):
                sync_result["success"] = True
                self.logger.info("‚úÖ Sincroniza√ß√£o conclu√≠da com sucesso")
            else:
                self.logger.warning("‚ö†Ô∏è Nenhum dado foi sincronizado")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro durante sincroniza√ß√£o: {e}")
            sync_result["error"] = str(e)
        
        return sync_result
    
    def __str__(self):
        return f"BiodeskQuarkusIntegration(services={len(self.services_config)}, healthy={len(self.get_all_healthy_services())})"


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# EXEMPLO DE USO
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def main():
    """Exemplo de uso do cliente de integra√ß√£o"""
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    print("üöÄ TESTE DE INTEGRA√á√ÉO BIODESK-QUARKUS")
    print("=" * 50)
    
    # Inicializar cliente
    client = BiodeskQuarkusIntegration()
    
    # Verificar sa√∫de dos servi√ßos
    print("\nüîç Verificando servi√ßos...")
    health_status = client.check_services_health()
    
    for name, status in health_status.items():
        status_icon = "‚úÖ" if status.healthy else "‚ùå"
        print(f"{status_icon} {name}: {status.response_time_ms}ms")
    
    # Testar funcionalidades se servi√ßos est√£o saud√°veis
    healthy_services = client.get_all_healthy_services()
    if len(healthy_services) >= 2:
        print(f"\nüéØ Testando funcionalidades ({len(healthy_services)} servi√ßos ativos)...")
        
        # Testar her√≥is
        if 'hero-service' in healthy_services:
            heroes = client.get_heroes()
            if heroes:
                print(f"üìã Encontrados {len(heroes)} her√≥is")
                
                random_hero = client.get_random_hero()
                if random_hero:
                    print(f"ü¶∏ Her√≥i aleat√≥rio: {random_hero.name} (N√≠vel {random_hero.level})")
        
        # Testar vil√µes
        if 'villain-service' in healthy_services:
            villains = client.get_villains()
            if villains:
                print(f"üëπ Encontrados {len(villains)} vil√µes")
        
        # Testar estat√≠sticas
        if 'statistics-service' in healthy_services:
            stats = client.get_fight_statistics()
            if stats:
                print("üìä Estat√≠sticas obtidas com sucesso")
        
        # Sincronizar dados
        print("\nüîÑ Testando sincroniza√ß√£o...")
        sync_result = client.sync_therapy_data()
        if sync_result['success']:
            print("‚úÖ Sincroniza√ß√£o bem-sucedida")
        
    else:
        print("‚ö†Ô∏è Poucos servi√ßos dispon√≠veis para testes completos")
    
    # Status final
    print(f"\nüìã STATUS FINAL:")
    integration_status = client.get_integration_status()
    print(f"Servi√ßos saud√°veis: {integration_status['services_healthy']}/{integration_status['services_total']}")
    print(f"Integra√ß√£o funcional: {'‚úÖ' if integration_status['integration_healthy'] else '‚ùå'}")
    

if __name__ == "__main__":
    main()