"""
Exemplo de Gest√£o de Her√≥is - Integra√ß√£o Biodesk-Quarkus
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Este exemplo demonstra como usar o cliente de integra√ß√£o para
gerenciar her√≥is no sistema Quarkus Super Heroes atrav√©s do Biodesk.
"""

import sys
import os
from pathlib import Path

# Adicionar diret√≥rio pai ao path para importar o cliente
sys.path.append(str(Path(__file__).parent.parent))

from biodesk_quarkus_client import BiodeskQuarkusIntegration, Hero
import logging

def demo_hero_management():
    """Demonstra√ß√£o da gest√£o de her√≥is"""
    
    # Configurar logging
    logging.basicConfig(level=logging.INFO)
    
    print("ü¶∏ DEMO: GEST√ÉO DE HER√ìIS - BIODESK + QUARKUS")
    print("=" * 60)
    
    # Inicializar cliente
    client = BiodeskQuarkusIntegration()
    
    # Verificar se o hero service est√° dispon√≠vel
    if not client.is_service_healthy('hero-service'):
        print("‚ùå Hero Service n√£o est√° dispon√≠vel")
        print("   Certifique-se de que os servi√ßos Quarkus est√£o rodando:")
        print("   docker-compose up -d")
        return False
    
    print("‚úÖ Hero Service conectado\n")
    
    # 1. Listar her√≥is existentes
    print("üìã 1. LISTANDO HER√ìIS EXISTENTES")
    print("-" * 40)
    
    heroes = client.get_heroes()
    if heroes:
        print(f"Encontrados {len(heroes)} her√≥is:")
        for i, hero in enumerate(heroes[:5], 1):  # Mostrar apenas os primeiros 5
            print(f"  {i}. {hero.name} (N√≠vel {hero.level}) - {hero.other_name}")
        
        if len(heroes) > 5:
            print(f"  ... e mais {len(heroes) - 5} her√≥is")
    else:
        print("  Nenhum her√≥i encontrado")
    
    print()
    
    # 2. Obter her√≥i aleat√≥rio
    print("üé≤ 2. HER√ìI ALEAT√ìRIO")
    print("-" * 40)
    
    random_hero = client.get_random_hero()
    if random_hero:
        print(f"ü¶∏ Nome: {random_hero.name}")
        print(f"üë§ Outro nome: {random_hero.other_name}")
        print(f"‚≠ê N√≠vel: {random_hero.level}")
        print(f"‚ö° Poderes: {random_hero.powers}")
        if random_hero.picture:
            print(f"üñºÔ∏è Imagem: {random_hero.picture}")
    else:
        print("  N√£o foi poss√≠vel obter her√≥i aleat√≥rio")
    
    print()
    
    # 3. Criar novo her√≥i (exemplo)
    print("‚ûï 3. CRIANDO NOVO HER√ìI (EXEMPLO)")
    print("-" * 40)
    
    # Criar her√≥i de exemplo inspirado na terapia qu√¢ntica
    new_hero = Hero(
        name="Quantum Healer",
        other_name="Dr. Biodesk",
        level=50,
        powers="Quantum resonance, biofield healing, frequency therapy",
        picture="https://example.com/quantum-healer.jpg"
    )
    
    print(f"üî® Criando her√≥i: {new_hero.name}")
    print(f"   Outros nomes: {new_hero.other_name}")
    print(f"   N√≠vel: {new_hero.level}")
    print(f"   Poderes: {new_hero.powers}")
    
    # Tentar criar o her√≥i
    created_hero = client.create_hero(new_hero)
    if created_hero:
        print(f"‚úÖ Her√≥i criado com ID: {created_hero.id}")
        print(f"   Nome: {created_hero.name}")
        print(f"   N√≠vel: {created_hero.level}")
    else:
        print("‚ùå N√£o foi poss√≠vel criar o her√≥i")
        print("   (Isso √© normal se o servi√ßo estiver rodando em modo read-only)")
    
    print()
    
    # 4. Buscar her√≥i espec√≠fico
    print("üîç 4. BUSCANDO HER√ìI ESPEC√çFICO")
    print("-" * 40)
    
    if heroes and len(heroes) > 0:
        first_hero_id = heroes[0].id
        specific_hero = client.get_hero(first_hero_id)
        
        if specific_hero:
            print(f"ü¶∏ Her√≥i encontrado (ID {first_hero_id}):")
            print(f"   Nome: {specific_hero.name}")
            print(f"   Outros nomes: {specific_hero.other_name}")
            print(f"   N√≠vel: {specific_hero.level}")
            print(f"   Poderes: {specific_hero.powers}")
        else:
            print(f"‚ùå N√£o foi poss√≠vel encontrar her√≥i com ID {first_hero_id}")
    else:
        print("  Nenhum her√≥i dispon√≠vel para busca")
    
    print()
    
    # 5. Estat√≠sticas
    print("üìä 5. ESTAT√çSTICAS DE INTEGRA√á√ÉO")
    print("-" * 40)
    
    integration_status = client.get_integration_status()
    print(f"Servi√ßos saud√°veis: {integration_status['services_healthy']}/{integration_status['services_total']}")
    print(f"Entradas no cache: {integration_status['cache_entries']}")
    print(f"Integra√ß√£o funcional: {'‚úÖ' if integration_status['integration_healthy'] else '‚ùå'}")
    
    # Status espec√≠fico do hero service
    hero_service_status = client.services_status.get('hero-service')
    if hero_service_status:
        print(f"Hero Service - Tempo de resposta: {hero_service_status.response_time_ms}ms")
        print(f"Hero Service - √öltima verifica√ß√£o: {hero_service_status.last_check}")
    
    print("\nüéâ DEMO CONCLU√çDA!")
    return True

def interactive_hero_explorer():
    """Explorador interativo de her√≥is"""
    
    print("\nüîß MODO INTERATIVO - EXPLORADOR DE HER√ìIS")
    print("=" * 60)
    
    client = BiodeskQuarkusIntegration()
    
    if not client.is_service_healthy('hero-service'):
        print("‚ùå Hero Service n√£o dispon√≠vel para modo interativo")
        return
    
    while True:
        print("\nOp√ß√µes dispon√≠veis:")
        print("1. Listar todos os her√≥is")
        print("2. Her√≥i aleat√≥rio")
        print("3. Buscar her√≥i por ID")
        print("4. Status dos servi√ßos")
        print("5. Limpar cache")
        print("0. Sair")
        
        try:
            choice = input("\nEscolha uma op√ß√£o: ").strip()
            
            if choice == '0':
                print("üëã Encerrando explorador...")
                break
                
            elif choice == '1':
                heroes = client.get_heroes()
                if heroes:
                    print(f"\nüìã {len(heroes)} her√≥is encontrados:")
                    for hero in heroes:
                        print(f"  ID {hero.id}: {hero.name} (Lv.{hero.level})")
                else:
                    print("‚ùå Nenhum her√≥i encontrado")
                    
            elif choice == '2':
                hero = client.get_random_hero()
                if hero:
                    print(f"\nüé≤ Her√≥i Aleat√≥rio:")
                    print(f"  ID: {hero.id}")
                    print(f"  Nome: {hero.name}")
                    print(f"  Outros nomes: {hero.other_name}")
                    print(f"  N√≠vel: {hero.level}")
                    print(f"  Poderes: {hero.powers}")
                else:
                    print("‚ùå N√£o foi poss√≠vel obter her√≥i aleat√≥rio")
                    
            elif choice == '3':
                try:
                    hero_id = int(input("Digite o ID do her√≥i: "))
                    hero = client.get_hero(hero_id)
                    if hero:
                        print(f"\nü¶∏ Her√≥i encontrado:")
                        print(f"  ID: {hero.id}")
                        print(f"  Nome: {hero.name}")
                        print(f"  Outros nomes: {hero.other_name}")
                        print(f"  N√≠vel: {hero.level}")
                        print(f"  Poderes: {hero.powers}")
                    else:
                        print(f"‚ùå Her√≥i com ID {hero_id} n√£o encontrado")
                except ValueError:
                    print("‚ùå Por favor digite um n√∫mero v√°lido")
                    
            elif choice == '4':
                status = client.check_services_health()
                print(f"\nüìä Status dos Servi√ßos:")
                for name, service_status in status.items():
                    icon = "‚úÖ" if service_status.healthy else "‚ùå"
                    print(f"  {icon} {name}: {service_status.response_time_ms}ms")
                    
            elif choice == '5':
                client.clear_cache()
                print("üßπ Cache limpo!")
                
            else:
                print("‚ùå Op√ß√£o inv√°lida")
                
        except KeyboardInterrupt:
            print("\nüëã Encerrando...")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ INICIANDO DEMO DE GEST√ÉO DE HER√ìIS")
    
    # Executar demo b√°sica
    success = demo_hero_management()
    
    if success:
        # Perguntar se quer modo interativo
        try:
            response = input("\nDeseja usar o modo interativo? (s/N): ").lower()
            if response == 's':
                interactive_hero_explorer()
        except KeyboardInterrupt:
            print("\nüëã At√© logo!")

if __name__ == "__main__":
    main()